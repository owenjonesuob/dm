[{"path":"https://dm.cynkra.com/dev/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dm","title":"Contributing to dm","text":"outlines propose change dm.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dm","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dm","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dm","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"cynkra/dm\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"general-remarks","dir":"","previous_headings":"Code style & design","what":"General remarks","title":"Contributing to dm","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use specific branch downlit knitting README.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Code style & design","what":"Testing","title":"Contributing to dm","text":"use {testthat}. exported functions tested. R scripts “tests/testthat/”” whose name start “helper” loaded devtools::load_all() available tests interactive debugging, can’t found :::. “helper-src.R” implements complex mechanism dm creating functions, dm_for_filter(), create remote dm different database management system depending context. allows tests use run different setups github actions. Additionally my_db_test_src() return relevant database. order test databases locally (typically debug CI tests fails can’t debug online log) can set environ variable “DM_TEST_SRC” “postgres”, “mariadb”, “mssql”, “duckdb” “sqlite”. might setup credentials “helper-config-db.R” . useful expectations can found “helper-expectations.R”. “helper-skip.R” helpers skip tests contexts, might useful instance feature supported databases. using expect_snapshot() DBMS dependent call (.e call uses dm_for_filter() copies my_db_test_src()), variant argument set my_test_src_name (global variable created loading helpers) snapshots end different directories.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"function-naming","dir":"","previous_headings":"Code style & design","what":"Function naming","title":"Contributing to dm","text":"See vignette function naming logic.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"error-messages","dir":"","previous_headings":"Code style & design","what":"Error messages","title":"Contributing to dm","text":"strive standardise error messages {dm}. failure triggered abort() function defined “error-helpers.R” error class defined dm_error_full() error message created separate function. Please follow pattern used \"error-helpers.R\". Exceptions might exist mostly waiting harmonised.","code":""},{"path":"https://dm.cynkra.com/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dm","text":"Please note dm project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://dm.cynkra.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 cynkra GmbH. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dm.cynkra.com/dev/TODO.html","id":null,"dir":"","previous_headings":"","what":"FIXME NEXT","title":"FIXME NEXT","text":"un-skip tests","code":""},{"path":"https://dm.cynkra.com/dev/TODO.html","id":"later","dir":"","previous_headings":"","what":"Later","title":"FIXME NEXT","text":"Store keys objects dm, much easier debugging Add “strict mode” GitHub Actions: validation new_dm3() Named PK unique constraints: https://github.com/r-dbi/DBI/pull/351#issuecomment-833438890 dm_paste(): remove select argument documentation, via _impl() function takes dots argument, like dm_rm_pk() Use copy_to(temporary = FALSE) sqlite duckdb: use file can discarded Requires schema support databases","code":""},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"creating-a-dm-object","dir":"Articles","previous_headings":"","what":"Creating a dm object","title":"Getting started with dm","text":"dm objects can created individual tables loaded directly relational data model RDBMS (relational database management system). demonstration, ’re going work model hosted public server. first thing need connection RDBMS hosting data. create dm object RDBMS using dm_from_con(), passing connection object just created first argument. dm object interrogates RDBMS table column information, primary foreign keys. Currently, primary foreign keys available SQL Server, Postgres MariaDB.","code":"library(RMariaDB)  fin_db <- dbConnect(   MariaDB(),   username = \"guest\",   password = \"relational\",   dbname = \"Financial_ijs\",   host = \"relational.fit.cvut.cz\" ) library(RMariaDB)  fin_db <- dm:::financial_db_con() library(dm)  fin_dm <- dm_from_con(fin_db) #> Keys queried successfully, use `learn_keys = TRUE` to mute this message. fin_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (9 total) #> Columns: 57 #> Primary keys: 9 #> Foreign keys: 8"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"selecting-tables","dir":"Articles","previous_headings":"","what":"Selecting tables","title":"Getting started with dm","text":"dm object can accessed like named list tables: Additionally, dm functions pipe-friendly support tidy evaluation. can use [ dm_select_tbl() verb derive smaller dm loans, accounts, districts trans tables:","code":"names(fin_dm) #> [1] \"accounts\"  \"cards\"     \"clients\"   \"disps\"     \"districts\" \"loans\"     #> [7] \"orders\"    \"tkeys\"     \"trans\" fin_dm$loans #> # Source:   table<`Financial_ijs`.`loans`> [?? x 7] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>       id account_id date       amount duration payments status #>    <int>      <int> <date>      <dbl>    <int>    <dbl> <chr>  #>  1  4959          2 1994-01-05  80952       24     3373 A      #>  2  4961         19 1996-04-29  30276       12     2523 B      #>  3  4962         25 1997-12-08  30276       12     2523 A      #>  4  4967         37 1998-10-14 318480       60     5308 D      #>  5  4968         38 1998-04-19 110736       48     2307 C      #>  6  4973         67 1996-05-02 165960       24     6915 A      #>  7  4986         97 1997-08-10 102876       12     8573 A      #>  8  4988        103 1997-12-06 265320       36     7370 D      #>  9  4989        105 1998-12-05 352704       48     7348 C      #> 10  4990        110 1997-09-08 162576       36     4516 C      #> # … with more rows dplyr::count(fin_dm$trans) #> # Source:   SQL [1 x 1] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>         n #>   <int64> #> 1 1056320 fin_dm_small <- fin_dm[c(\"loans\", \"accounts\", \"districts\", \"trans\")] fin_dm_small <-   fin_dm %>%   dm_select_tbl(loans, accounts, districts, trans)"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"linking-tables-by-adding-keys","dir":"Articles","previous_headings":"","what":"Linking tables by adding keys","title":"Getting started with dm","text":"many cases, dm_from_con() already returns dm keys set. , dm allows us define primary foreign keys . , use learn_keys = FALSE obtain dm object tables. data model, id columns uniquely identify records accounts loans tables, used primary key. primary key defined dm_add_pk(). loan linked one account via account_id column loans table, relationship established dm_add_fk().","code":"library(dm)  fin_dm_small <-   dm_from_con(fin_db, learn_keys = FALSE) %>%   dm_select_tbl(loans, accounts, districts, trans) fin_dm_keys <-   fin_dm_small %>%   dm_add_pk(table = accounts, columns = id) %>%   dm_add_pk(loans, id) %>%   dm_add_fk(table = loans, columns = account_id, ref_table = accounts) %>%   dm_add_pk(trans, id) %>%   dm_add_fk(trans, account_id, accounts) %>%   dm_add_pk(districts, id) %>%   dm_add_fk(accounts, district_id, districts)"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"visualizing-a-data-model","dir":"Articles","previous_headings":"","what":"Visualizing a data model","title":"Getting started with dm","text":"diagram data model quickest way verify ’re right track. can display visual summary dm time. default display table name, defined keys, links tables. Visualizing dm current state, can see keys created link tables together. Color guides eye.","code":"fin_dm_keys %>%   dm_set_colors(darkgreen = c(loans, accounts), darkblue = trans, grey = districts) %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"accessing-a-data-model-as-a-table","dir":"Articles","previous_headings":"","what":"Accessing a data model as a table","title":"Getting started with dm","text":"want perform modeling analysis relational model, need transform tabular format R functions can work . argument recursive = TRUE, dm_flatten_to_tbl() automatically follow foreign keys across tables gather available columns single table. Apart rows printed , data fetched database. Use select() reduce number columns fetched, collect() retrieve entire result local processing.","code":"fin_dm_keys %>%   dm_flatten_to_tbl(loans, .recursive = TRUE) #> Renaming ambiguous columns: %>% #>   dm_rename(loans, date.loans = date) %>% #>   dm_rename(accounts, date.accounts = date) #> # Source:   SQL [?? x 25] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>       id account…¹ date.loans amount durat…² payme…³ status distr…⁴ frequ…⁵ #>    <int>     <int> <date>      <dbl>   <int>   <dbl> <chr>    <int> <chr>   #>  1  4959         2 1994-01-05  80952      24    3373 A            1 POPLAT… #>  2  4961        19 1996-04-29  30276      12    2523 B           21 POPLAT… #>  3  4962        25 1997-12-08  30276      12    2523 A           68 POPLAT… #>  4  4967        37 1998-10-14 318480      60    5308 D           20 POPLAT… #>  5  4968        38 1998-04-19 110736      48    2307 C           19 POPLAT… #>  6  4973        67 1996-05-02 165960      24    6915 A           16 POPLAT… #>  7  4986        97 1997-08-10 102876      12    8573 A           74 POPLAT… #>  8  4988       103 1997-12-06 265320      36    7370 D           44 POPLAT… #>  9  4989       105 1998-12-05 352704      48    7348 C           21 POPLAT… #> 10  4990       110 1997-09-08 162576      36    4516 C           36 POPLAT… #> # … with more rows, 16 more variables: date.accounts <date>, A2 <chr>, #> #   A3 <chr>, A4 <int>, A5 <int>, A6 <int>, A7 <int>, A8 <int>, A9 <int>, #> #   A10 <dbl>, A11 <int>, A12 <dbl>, A13 <dbl>, A14 <int>, A15 <int>, #> #   A16 <int>, and abbreviated variable names ¹​account_id, ²​duration, #> #   ³​payments, ⁴​district_id, ⁵​frequency loans_df <-   fin_dm_keys %>%   dm_flatten_to_tbl(loans, .recursive = TRUE) %>%   select(id, amount, duration, A3) %>%   collect() #> Renaming ambiguous columns: %>% #>   dm_rename(loans, date.loans = date) %>% #>   dm_rename(accounts, date.accounts = date)  model <- lm(amount ~ duration + A3, data = loans_df)  model #>  #> Call: #> lm(formula = amount ~ duration + A3, data = loans_df) #>  #> Coefficients: #>     (Intercept)         duration   A3east Bohemia  A3north Bohemia   #>           10196             4109           -16204           -28933   #> A3north Moravia         A3Prague  A3south Bohemia  A3south Moravia   #>            1467             4044            -1896           -12463   #>  A3west Bohemia   #>          -28572"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"operations-on-table-data-within-a-dm","dir":"Articles","previous_headings":"","what":"Operations on table data within a dm","title":"Getting started with dm","text":"don’t need take extra step exporting data work . dm object, complete access dplyr’s data manipulation verbs. operate data within individual tables. work particular table use dm_zoom_to() set context chosen table. can perform dplyr operations want. Note , example, use dm_insert_zoomed() add results new table data model. table temporary deleted session ends. want make permanent changes data model RDBMS, please see “Persisting results” section vignette(\"howto-dm-db\").","code":"fin_dm_total <-   fin_dm_keys %>%   dm_zoom_to(loans) %>%   group_by(account_id) %>%   summarize(total_amount = sum(amount, na.rm = TRUE)) %>%   ungroup() %>%   dm_insert_zoomed(\"total_loans\")  fin_dm_total$total_loans #> # Source:   SQL [?? x 2] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>    account_id total_amount #>         <int>        <dbl> #>  1          2        80952 #>  2         19        30276 #>  3         25        30276 #>  4         37       318480 #>  5         38       110736 #>  6         67       165960 #>  7         97       102876 #>  8        103       265320 #>  9        105       352704 #> 10        110       162576 #> # … with more rows"},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"checking-constraints","dir":"Articles","previous_headings":"","what":"Checking constraints","title":"Getting started with dm","text":"’s always smart check data model follows specifications. building model changing existing models adding tables keys, even important new model validated. dm_examine_constrains() checks primary foreign keys reports violate expected constraints. constraint checking, including cardinality, finding candidate columns keys, normalization, see vignette(\"tech-dm-low-level\").","code":"fin_dm_total %>%   dm_examine_constraints() #> ℹ All constraints satisfied."},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting started with dm","text":"Now introduced basic operation dm, next step learn dm methods particular use case requires. data RDBMS? move vignette(\"howto-dm-db\") detailed looking working existing relational data model. data data frames, want read vignette(\"howto-dm-df\") next. like know relational data models order get dm, check vignette(\"howto-dm-theory\"). ’re familiar relational data models, want know work dm, vignette(\"tech-dm-join\"), vignette(\"tech-dm-filter\"), vignette(\"tech-dm-zoom\") good next step.","code":""},{"path":"https://dm.cynkra.com/dev/articles/dm.html","id":"standing-on-the-shoulders-of-giants","dir":"Articles","previous_headings":"","what":"Standing on the shoulders of giants","title":"Getting started with dm","text":"{dm} package follows tidyverse principles: dm objects immutable (data never overwritten place) functions used dm objects pipeable (.e., return new dm table objects) tidy evaluation used (unquoted function arguments supported) {dm} package builds heavily upon {datamodelr} package, upon tidyverse. ’re looking forward good collaboration! {polyply} package similar intent slightly different interface. {data.cube} package quite intent using array-like interface. Articles {rquery} package discuss join controllers join dependency sorting, intent move declaration table relationships code data. {tidygraph} package stores network two related tables nodes edges, compatible {dplyr} workflows. object-oriented programming languages, object-relational mapping similar concept attempts map set related tables class hierarchy.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"copy-models-or-copy-tables","dir":"Articles","previous_headings":"","what":"Copy models or copy tables?","title":"Copy tables to and from a database","text":"Using {dm} can persist entire relational data model single function call. copy_dm_to() move entire model destination RDBMS. may need deploy new model. may want add new tables existing model RDBMS. requirements can handled using compute() copy_to() methods. Calling compute() copy_to() requires write permission RDBMS; otherwise, error returned. Therefore, following examples, instantiate test dm object move local SQLite database full permissions. {dm} {dbplyr} designed treat code used manipulate local SQLite database remote RDBMS similarly. steps already introduced vignette(\"howto-dm-db\") discussed detail Copying relational model section.","code":"library(dm) library(tidyverse) library(dbplyr) #>  #> Attaching package: 'dbplyr' #> The following objects are masked from 'package:dplyr': #>  #>     ident, sql  fin_dm <-   dm_financial() %>%   dm_select_tbl(-trans) %>%   collect()  local_db <- DBI::dbConnect(RSQLite::SQLite()) deployed_dm <- copy_dm_to(local_db, fin_dm, temporary = FALSE)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"copying-tables","dir":"Articles","previous_headings":"","what":"Copying and persisting individual tables","title":"Copy tables to and from a database","text":"part data analysis, may combine tables multiple sources create links existing tables via foreign keys, create new tables holding data summaries. example , already discussed vignette(\"howto-dm-db\"), computes total amount loans account. derived table total_loans lazy table powered {dbplyr} package: results materialized, instead SQL query built executed time data requested. avoid recomputing query every time use total_loans, call compute() right inserting derived table dm_insert_tbl(). compute() forces computation query stores full results table RDBMS. Note differences queries returned sql_render(). my_dm_total$total_loans still lazily evaluated full query constructed chain operations generated still place needs run access . Contrast my_dm_total_computed$total_loans, query realized accessing rows requires simple SELECT * statement. table name, dbplyr_001, automatically generated name argument supplied compute(). default create temporary tables. want results persist across sessions permanent tables, compute() must called argument temporary = FALSE table name name argument. See ?compute details. called whole dm object (without zoom), compute() materializes tables new (temporary persistent) tables executing associated SQL query storing full results. Depending size data, may take considerable time may even unfeasible. may useful occasionally create snapshots data subject change.","code":"my_dm_total <-   deployed_dm %>%   dm_zoom_to(loans) %>%   group_by(account_id) %>%   summarize(total_amount = sum(amount, na.rm = TRUE)) %>%   ungroup() %>%   dm_insert_zoomed(\"total_loans\") my_dm_total$total_loans %>%   sql_render() #> <SQL> SELECT `account_id`, SUM(`amount`) AS `total_amount` #> FROM `loans` #> GROUP BY `account_id` my_dm_total_computed <-   deployed_dm %>%   dm_zoom_to(loans) %>%   group_by(account_id) %>%   summarize(total_amount = sum(amount, na.rm = TRUE)) %>%   ungroup() %>%   compute() %>%   dm_insert_zoomed(\"total_loans\")  my_dm_total_computed$total_loans %>%   sql_render() #> <SQL> SELECT * #> FROM `dbplyr_001` my_dm_total_snapshot <-   my_dm_total %>%   compute()"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Adding local data frames to an RDBMS","title":"Copy tables to and from a database","text":"need add local data frames existing dm object, use copy_to() method. takes arguments copy_dm_to(), except second argument takes data frame rather dm. result derived dm object contains new table. demonstrate use copy_to(), example use {dm} pull consolidated data several tables RDBMS, estimate linear model data, insert residuals back RDBMS link existing tables. done local SQLite database, process work unchanged supported RDBMS. Please note use recursive = TRUE dm_flatten_to_tbl(). method gathers linked information single wide table. follows foreign key relations starting table supplied argument gathers columns related tables, disambiguating column names goes. code, select() statement isolates columns need model. collect() works similarly compute() forcing execution underlying SQL query, returns results local tibble. , local tibble, loans_df, used estimate linear model residuals stored along original associated id new tibble, loans_residuals. id column necessary link new tibble tables dm collected . Adding loans_residuals dm done using copy_to(). call method includes argument temporary = FALSE want table persist beyond current session. pipeline create necessary primary foreign keys integrate table rest relational model. information key creation, see vignette(\"howto-dm-db\") vignette(\"howto-dm-theory\").","code":"loans_df <-   deployed_dm %>%   dm_flatten_to_tbl(loans, .recursive = TRUE) %>%   select(id, amount, duration, A3) %>%   collect() #> Renaming ambiguous columns: %>% #>   dm_rename(loans, date.loans = date) %>% #>   dm_rename(accounts, date.accounts = date) model <- lm(amount ~ duration + A3, data = loans_df)  loans_residuals <- tibble::tibble(   id = loans_df$id,   resid = unname(residuals(model)) )  loans_residuals #> # A tibble: 682 × 2 #>       id   resid #>    <int>   <dbl> #>  1  4959 -31912. #>  2  4961 -27336. #>  3  4962 -30699. #>  4  4967  63621. #>  5  4968 -94811. #>  6  4973  59036. #>  7  4986  41901. #>  8  4988 123392. #>  9  4989 147157. #> 10  4990  33377. #> # … with 672 more rows my_dm_sqlite_resid <-   copy_to(deployed_dm, loans_residuals, temporary = FALSE) %>%   dm_add_pk(loans_residuals, id) %>%   dm_add_fk(loans_residuals, id, loans) #> Warning: `copy_to.dm()` was deprecated in dm 0.2.0. #> ℹ Use `copy_to(dm_get_con(dm), ...)` and `dm()`.  my_dm_sqlite_resid %>%   dm_set_colors(violet = loans_residuals) %>%   dm_draw() my_dm_sqlite_resid %>%   dm_examine_constraints() #> ℹ All constraints satisfied. my_dm_sqlite_resid$loans_residuals #> # Source:   table<loans_residuals_1_2020_08_28_07_13_03_12345> [?? x 2] #> # Database: sqlite 3.40.0 [] #>       id   resid #>    <int>   <dbl> #>  1  4959 -31912. #>  2  4961 -27336. #>  3  4962 -30699. #>  4  4967  63621. #>  5  4968 -94811. #>  6  4973  59036. #>  7  4986  41901. #>  8  4988 123392. #>  9  4989 147157. #> 10  4990  33377. #> # … with more rows"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"copy-model","dir":"Articles","previous_headings":"","what":"Persisting a relational model with copy_dm_to()","title":"Copy tables to and from a database","text":"Persistence, intended make permanent changes, requires write access source RDBMS. code repeat code opened Copying persisting individual tables section beginning tutorial. uses {dm} convenience function dm_financial() create dm object corresponding data model public dataset repository. dm object downloaded locally first, deploying local SQLite database. dm_select_tbl() used exclude transaction table trans due size, collect() method retrieves remaining tables returns local dm object. just simple move local relational model RDBMS. Note call copy_dm_to() argument temporary = FALSE supplied. Without argument, model still copied database, argument default temporary = TRUE data deleted session ends. output can observe src deployed_dm SQLite, fin_dm source indicated local data model. Copying relational model empty database simplest use case copy_dm_to(). want copy model RDBMS already populated, aware copy_dm_to() overwrite pre-existing tables. case need use table_names argument give tables unique names. table_names can named character vector, names matching table names dm object values containing desired names RDBMS, function one-sided formula. example , paste0() used add prefix table names provide uniqueness. Note different table names dup_dm$accounts deployed_dm$accounts. , table name accounts dm object, link different tables database. dup_dm, table backed table dup_accounts RDBMS. dm_deployed$accounts shows us table still backed accounts table copy_dm_to() operation performed preceding example. Managing tables RDBMS outside scope dm. find need remove tables perform operations directly RDBMS, see {DBI} package. done, forget disconnect:","code":"dm_financial() %>%   dm_nrow() #>  accounts     cards   clients     disps districts     loans    orders  #>      4500       892      5369      5369        77       682      6471  #>     tkeys     trans  #>       234   1056320 fin_dm <-   dm_financial() %>%   dm_select_tbl(-trans) %>%   collect()  fin_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (8 total) #> Columns: 47 #> Primary keys: 7 #> Foreign keys: 6 destination_db <- DBI::dbConnect(RSQLite::SQLite())  deployed_dm <-   copy_dm_to(destination_db, fin_dm, temporary = FALSE)  deployed_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (8 total) #> Columns: 47 #> Primary keys: 7 #> Foreign keys: 6 dup_dm <-   copy_dm_to(destination_db, fin_dm, temporary = FALSE, table_names = ~ paste0(\"dup_\", .x))  dup_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (8 total) #> Columns: 47 #> Primary keys: 7 #> Foreign keys: 6 remote_name(dup_dm$accounts) #> <IDENT> `dup_accounts` remote_name(deployed_dm$accounts) #> <IDENT> `accounts` DBI::dbDisconnect(destination_db) DBI::dbDisconnect(local_db)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Copy tables to and from a database","text":"dm makes straightforward deploy complete relational model RDBMS using copy_dm_to() function. tables created relational model analysis development, compute() copy_to() can used persist (using argument temporary = FALSE) sessions copy local tables database dm. collect() method downloads entire dm object fits memory database.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-copy.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Copy tables to and from a database","text":"need finer-grained control modifications relational model, see vignette(\"howto-dm-rows\") introduction row level operations, including updates, insertions, deletions patching. like know relational data models order get dm, check vignette(\"howto-dm-theory\"). ’re familiar relational data models want know work dm, vignette(\"tech-dm-join\"), vignette(\"tech-dm-filter\"), vignette(\"tech-dm-zoom\") good next step.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"building-a-dm-from-a-subset-of-tables","dir":"Articles","previous_headings":"","what":"Building a dm from a subset of tables","title":"Create a dm object from a database","text":"dm can also constructed individual tables views. useful want work subset database’s tables, perhaps different schemas. , use $ notation extract two tables financial database. create dm passing tables arguments. Note tables arguments source, case my_db.","code":"dbListTables(my_db) #> [1] \"accounts\"  \"cards\"     \"clients\"   \"disps\"     \"districts\" \"loans\"     #> [7] \"orders\"    \"tkeys\"     \"trans\"  library(dbplyr) loans <- tbl(my_db, \"loans\") accounts <- tbl(my_db, \"accounts\")  my_manual_dm <- dm(loans, accounts) my_manual_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts` #> Columns: 11 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"define-primary-and-foreign-keys","dir":"Articles","previous_headings":"","what":"Define Primary and Foreign Keys","title":"Create a dm object from a database","text":"Primary keys foreign keys relational database tables linked . primary key column column tuple unique value row within table. foreign key column column tuple containing primary key row another table. Foreign keys act cross references tables. specify relationships gives us relational database. information keys crash course databases, see vignette(\"howto-dm-theory\"). many cases, dm_from_con() already returns dm keys set. , dm allows us define primary foreign keys . , use learn_keys = FALSE obtain dm object tables. model diagram provided test database loosely illustrates intended relationships tables. diagram, can see loans table linked accounts table. , create links 3 steps: Add primary key id accounts table Add primary key id loans table Add foreign key account_id loans table referencing accounts table assign colors tables draw structure dm. Note foreign key created, primary key referenced table need specified, primary key must already defined. , mentioned , primary foreign key constraints database currently imported Postgres, SQL Server databases MariaDB, dm_from_con() used. process key definition needs done manually databases. instantiated dm object, can continue add tables . tables original source dm, use dm() tables sources local environment, dplyr::copy_to() used. copy_to() discussed later article.","code":"library(dm)  fin_dm <- dm_from_con(my_db, learn_keys = FALSE) fin_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (9 total) #> Columns: 57 #> Primary keys: 0 #> Foreign keys: 0 my_dm_keys <-   my_manual_dm %>%   dm_add_pk(accounts, id) %>%   dm_add_pk(loans, id) %>%   dm_add_fk(loans, account_id, accounts) %>%   dm_set_colors(green = loans, orange = accounts)  my_dm_keys %>%   dm_draw() trans <- tbl(my_db, \"trans\")  my_dm_keys %>%   dm(trans) #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts`, `trans` #> Columns: 21 #> Primary keys: 2 #> Foreign keys: 1"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"transient-nature-of-operations","dir":"Articles","previous_headings":"","what":"Transient nature of operations","title":"Create a dm object from a database","text":"Like R objects, dm immutable operations performed transient unless stored new variable. , like {dbplyr}, results never written database unless explicitly requested.","code":"my_dm_keys #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts` #> Columns: 11 #> Primary keys: 2 #> Foreign keys: 1 my_dm_trans <-   my_dm_keys %>%   dm(trans)  my_dm_trans #> ── Table source ─────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts`, `trans` #> Columns: 21 #> Primary keys: 2 #> Foreign keys: 1 my_dm_keys %>%   dm_flatten_to_tbl(loans) #> Renaming ambiguous columns: %>% #>   dm_rename(loans, date.loans = date) %>% #>   dm_rename(accounts, date.accounts = date) #> # Source:   SQL [?? x 10] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>       id account…¹ date.loans amount durat…² payme…³ status distr…⁴ frequ…⁵ #>    <int>     <int> <date>      <dbl>   <int>   <dbl> <chr>    <int> <chr>   #>  1  4959         2 1994-01-05  80952      24    3373 A            1 POPLAT… #>  2  4961        19 1996-04-29  30276      12    2523 B           21 POPLAT… #>  3  4962        25 1997-12-08  30276      12    2523 A           68 POPLAT… #>  4  4967        37 1998-10-14 318480      60    5308 D           20 POPLAT… #>  5  4968        38 1998-04-19 110736      48    2307 C           19 POPLAT… #>  6  4973        67 1996-05-02 165960      24    6915 A           16 POPLAT… #>  7  4986        97 1997-08-10 102876      12    8573 A           74 POPLAT… #>  8  4988       103 1997-12-06 265320      36    7370 D           44 POPLAT… #>  9  4989       105 1998-12-05 352704      48    7348 C           21 POPLAT… #> 10  4990       110 1997-09-08 162576      36    4516 C           36 POPLAT… #> # … with more rows, 1 more variable: date.accounts <date>, and abbreviated #> #   variable names ¹​account_id, ²​duration, ³​payments, ⁴​district_id, #> #   ⁵​frequency my_dm_keys %>%   dm_flatten_to_tbl(loans) %>%   sql_render() #> Renaming ambiguous columns: %>% #>   dm_rename(loans, date.loans = date) %>% #>   dm_rename(accounts, date.accounts = date) #> <SQL> SELECT #>   `loans`.`id` AS `id`, #>   `account_id`, #>   `loans`.`date` AS `date.loans`, #>   `amount`, #>   `duration`, #>   `payments`, #>   `status`, #>   `district_id`, #>   `frequency`, #>   `accounts`.`date` AS `date.accounts` #> FROM `loans` #> LEFT JOIN `accounts` #>   ON (`loans`.`account_id` = `accounts`.`id`)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"performing-operations-on-tables-by-zooming","dir":"Articles","previous_headings":"","what":"Performing operations on tables by “zooming”","title":"Create a dm object from a database","text":"dm collection tables, wish perform operations individual table, set context operations using dm_zoom_to(). See vignette(\"tech-dm-zoom\") detail zooming. dm operations transient unless persistence explicitly requested. make chain manipulations selected table permanent, assign result dm_insert_zoomed() new object, my_dm_total. new dm object, derived my_dm_keys, new lazy table total_loans linked accounts table. Context set table “loans” using dm_zoom_to(loans). can learn zooming tutorial vignette(\"tech-dm-zoom\"). use {dplyr} functions zoomed table generate new summary table. summarize() returns temporary table one row group created preceding group_by() function. columns temporary table constrained columns passed arguments group_by() function column(s) created summarize() function. dm_insert_zoomed(\"total_loans\") adds temporary table created summarize() data model new name, total_loans. grouping variable account_id primary key, new derived table automatically linked accounts table. resulting table total_loans can accessed like table dm object. lazy table powered {dbplyr} package: results materialized; instead, SQL query built executed time data requested. Use compute() zoomed table materialize temporary table avoid recomputing. See vignette(\"howto-dm-copy\") details.","code":"my_dm_total <-   my_dm_keys %>%   dm_zoom_to(loans) %>%   group_by(account_id) %>%   summarize(total_amount = sum(amount, na.rm = TRUE)) %>%   ungroup() %>%   dm_insert_zoomed(\"total_loans\") my_dm_total %>%   dm_set_colors(violet = total_loans) %>%   dm_draw() my_dm_total$total_loans #> # Source:   SQL [?? x 2] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>    account_id total_amount #>         <int>        <dbl> #>  1          2        80952 #>  2         19        30276 #>  3         25        30276 #>  4         37       318480 #>  5         38       110736 #>  6         67       165960 #>  7         97       102876 #>  8        103       265320 #>  9        105       352704 #> 10        110       162576 #> # … with more rows my_dm_total$total_loans %>%   sql_render() #> <SQL> SELECT `account_id`, SUM(`amount`) AS `total_amount` #> FROM `loans` #> GROUP BY `account_id`"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"Downloading data","title":"Create a dm object from a database","text":"becomes necessary move data locally analysis reporting, {dm} method collect() used. Operations dm objects databases limited report first ten results. collect() forces evaluation SQL queries generation complete set results. resulting tables transferred RDBMS stored local tibbles. Use method caution. sure size dataset downloading, can call dm_nrow() dm row count data model’s tables.","code":"my_dm_local <-   my_dm_total %>%   collect()  my_dm_local$total_loans #> # A tibble: 682 × 2 #>    account_id total_amount #>         <int>        <dbl> #>  1          2        80952 #>  2         19        30276 #>  3         25        30276 #>  4         37       318480 #>  5         38       110736 #>  6         67       165960 #>  7         97       102876 #>  8        103       265320 #>  9        105       352704 #> 10        110       162576 #> # … with 672 more rows my_dm_total %>%   dm_nrow() #>       loans    accounts total_loans  #>         682        4500         682"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"persist","dir":"Articles","previous_headings":"","what":"Persisting results","title":"Create a dm object from a database","text":"just simple move local relational model RDBMS using collect() download . method used copy_dm_to() takes arguments database connection dm object. example , local SQLite database used demonstrate , {dm} designed work RDBMS supported {DBI}. output, can observe src deployed_dm SQLite database, my_dm_local source local R environment. Persisting tables covered detail vignette(\"howto-dm-copy\"). done, forget disconnect:","code":"destination_db <- DBI::dbConnect(RSQLite::SQLite())  deployed_dm <- copy_dm_to(destination_db, my_dm_local)  deployed_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts`, `total_loans` #> Columns: 13 #> Primary keys: 2 #> Foreign keys: 2 my_dm_local #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `loans`, `accounts`, `total_loans` #> Columns: 13 #> Primary keys: 2 #> Foreign keys: 2 DBI::dbDisconnect(destination_db) DBI::dbDisconnect(my_db)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Create a dm object from a database","text":"tutorial, demonstrated simple load database dm object begin working . Currently, loading dm RDBMS requires manually set key relations, {dm} provides methods make straightforward. planned future versions dm support automatic key creation RDBMS. next step read vignette(\"howto-dm-copy\"), copying tables RDBMS covered. vignette(\"howto-dm-rows\") discusses manipulation individual rows database.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-db.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Create a dm object from a database","text":"vignette(\"howto-dm-df\") – data local data frames? article covers creating data model local data frames, including building relationships data model, verifying model, leveraging power dplyr operate data model. vignette(\"howto-dm-theory\") – know data frames little relational data models? quick introduction walk key similarities differences, show move individual data frames relational data model.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"creating-a-dm-object-from-data-frames","dir":"Articles","previous_headings":"","what":"Creating a dm object from data frames","title":"Create a dm object from data frames","text":"example data set using available nycflights13 package. five tables working contain information flights departed airports New York destinations United States 2013: flights represents trips taken planes names transport organizations (name) abbreviated codes (carrier) airports indicates ports departure (origin) destination (dest) weather contains meteorological information hour planes describes characteristics aircraft ’ve loaded {nycflights13}, aforementioned tables work environment, ready accessed. data probably available R package. Whatever format , need able load data frames R session. data large, consider using dm connect database instead. See vignette(\"howto-dm-db\") details using dm databases.","code":"library(nycflights13)  airports #> # A tibble: 1,458 × 8 #>    faa   name                            lat    lon   alt    tz dst   tzone #>    <chr> <chr>                         <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 04G   Lansdowne Airport              41.1  -80.6  1044    -5 A     Amer… #>  2 06A   Moton Field Municipal Airport  32.5  -85.7   264    -6 A     Amer… #>  3 06C   Schaumburg Regional            42.0  -88.1   801    -6 A     Amer… #>  4 06N   Randall Airport                41.4  -74.4   523    -5 A     Amer… #>  5 09J   Jekyll Island Airport          31.1  -81.4    11    -5 A     Amer… #>  6 0A9   Elizabethton Municipal Airpo…  36.4  -82.2  1593    -5 A     Amer… #>  7 0G6   Williams County Airport        41.5  -84.5   730    -5 A     Amer… #>  8 0G7   Finger Lakes Regional Airport  42.9  -76.8   492    -5 A     Amer… #>  9 0P2   Shoestring Aviation Airfield   39.8  -76.6  1000    -5 U     Amer… #> 10 0S9   Jefferson County Intl          48.1 -123.    108    -8 A     Amer… #> # … with 1,448 more rows"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"adding-tables","dir":"Articles","previous_headings":"","what":"Adding Tables","title":"Create a dm object from data frames","text":"first step tell dm tables want work connected. can use dm(), passing table names arguments. as_dm() function alternative works already list tables.","code":"library(dm)  flights_dm_no_keys <- dm(airlines, airports, flights, planes, weather) flights_dm_no_keys #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"a-dm-is-a-list","dir":"Articles","previous_headings":"","what":"A dm is a list","title":"Create a dm object from data frames","text":"dm objects behave like lists user- console-friendly print format. fact, using dm nicer list organizing data frames environment easy first step towards using dm data modeling functionality. Subsetting syntax dm object (either subscript name) similar syntax lists, don’t need learn additional syntax work dm objects.","code":"names(flights_dm_no_keys) #> [1] \"airlines\" \"airports\" \"flights\"  \"planes\"   \"weather\" flights_dm_no_keys$airports #> # A tibble: 1,458 × 8 #>    faa   name                            lat    lon   alt    tz dst   tzone #>    <chr> <chr>                         <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 04G   Lansdowne Airport              41.1  -80.6  1044    -5 A     Amer… #>  2 06A   Moton Field Municipal Airport  32.5  -85.7   264    -6 A     Amer… #>  3 06C   Schaumburg Regional            42.0  -88.1   801    -6 A     Amer… #>  4 06N   Randall Airport                41.4  -74.4   523    -5 A     Amer… #>  5 09J   Jekyll Island Airport          31.1  -81.4    11    -5 A     Amer… #>  6 0A9   Elizabethton Municipal Airpo…  36.4  -82.2  1593    -5 A     Amer… #>  7 0G6   Williams County Airport        41.5  -84.5   730    -5 A     Amer… #>  8 0G7   Finger Lakes Regional Airport  42.9  -76.8   492    -5 A     Amer… #>  9 0P2   Shoestring Aviation Airfield   39.8  -76.6  1000    -5 U     Amer… #> 10 0S9   Jefferson County Intl          48.1 -123.    108    -8 A     Amer… #> # … with 1,448 more rows flights_dm_no_keys[c(\"airports\", \"flights\")] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airports`, `flights` #> Columns: 27 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"defining-keys","dir":"Articles","previous_headings":"","what":"Defining Keys","title":"Create a dm object from data frames","text":"Even though now dm object contains data, specified five tables connected. , need define primary keys foreign keys tables. Primary keys foreign keys relational database tables linked . primary key column column tuple unique value row within table. foreign key column column tuple containing primary key row another table. Foreign keys act cross references tables. specify relationships gives us relational database. information keys crash course databases, see vignette(\"howto-dm-theory\").","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"primary-keys","dir":"Articles","previous_headings":"","what":"Primary Keys","title":"Create a dm object from data frames","text":"dm offers dm_enum_pk_candidates() identify viable primary keys table dm object, dm_add_pk() add . Now, can add identified primary keys: Note {dm} functions work named positional argument specification, compound keys can specified using vector argument.","code":"dm_enum_pk_candidates(   dm = flights_dm_no_keys,   table = planes ) #> # A tibble: 9 × 3 #>   columns      candidate why                                                #>   <keys>       <lgl>     <chr>                                              #> 1 tailnum      TRUE      \"\"                                                 #> 2 year         FALSE     \"has duplicate values: 2001 (284), 2000 (244), 20… #> 3 type         FALSE     \"has duplicate values: Fixed wing multi engine (3… #> 4 manufacturer FALSE     \"has duplicate values: BOEING (1630), AIRBUS INDU… #> 5 model        FALSE     \"has duplicate values: 737-7H4 (361), A320-232 (2… #> 6 engines      FALSE     \"has duplicate values: 2 (3288), 1 (27), 4 (4), 3… #> 7 seats        FALSE     \"has duplicate values: 149 (452), 140 (411), 55 (… #> 8 speed        FALSE     \"has 3299 missing values, and duplicate values: 4… #> 9 engine       FALSE     \"has duplicate values: Turbo-fan (2750), Turbo-je… flights_dm_only_pks <-   flights_dm_no_keys %>%   dm_add_pk(table = airlines, columns = carrier) %>%   dm_add_pk(airports, faa) %>%   dm_add_pk(planes, tailnum) %>%   dm_add_pk(weather, c(origin, time_hour)) flights_dm_only_pks #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"foreign-keys","dir":"Articles","previous_headings":"","what":"Foreign Keys","title":"Create a dm object from data frames","text":"define tables related, use dm_add_fk() add foreign keys. Naturally, function deal two tables: table looking reference, table providing reference. Accordingly, calling dm_add_fk(), table argument specifies table needs foreign key link second table, ref_table argument specifies table linked , needs primary key already defined . chosen column successful candidates provided dm_enum_fk_candidates(), use dm_add_fk() function establish foreign key linking tables. second call dm_add_fk() complete process flights airlines tables started . carrier column airlines table added foreign key flights. created required primary foreign keys link tables together, now relational data model can work .","code":"dm_enum_fk_candidates(   dm = flights_dm_only_pks,   table = flights,   ref_table = airlines ) #> # A tibble: 19 × 3 #>    columns        candidate why                                             #>    <keys>         <lgl>     <chr>                                           #>  1 carrier        TRUE      \"\"                                              #>  2 year           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  3 month          FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  4 day            FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  5 dep_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  6 sched_dep_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  7 dep_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  8 arr_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  9 sched_arr_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 10 arr_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 11 flight         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 12 tailnum        FALSE     \"values of `flights$tailnum` not in `airlines$… #> 13 origin         FALSE     \"values of `flights$origin` not in `airlines$c… #> 14 dest           FALSE     \"values of `flights$dest` not in `airlines$car… #> 15 air_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 16 distance       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 17 hour           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 18 minute         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 19 time_hour      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… flights_dm_all_keys <-   flights_dm_only_pks %>%   dm_add_fk(table = flights, columns = tailnum, ref_table = planes) %>%   dm_add_fk(flights, carrier, airlines) %>%   dm_add_fk(flights, origin, airports) %>%   dm_add_fk(flights, c(origin, time_hour), weather) flights_dm_all_keys #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Create a dm object from data frames","text":"Visualizing data model quick easy way verify successfully created model aiming . can use dm_draw() stage process generate visual representation tables links :","code":"flights_dm_no_keys %>%   dm_draw(rankdir = \"TB\", view_type = \"all\") flights_dm_no_keys %>%   dm_add_pk(airlines, carrier) %>%   dm_draw() flights_dm_only_pks %>%   dm_add_fk(flights, tailnum, planes) %>%   dm_draw() flights_dm_all_keys %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"integrity-checks","dir":"Articles","previous_headings":"","what":"Integrity Checks","title":"Create a dm object from data frames","text":"well checking data model visually, dm can examine constraints created addition keys verify sensible. results presented human-readable form, available tibble programmatic inspection.","code":"flights_dm_no_keys %>%   dm_examine_constraints() #> ℹ No constraints defined. flights_dm_only_pks %>%   dm_examine_constraints() #> ℹ All constraints satisfied. flights_dm_all_keys %>%   dm_examine_constraints() #> ! Unsatisfied constraints: #> • Table `flights`: foreign key `tailnum` into table `planes`: values of `flights$tailnum` not in `planes$tailnum`: N725MQ (575), N722MQ (513), N723MQ (507), N713MQ (483), N735MQ (396), … #> • Table `flights`: foreign key `origin`, `time_hour` into table `weather`: values of `flights$origin`, `flights$time_hour` not in `weather$origin`, `weather$time_hour`: EWR, 2013-10-23 06:00:00 (34), EWR, 2013-08-19 17:00:00 (26), EWR, 2013-12-31 06:00:00 (26), EWR, 2013-12-31 07:00:00 (26), JFK, 2013-08-19 17:00:00 (26), …"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"programming","dir":"Articles","previous_headings":"","what":"Programming","title":"Create a dm object from data frames","text":"Helper functions available access details keys check results. data frame primary keys retrieved dm_get_all_pks(): Similarly, data frame foreign keys retrieved dm_get_all_fks(): can use tibble::as_tibble() result dm_examine_constraints() programmatically inspect constraints satisfied:","code":"flights_dm_only_pks %>%   dm_get_all_pks() #> # A tibble: 4 × 3 #>   table    pk_col            autoincrement #>   <chr>    <keys>            <lgl>         #> 1 airlines carrier           FALSE         #> 2 airports faa               FALSE         #> 3 planes   tailnum           FALSE         #> 4 weather  origin, time_hour FALSE flights_dm_all_keys %>%   dm_get_all_fks() #> # A tibble: 4 × 5 #>   child_table child_fk_cols     parent_table parent_key_cols   on_delete #>   <chr>       <keys>            <chr>        <keys>            <chr>     #> 1 flights     carrier           airlines     carrier           no_action #> 2 flights     origin            airports     faa               no_action #> 3 flights     tailnum           planes       tailnum           no_action #> 4 flights     origin, time_hour weather      origin, time_hour no_action flights_dm_all_keys %>%   dm_examine_constraints() %>%   tibble::as_tibble() #> # A tibble: 8 × 6 #>   table    kind  columns           ref_table is_key problem                 #>   <chr>    <chr> <keys>            <chr>     <lgl>  <chr>                   #> 1 flights  FK    tailnum           planes    FALSE  \"values of `flights$ta… #> 2 flights  FK    origin, time_hour weather   FALSE  \"values of `flights$or… #> 3 airlines PK    carrier           NA        TRUE   \"\"                      #> 4 airports PK    faa               NA        TRUE   \"\"                      #> 5 planes   PK    tailnum           NA        TRUE   \"\"                      #> 6 weather  PK    origin, time_hour NA        TRUE   \"\"                      #> 7 flights  FK    carrier           airlines  TRUE   \"\"                      #> 8 flights  FK    origin            airports  TRUE   \"\""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Create a dm object from data frames","text":"tutorial, demonstrated simple create relational data models local data frames using {dm}, including setting primary foreign keys visualizing resulting relational model.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-df.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Create a dm object from data frames","text":"vignette(\"howto-dm-db\") – article covers accessing working RDBMSs within R session, including manipulating data, filling missing relationships tables, getting data RDBMS model, deploying data model RDBMS. vignette(\"howto-dm-theory\") – know data frames little relational data models? quick introduction walk key similarities differences, show move individual data frames relational data model.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"the-dm_rows_-process","dir":"Articles","previous_headings":"","what":"The dm_rows_* process","title":"Insert, update, or remove rows in a database","text":"six methods take arguments using follows process: Create temporary changeset dm object defines intended changes RDBMS desired, simulate changes in_place = FALSE double-check Apply changes in_place = TRUE. start, dm object created containing tables rows want change. changeset dm copied source dm want modify. dm RDBMS destination dm, call appropriate method, dm_rows_insert(), make planned changes, along argument in_place = FALSE can confirm achieve changes want. verification can done visually, looking row counts like, using {dm}’s constraint checking method, dm_examine_constraints(). biggest danger damaging key relations data spread across multiple tables deleting duplicating rows keys. dm_examine_constraints() catch errors primary keys duplicated foreign keys matching primary key (unless foreign key value NA). changes confirmed, execute method , time argument in_place = TRUE make changes permanent. Note in_place = FALSE default: must opt actually change data database. method requirements order maintain database consistency. involve constraints primary key values uniquely identify rows. ensure integrity relations process, methods automatically determine correct processing order tables involved. operations create records, parent tables (hold primary keys) processed child tables (hold foreign keys). dm_rows_delete(), child tables processed parent tables. Note user still responsible setting transactions ensure integrity operations across multiple tables. details see vignette(\"howto-dm-theory\") vignette(\"howto-dm-db\").","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Insert, update, or remove rows in a database","text":"demonstrate use table modifying methods, create simple dm object two tables linked foreign key. Note child table foreign key missing (NA). {dm} doesn’t check key values create dm, add check:1 copy demo_dm SQLite database. Note: default method used, copy_dm_to(), create temporary tables automatically deleted session ends. demo_sql destination dm examples, argument temporary = FALSE used make distinction apparent. {dm}’s table modification methods can piped together create repeatable sequence operations returns dm incorporating changes required. common use case {dm} – manually building sequence operations using temporary results complete correct, committing result.","code":"library(tidyverse) library(dm) parent <- tibble(value = c(\"A\", \"B\", \"C\"), pk = 1:3) parent #> # A tibble: 3 × 2 #>   value    pk #>   <chr> <int> #> 1 A         1 #> 2 B         2 #> 3 C         3 child <- tibble(value = c(\"a\", \"b\", \"c\"), pk = 1:3, fk = c(1, 1, NA)) child #> # A tibble: 3 × 3 #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     1 #> 3 c         3    NA demo_dm <-   dm(parent = parent, child = child) %>%   dm_add_pk(parent, pk) %>%   dm_add_pk(child, pk) %>%   dm_add_fk(child, fk, parent)  demo_dm %>%   dm_draw(view_type = \"all\") dm_examine_constraints(demo_dm) #> ℹ All constraints satisfied. library(DBI) sqlite_db <- DBI::dbConnect(RSQLite::SQLite()) demo_sql <- copy_dm_to(sqlite_db, demo_dm, temporary = FALSE) demo_sql #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `parent`, `child` #> Columns: 5 #> Primary keys: 2 #> Foreign keys: 1"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"insert","dir":"Articles","previous_headings":"","what":"dm_rows_insert()","title":"Insert, update, or remove rows in a database","text":"demonstrate dm_rows_insert(), create dm tables containing rows insert copy sqlite_db, source demo_sql. dm_rows_...() methods, source destination dm objects must RDBMS. get error message case. code adds parent child table entries letter “D”. First, changeset dm created temporarily copied database: changeset dm used argument dm_rows_insert(). gives us warning changes persist (.e., temporary). Inspecting child table resulting dm_insert_out demo_sql, can see ’s exactly happened. {dm} returned us dm object inserted rows place, underlying database changed. repeat operation, time argument in_place = TRUE changes now persist demo_sql.","code":"new_parent <- tibble(value = \"D\", pk = 4) new_parent #> # A tibble: 1 × 2 #>   value    pk #>   <chr> <dbl> #> 1 D         4 new_child <- tibble(value = \"d\", pk = 4, fk = 4) new_child #> # A tibble: 1 × 3 #>   value    pk    fk #>   <chr> <dbl> <dbl> #> 1 d         4     4 dm_insert_in <-   dm(parent = new_parent, child = new_child) %>%   copy_dm_to(sqlite_db, ., temporary = TRUE) dm_insert_out <-   demo_sql %>%   dm_rows_insert(dm_insert_in) #> Result is returned as a dm object with lazy tables. Use `in_place = FALSE` #> to mute this message, or `in_place = TRUE` to write to the underlying #> tables. dm_insert_out$child #> # Source:   SQL [4 x 3] #> # Database: sqlite 3.40.0 [] #>   value    pk    fk #>   <chr> <dbl> <dbl> #> 1 a         1     1 #> 2 b         2     1 #> 3 c         3    NA #> 4 d         4     4 demo_sql$child #> # Source:   table<`child`> [3 x 3] #> # Database: sqlite 3.40.0 [] #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     1 #> 3 c         3    NA dm_insert_out <-   demo_sql %>%   dm_rows_insert(dm_insert_in, in_place = TRUE)  demo_sql$child #> # Source:   table<`child`> [4 x 3] #> # Database: sqlite 3.40.0 [] #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     1 #> 3 c         3    NA #> 4 d         4     4"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"update","dir":"Articles","previous_headings":"","what":"dm_rows_update()","title":"Insert, update, or remove rows in a database","text":"dm_rows_update() works dm_rows_insert(). create dm object copy source destination. change foreign key row child containing “b” point correct row parent. persist changes.","code":"updated_child <- tibble(value = \"b\", pk = 2, fk = 2) updated_child #> # A tibble: 1 × 3 #>   value    pk    fk #>   <chr> <dbl> <dbl> #> 1 b         2     2 dm_update_in <-   dm(child = updated_child) %>%   copy_dm_to(sqlite_db, ., temporary = TRUE)  dm_update_out <-   demo_sql %>%   dm_rows_update(dm_update_in, in_place = TRUE)  demo_sql$child #> # Source:   table<`child`> [4 x 3] #> # Database: sqlite 3.40.0 [] #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     2 #> 3 c         3    NA #> 4 d         4     4"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"delete","dir":"Articles","previous_headings":"","what":"dm_rows_delete()","title":"Insert, update, or remove rows in a database","text":"dm_rows_delete() currently implemented work RDBMS, shift demonstrations back local R environment. ’ve made changes demo_sql, use collect() copy current tables SQLite. Note persistence concern local dm objects. Every operation returns new dm object containing changes made.","code":"local_dm <- collect(demo_sql)  local_dm$parent #> # A tibble: 4 × 2 #>   value    pk #>   <chr> <int> #> 1 A         1 #> 2 B         2 #> 3 C         3 #> 4 D         4 local_dm$child #> # A tibble: 4 × 3 #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     2 #> 3 c         3    NA #> 4 d         4     4 dm_deleted <-   dm(parent = new_parent, child = new_child) %>%   dm_rows_delete(local_dm, .) #> Result is returned as a dm object with lazy tables. Use `in_place = FALSE` to mute this message, or `in_place = TRUE` to write to the underlying tables. #> Ignoring extra `y` columns: value, fk #> Ignoring extra `y` columns: value  dm_deleted$child #> # A tibble: 3 × 3 #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     2 #> 3 c         3    NA"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"patch","dir":"Articles","previous_headings":"","what":"dm_rows_patch()","title":"Insert, update, or remove rows in a database","text":"dm_rows_patch() updates missing values existing records. use fix missing foreign key child table.","code":"patched_child <- tibble(value = \"c\", pk = 3, fk = 3) patched_child #> # A tibble: 1 × 3 #>   value    pk    fk #>   <chr> <dbl> <dbl> #> 1 c         3     3 dm_patched <-   dm(child = patched_child) %>%   dm_rows_patch(dm_deleted, .) #> Result is returned as a dm object with lazy tables. Use `in_place = FALSE` #> to mute this message, or `in_place = TRUE` to write to the underlying #> tables.  dm_patched$child #> # A tibble: 3 × 3 #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     2 #> 3 c         3     3"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"upsert","dir":"Articles","previous_headings":"","what":"dm_rows_upsert()","title":"Insert, update, or remove rows in a database","text":"dm_rows_upsert() updates rows supplied values exist inserts supplied values new rows don’t. example add letter “D” back dm, update foreign key “b”. done, forget disconnect:","code":"upserted_parent <- tibble(value = \"D\", pk = 4) upserted_parent #> # A tibble: 1 × 2 #>   value    pk #>   <chr> <dbl> #> 1 D         4 upserted_child <- tibble(value = c(\"b\", \"d\"), pk = c(2, 4), fk = c(3, 4)) upserted_child #> # A tibble: 2 × 3 #>   value    pk    fk #>   <chr> <dbl> <dbl> #> 1 b         2     3 #> 2 d         4     4 dm_upserted <-   dm(parent = upserted_parent, child = upserted_child) %>%   dm_rows_upsert(dm_patched, .) #> Result is returned as a dm object with lazy tables. Use `in_place = FALSE` #> to mute this message, or `in_place = TRUE` to write to the underlying #> tables.  dm_upserted$parent #> # A tibble: 4 × 2 #>   value    pk #>   <chr> <int> #> 1 A         1 #> 2 B         2 #> 3 C         3 #> 4 D         4 dm_upserted$child #> # A tibble: 4 × 3 #>   value    pk    fk #>   <chr> <int> <dbl> #> 1 a         1     1 #> 2 b         2     3 #> 3 c         3     3 #> 4 d         4     4 DBI::dbDisconnect(sqlite_db)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Insert, update, or remove rows in a database","text":"dm_rows_...() methods give row-level granularity modifications need make relational model. Using common in_place argument, can construct verify modifications committing . limitations, mentioned tutorial, addressed future updates {dm}.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-rows.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Insert, update, or remove rows in a database","text":"tutorial answered questions, opened others, resources might assistance. data RDBMS? vignette(\"howto-dm-db\") offers detailed look working existing relational data model. data data frames, may want read vignette(\"howto-dm-df\") next. like know relational data models order get dm, check vignette(\"howto-dm-theory\"). ’re familiar relational data models want know work dm, vignette(\"tech-dm-join\"), vignette(\"tech-dm-filter\"), vignette(\"tech-dm-zoom\") good next step.","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"data-frames-and-tables","dir":"Articles","previous_headings":"","what":"1. Data Frames and Tables","title":"Introduction to relational data models","text":"data frame fundamental data structure R. Columns represent variables, rows represent observations. technical terms, data frame list variables identical length unique row names. imagine visually, result typical table structure. working data spreadsheets convenient users popular {dplyr} package data wrangling mainly rely data frames. downside data frames flat file systems like spreadsheets can result bloated tables hold many repetitive values. worst case, data frame can contain multiple columns single value different row. calls better data organization utilizing resemblance data frames database tables, also consist columns rows. elements just named differently: Additionally, number rows columns data frame , respectively, analogous cardinality degree table. Relational databases, unlike data frames, keep data one large table instead split multiple smaller tables. separation sub-tables several advantages: information stored , avoiding redundancy conserving memory information needs updated one place, improving consistency avoiding errors may result updating (forgetting update) value multiple locations information organized topic segmented smaller tables easier handle reasons separation data helps data quality, explain popularity relational databases production-level data management. downside approach harder merge together information different data sources identify entities refer object, common task modeling plotting data. Thus, take full advantage relational database approach, associated data model needed overcome challenges arise working multiple tables. Let’s illustrate challenge data nycflights13 dataset contains detailed information 336,776 flights departed New York City 2013. information stored five tables. Details like full name airport available immediately; can obtained joining merging constituent tables, can result long inflated pipe chains full left_join(), anti_join() forms data merging. classical {dplyr} notation, need three left_join() calls merge flights table gradually airlines, planes, airports, weather tables create one wide data frame. {dm} offers elegant shorter way combine tables augmenting {dplyr}/{dbplyr} workflows. possible best worlds: manage data {dm} linked tables, , necessary, flatten multiple tables single data frame analysis {dplyr}. next step create data model based multiple tables:","code":"library(tidyverse) library(dm) library(nycflights13)  nycflights13_df <-   flights %>%   left_join(airlines, by = \"carrier\") %>%   left_join(planes, by = \"tailnum\") %>%   left_join(airports, by = c(\"origin\" = \"faa\")) %>%   left_join(weather, by = c(\"origin\", \"time_hour\"))  nycflights13_df #> # A tibble: 336,776 × 48 #>    year.x month.x day.x dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>     <int>   <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> #>  1   2013       1     1      517        515       2     830     819      11 #>  2   2013       1     1      533        529       4     850     830      20 #>  3   2013       1     1      542        540       2     923     850      33 #>  4   2013       1     1      544        545      -1    1004    1022     -18 #>  5   2013       1     1      554        600      -6     812     837     -25 #>  6   2013       1     1      554        558      -4     740     728      12 #>  7   2013       1     1      555        600      -5     913     854      19 #>  8   2013       1     1      557        600      -3     709     723     -14 #>  9   2013       1     1      557        600      -3     838     846      -8 #> 10   2013       1     1      558        600      -2     753     745       8 #> # … with 336,766 more rows, 39 more variables: carrier <chr>, #> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour.x <dbl>, minute <dbl>, time_hour <dttm>, #> #   name.x <chr>, year.y <int>, type <chr>, manufacturer <chr>, #> #   model <chr>, engines <int>, seats <int>, speed <int>, engine <chr>, #> #   name.y <chr>, lat <dbl>, lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, #> #   tzone <chr>, year <int>, month.y <int>, day.y <int>, hour.y <int>, …"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"model","dir":"Articles","previous_headings":"","what":"2. Data Model","title":"Introduction to relational data models","text":"data model shows structure multiple tables linked together. nycflights13 relations can transferred following graphical representation: flights table linked four tables: airlines, planes, weather, airports. using directed arrows, visualization shows explicitly connection different columns (called attributes relational data sphere). example: column carrier flights can joined column carrier airlines table. links tables established primary keys foreign keys. aside, can also now see avoiding redundant data building data models multiple tables can save memory compared storing data single data frame: Reading: {dm} methods visualizing data models.","code":"dm <- dm_nycflights13(cycle = TRUE)  dm %>%   dm_draw() object.size(dm) #> 476256 bytes  object.size(nycflights13_df) #> 108020824 bytes"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"pk","dir":"Articles","previous_headings":"","what":"3. Primary Keys","title":"Introduction to relational data models","text":"relational data model, table one several columns uniquely identify row. columns define primary key (abbreviated “pk”). key consists single column, called simple key. key consisting one column called compound key. Example: airlines table nycflights13 column carrier primary key, simple key. weather table combination origin time_hour primary key, compound key. can get primary keys dm calling dm_get_all_pks(): dm_enum_pk_candidates() checks suitability column serve simple primary key: Reading: {dm} package offers several functions dealing primary keys.","code":"dm %>%   dm_get_all_pks() #> # A tibble: 4 × 3 #>   table    pk_col            autoincrement #>   <chr>    <keys>            <lgl>         #> 1 airlines carrier           FALSE         #> 2 airports faa               FALSE         #> 3 planes   tailnum           FALSE         #> 4 weather  origin, time_hour FALSE dm %>%   dm_enum_pk_candidates(airports) #> # A tibble: 8 × 3 #>   columns candidate why                                                     #>   <keys>  <lgl>     <chr>                                                   #> 1 faa     TRUE      \"\"                                                      #> 2 name    TRUE      \"\"                                                      #> 3 lat     TRUE      \"\"                                                      #> 4 lon     TRUE      \"\"                                                      #> 5 alt     FALSE     \"has duplicate values: 30 (4), 13 (3), 9 (2), 19 (2), … #> 6 tz      FALSE     \"has duplicate values: -5 (48), -6 (21), -8 (12), -7 (… #> 7 dst     FALSE     \"has duplicate values: A (84), N (2)\"                   #> 8 tzone   FALSE     \"has duplicate values: America/New_York (48), America/…"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"fk","dir":"Articles","previous_headings":"","what":"4. Foreign Keys","title":"Introduction to relational data models","text":"counterpart primary key one table foreign key another table. order join two tables, primary key first table needs referenced second table. column columns called foreign key (abbreviated “fk”). example, want link airlines table flights table, primary key airlines needs match foreign key flights. condition satisfied column carrier present primary key airlines table well foreign key flights table. case compound keys, origin time_hour columns (form primary key weather table) also present flights table. can find foreign key candidates simple keys function dm_enum_fk_candidates(); marked TRUE candidate column. Additionally, can also extract summary foreign key relations present dm object using dm_get_all_fks(): Reading: {dm} functions working foreign keys.","code":"dm %>%   dm_enum_fk_candidates(flights, airlines) #> # A tibble: 19 × 3 #>    columns        candidate why                                             #>    <keys>         <lgl>     <chr>                                           #>  1 carrier        TRUE      \"\"                                              #>  2 year           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  3 month          FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  4 day            FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  5 dep_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  6 sched_dep_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  7 dep_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  8 arr_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #>  9 sched_arr_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 10 arr_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 11 flight         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 12 tailnum        FALSE     \"values of `flights$tailnum` not in `airlines$… #> 13 origin         FALSE     \"values of `flights$origin` not in `airlines$c… #> 14 dest           FALSE     \"values of `flights$dest` not in `airlines$car… #> 15 air_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 16 distance       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 17 hour           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 18 minute         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… #> 19 time_hour      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with… dm %>%   dm_get_all_fks() #> # A tibble: 5 × 5 #>   child_table child_fk_cols     parent_table parent_key_cols   on_delete #>   <chr>       <keys>            <chr>        <keys>            <chr>     #> 1 flights     carrier           airlines     carrier           no_action #> 2 flights     origin            airports     faa               no_action #> 3 flights     dest              airports     faa               no_action #> 4 flights     tailnum           planes       tailnum           no_action #> 5 flights     origin, time_hour weather      origin, time_hour no_action"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"referential-integrity","dir":"Articles","previous_headings":"","what":"5. Referential Integrity","title":"Introduction to relational data models","text":"data set referential integrity relations tables valid. , every foreign key holds primary key present parent table. foreign key contains reference corresponding row parent table available, row orphan row database longer referential integrity. {dm} allows checking referential integrity dm_examine_constraints() function. following conditions checked: primary key values must unique missing (.e., NAs allowed). foreign key value must corresponding primary key value. example data model, substantial share flights, detailed information corresponding airplane available: Establishing referential integrity important providing clean data analysis downstream users. See vignette(\"howto-dm-rows\") information adding, deleting, updating individual rows, vignette(\"tech-dm-zoom\") operations data data model.","code":"dm %>%   dm_examine_constraints() #> ! Unsatisfied constraints: #> • Table `flights`: foreign key `dest` into table `airports`: values of `flights$dest` not in `airports$faa`: SJU (30), BQN (6), STT (4), PSE (2) #> • Table `flights`: foreign key `tailnum` into table `planes`: values of `flights$tailnum` not in `planes$tailnum`: N725MQ (6), N537MQ (5), N722MQ (5), N730MQ (5), N736MQ (5), …"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"normalization","dir":"Articles","previous_headings":"","what":"6. Normalization","title":"Introduction to relational data models","text":"Normalization technical term describes central design principle relational data model: splitting data multiple tables. normalized data schema consists several relations (tables) linked attributes (columns). relations can joined together means primary foreign keys. main goal normalization keep data organization clean simple possible avoiding redundant data entries. example, want change name one airport nycflights13 dataset, need update single data value. principle sometimes called single point truth. Another way demonstrate normalization splitting table two parts. Let’s look planes table, consists 3322 individual tail numbers corresponding information specific airplane, like year manufactured average cruising speed. function decompose_table() extracts two new tables creates new key model_id, links tables. results parent_table child_table differ massively number rows: child_table contains 3322 unique tailnum rows therefore consists 3322 rows, just like original planes table, parent_table shrunk just 147 rows, enough store relevant combinations avoid storing redundant information. Reading: See Simple English Wikipedia article database normalization details.","code":"#  Update in one single location... airlines[airlines$carrier == \"UA\", \"name\"] <- \"United broke my guitar\"  airlines %>%   filter(carrier == \"UA\") #> # A tibble: 1 × 2 #>   carrier name                   #>   <chr>   <chr>                  #> 1 UA      United broke my guitar # ...propagates to all related records flights %>%   left_join(airlines) %>%   select(flight, name) #> Joining with `by = join_by(carrier)` #> # A tibble: 336,776 × 2 #>    flight name                     #>     <int> <chr>                    #>  1   1545 United broke my guitar   #>  2   1714 United broke my guitar   #>  3   1141 American Airlines Inc.   #>  4    725 JetBlue Airways          #>  5    461 Delta Air Lines Inc.     #>  6   1696 United broke my guitar   #>  7    507 JetBlue Airways          #>  8   5708 ExpressJet Airlines Inc. #>  9     79 JetBlue Airways          #> 10    301 American Airlines Inc.   #> # … with 336,766 more rows planes %>%   decompose_table(model_id, model, manufacturer, type, engines, seats, speed) #> $child_table #> # A tibble: 3,322 × 4 #>    tailnum  year engine    model_id #>    <chr>   <int> <chr>        <int> #>  1 N10156   2004 Turbo-fan      120 #>  2 N102UW   1998 Turbo-fan       93 #>  3 N103US   1999 Turbo-fan       93 #>  4 N104UW   1999 Turbo-fan       93 #>  5 N10575   2002 Turbo-fan      119 #>  6 N105UW   1999 Turbo-fan       93 #>  7 N107US   1999 Turbo-fan       93 #>  8 N108UW   1999 Turbo-fan       93 #>  9 N109UW   1999 Turbo-fan       93 #> 10 N110UW   1999 Turbo-fan       93 #> # … with 3,312 more rows #>  #> $parent_table #> # A tibble: 147 × 7 #>    model_id model       manufacturer     type           engines seats speed #>       <int> <chr>       <chr>            <chr>            <int> <int> <int> #>  1      120 EMB-145XR   EMBRAER          Fixed wing mu…       2    55    NA #>  2       93 A320-214    AIRBUS INDUSTRIE Fixed wing mu…       2   182    NA #>  3      119 EMB-145LR   EMBRAER          Fixed wing mu…       2    55    NA #>  4       39 737-824     BOEING           Fixed wing mu…       2   149    NA #>  5       68 767-332     BOEING           Fixed wing mu…       2   330    NA #>  6       52 757-224     BOEING           Fixed wing mu…       2   178    NA #>  7       94 A320-214    AIRBUS           Fixed wing mu…       2   182    NA #>  8      112 CL-600-2D24 BOMBARDIER INC   Fixed wing mu…       2    95    NA #>  9       30 737-724     BOEING           Fixed wing mu…       2   149    NA #> 10       27 737-524     BOEING           Fixed wing mu…       2   149    NA #> # … with 137 more rows"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"relational-databases","dir":"Articles","previous_headings":"","what":"7. Relational Databases","title":"Introduction to relational data models","text":"{dm} built upon relational data models database . Databases systems data management many constructed relational databases (e.g., SQLite, MySQL, MSSQL, Postgres, etc.). can guess names databases, SQL, short Structured Querying Language, plays important role: invented purpose querying relational databases. production, data stored relational database {dm} used work data. Therefore, {dm} can copy data databases, works transparently -memory data relational database systems. example, let’s create local SQLite database copy dm object : opposite direction, dm can also populated data database. Unfortunately, keys currently can learned Microsoft SQL Server Postgres, SQLite. Therefore, dm contains tables keys: Remember terminate database connection:","code":"con_sqlite <- DBI::dbConnect(RSQLite::SQLite()) con_sqlite #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE DBI::dbListTables(con_sqlite) #> character(0)  copy_dm_to(con_sqlite, dm) DBI::dbListTables(con_sqlite) #> [1] \"airlines_1_2020_08_28_07_13_03_12345\" #> [2] \"airports_1_2020_08_28_07_13_03_12345\" #> [3] \"flights_1_2020_08_28_07_13_03_12345\"  #> [4] \"planes_1_2020_08_28_07_13_03_12345\"   #> [5] \"weather_1_2020_08_28_07_13_03_12345\" dm_from_con(con_sqlite) #> Keys could not be queried: ℹ In index: 1. #> Caused by error in `.f()`: #> ! Failed to collect lazy table. #> Caused by error: #> ! no such table: information_schema.tables. Use `learn_keys = FALSE` to mute this message. #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines_1_2020_08_28_07_13_03_12345`, `airports_1_2020_08_28_07_13_03_12345`, `flights_1_2020_08_28_07_13_03_12345`, `planes_1_2020_08_28_07_13_03_12345`, `weather_1_2020_08_28_07_13_03_12345` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0 DBI::dbDisconnect(con_sqlite)"},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to relational data models","text":"article, learned fundamental concepts data structures associated relational database management system (RDBMS).","code":""},{"path":"https://dm.cynkra.com/dev/articles/howto-dm-theory.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Introduction to relational data models","text":"vignette(\"howto-dm-db\") – article covers accessing working RDBMSs within R session, including manipulating data, filling missing relationships tables, getting data RDBMS model, deploying data model RDBMS. vignette(\"howto-dm-df\") – data local data frames? article covers creating data model local data frames, including building relationships data model, verifying model, leveraging power dplyr operate data model.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-cdm.html","id":"replace-cdm-with-dm","dir":"Articles","previous_headings":"Changes required when updating from version 0.0.5 to 0.0.6","what":"Replace cdm with dm","title":"Migration guide: 'cdm' -> 'dm'","text":"update prevalent prefix cdm discarded favor dm. old prefix still job, warning message issued time function beginning cdm used, informing function soft-deprecated suggesting use newer version. script based older {dm} version, still work newer version, albeit complaining time outdated function used. can repaired : either going script step step, testing output line code use new function names provided generated warnings update function calls. just replacing occurrences cdm dm script. can e.g. done RStudio using “Find” terminal using sed -e 's/cdm/dm/g' path--file Windows sed -'' -e 's/cdm/dm/g' path--file Mac. script errors step, need check exactly error happens manually repair damage.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-cdm.html","id":"be-careful-with-methods-for-dm-tbl","dir":"Articles","previous_headings":"Changes required when updating from version 0.0.5 to 0.0.6","what":"Be careful with methods for dm: tbl, [[, $","title":"Migration guide: 'cdm' -> 'dm'","text":"Furthermore, need pay attention used one tbl.dm(), [[.dm(), $.dm(). update implementation methods changed well, don’t get convenient warning messages. change , update, mentioned methods return table “filtering” just contain rows values relate via foreign key relations tables filtered earlier. update just table returned. want retain former behavior, need replace methods function dm_apply_filters_to_tbl(), made available update. methods course avoided general, filters set anyway result change update. short example different cases: Formerly access “filtered” tables using following syntax: update result achieved type function call:","code":"library(dm) flights_dm <- dm_nycflights13() tbl(flights_dm, \"airports\") #> Warning: `tbl.dm()` was deprecated in dm 0.2.0. #> ℹ Use `dm[[table_name]]` instead to access a specific table. #> # A tibble: 86 × 8 #>    faa   name                            lat    lon   alt    tz dst   tzone #>    <chr> <chr>                         <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                    42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta I…  33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl          30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                   41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                 36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Loga…  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl           42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                       34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows flights_dm$planes #> # A tibble: 945 × 9 #>    tailnum  year type              manuf…¹ model engines seats speed engine #>    <chr>   <int> <chr>             <chr>   <chr>   <int> <int> <int> <chr>  #>  1 N10156   2004 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #>  2 N104UW   1999 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #>  3 N10575   2002 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #>  4 N105UW   1999 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #>  5 N110UW   1999 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #>  6 N11106   2002 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #>  7 N11107   2002 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #>  8 N11109   2002 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #>  9 N11121   2003 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #> 10 N11137   2003 Fixed wing multi… EMBRAER EMB-…       2    55    NA Turbo… #> # … with 935 more rows, and abbreviated variable name ¹​manufacturer flights_dm[[\"weather\"]] #> # A tibble: 144 × 15 #>    origin  year month   day  hour  temp  dewp humid wind_…¹ wind_…² wind_…³ #>    <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl> #>  1 EWR     2013     1    10     0  41    32    70.1     230    8.06    NA   #>  2 EWR     2013     1    10     1  39.0  30.0  69.9     210    9.21    NA   #>  3 EWR     2013     1    10     2  39.0  28.9  66.8     230    6.90    NA   #>  4 EWR     2013     1    10     3  39.9  27.0  59.5     270    5.75    NA   #>  5 EWR     2013     1    10     4  41    26.1  55.0     320    6.90    NA   #>  6 EWR     2013     1    10     5  41    26.1  55.0     300   12.7     20.7 #>  7 EWR     2013     1    10     6  39.9  25.0  54.8     280    6.90    17.3 #>  8 EWR     2013     1    10     7  41    25.0  52.6     330    6.90    NA   #>  9 EWR     2013     1    10     8  43.0  25.0  48.7     330    8.06    NA   #> 10 EWR     2013     1    10     9  45.0  23    41.6     320   17.3     26.5 #> # … with 134 more rows, 4 more variables: precip <dbl>, pressure <dbl>, #> #   visib <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​wind_dir, ²​wind_speed, ³​wind_gust dm_apply_filters_to_tbl(flights_dm, airlines) #> Warning: `dm_apply_filters_to_tbl()` was deprecated in dm 1.0.0. #> ℹ Access tables directly after `dm_filter()`. #> # A tibble: 15 × 2 #>    carrier name                        #>    <chr>   <chr>                       #>  1 9E      Endeavor Air Inc.           #>  2 AA      American Airlines Inc.      #>  3 AS      Alaska Airlines Inc.        #>  4 B6      JetBlue Airways             #>  5 DL      Delta Air Lines Inc.        #>  6 EV      ExpressJet Airlines Inc.    #>  7 F9      Frontier Airlines Inc.      #>  8 FL      AirTran Airways Corporation #>  9 HA      Hawaiian Airlines Inc.      #> 10 MQ      Envoy Air                   #> 11 UA      United Air Lines Inc.       #> 12 US      US Airways Inc.             #> 13 VX      Virgin America              #> 14 WN      Southwest Airlines Co.      #> 15 YV      Mesa Airlines Inc."},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"class-dm","dir":"Articles","previous_headings":"","what":"Class dm","title":"Class dm and basic operations","text":"dm class consists collection tables metadata tables, names tables names columns tables primary foreign keys tables link tables together data (either data frames references database tables) tables dm must obtained data source; csv files spreadsheets need imported data frames R.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"ex_dm","dir":"Articles","previous_headings":"","what":"Examples of dm objects","title":"Class dm and basic operations","text":"currently three options available creating dm object. relevant functions creating dm objects : dm() as_dm() new_dm() dm_from_con() illustrate options, now create dm several different ways. can use tables well-known {nycflights13} package.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"pass-the-tables-directly","dir":"Articles","previous_headings":"Examples of dm objects","what":"Pass the tables directly","title":"Class dm and basic operations","text":"Create dm object directly providing data frames dm():","code":"library(nycflights13) library(dm) dm(airlines, airports, flights, planes, weather) #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"start-with-an-empty-dm","dir":"Articles","previous_headings":"Examples of dm objects","what":"Start with an empty dm","title":"Class dm and basic operations","text":"Start empty dm object created dm() new_dm(), add tables object:","code":"library(nycflights13) library(dm) empty_dm <- dm() empty_dm #> dm() dm(empty_dm, airlines, airports, flights, planes, weather) #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"coerce-a-list-of-tables","dir":"Articles","previous_headings":"Examples of dm objects","what":"Coerce a list of tables","title":"Class dm and basic operations","text":"Turn named list tables dm as_dm():","code":"as_dm(list(   airlines = airlines,   airports = airports,   flights = flights,   planes = planes,   weather = weather )) #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"turn-tables-from-a-src-into-a-dm","dir":"Articles","previous_headings":"Examples of dm objects","what":"Turn tables from a src into a dm","title":"Class dm and basic operations","text":"Squeeze (subset ) tables belonging src object dm using dm_from_con(): function dm_from_con(con, table_names = NULL) includes available tables source dm object. means can use , example, postgres database access via DBI::dbConnect(RPostgres::Postgres()) (appropriate arguments dbname, host, port, …), produce dm object tables database.","code":"sqlite_con <- dbplyr::nycflights13_sqlite()  flights_dm <- dm_from_con(sqlite_con) flights_dm #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [/tmp/RtmpmOF0B9/nycflights13.sqlite] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `sqlite_stat1`, … (7 total) #> Columns: 62 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"low-level-construction","dir":"Articles","previous_headings":"Examples of dm objects","what":"Low-level construction","title":"Class dm and basic operations","text":"Another way creating dm object calling new_dm() list tbl objects: constructor optimized speed perform integrity checks. Use caution, validate using dm_validate() necessary.","code":"base_dm <- new_dm(list(   airlines = airlines,   airports = airports,   flights = flights,   planes = planes,   weather = weather )) base_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 0 #> Foreign keys: 0 dm_validate(base_dm)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"access-tables","dir":"Articles","previous_headings":"","what":"Access tables","title":"Class dm and basic operations","text":"can get list tables dm_get_tables() src object dm_get_con(). order pull specific table dm, use: can use {dm}-functions manage primary keys tables dm object?","code":"flights_dm[[\"airports\"]] #> # Source:   table<`airports`> [?? x 8] #> # Database: sqlite 3.40.0 [/tmp/RtmpmOF0B9/nycflights13.sqlite] #>    faa   name                            lat    lon   alt    tz dst   tzone #>    <chr> <chr>                         <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 04G   Lansdowne Airport              41.1  -80.6  1044    -5 A     Amer… #>  2 06A   Moton Field Municipal Airport  32.5  -85.7   264    -6 A     Amer… #>  3 06C   Schaumburg Regional            42.0  -88.1   801    -6 A     Amer… #>  4 06N   Randall Airport                41.4  -74.4   523    -5 A     Amer… #>  5 09J   Jekyll Island Airport          31.1  -81.4    11    -5 A     Amer… #>  6 0A9   Elizabethton Municipal Airpo…  36.4  -82.2  1593    -5 A     Amer… #>  7 0G6   Williams County Airport        41.5  -84.5   730    -5 A     Amer… #>  8 0G7   Finger Lakes Regional Airport  42.9  -76.8   492    -5 A     Amer… #>  9 0P2   Shoestring Aviation Airfield   39.8  -76.6  1000    -5 U     Amer… #> 10 0S9   Jefferson County Intl          48.1 -123.    108    -8 A     Amer… #> # … with more rows"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"pk","dir":"Articles","previous_headings":"","what":"Primary keys of dm objects","title":"Class dm and basic operations","text":"useful functions managing primary key settings : dm_add_pk() dm_get_all_pks() dm_rm_pk() dm_enum_pk_candidates() created dm object according examples “Examples dm objects”, object yet primary keys set. let’s add one. use nycflights13 tables, .e. flights_dm . dm now primary key: get overview tables primary keys, use dm_get_all_pks(): Remove primary key: still need get know data better, already available form dm object, can use dm_enum_pk_candidates() function order get information columns table unique keys: flights table one-column primary key candidates: dm_add_pk() check argument. set TRUE, function checks column table given user unique. performance reasons, default check = FALSE. See also [dm_examine_constraints()] checking constraints dm.","code":"dm_has_pk(flights_dm, airports) #> [1] FALSE flights_dm_with_key <- dm_add_pk(flights_dm, airports, faa) flights_dm_with_key #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [/tmp/RtmpmOF0B9/nycflights13.sqlite] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `sqlite_stat1`, … (7 total) #> Columns: 62 #> Primary keys: 1 #> Foreign keys: 0 dm_has_pk(flights_dm_with_key, airports) #> [1] TRUE dm_get_all_pks(flights_dm_with_key) #> # A tibble: 1 × 3 #>   table    pk_col autoincrement #>   <chr>    <keys> <lgl>         #> 1 airports faa    FALSE dm_rm_pk(flights_dm_with_key, airports) %>%   dm_has_pk(airports) #> [1] FALSE dm_enum_pk_candidates(flights_dm_with_key, airports) #> # A tibble: 8 × 3 #>   columns candidate why                                                     #>   <keys>  <lgl>     <chr>                                                   #> 1 faa     TRUE      \"\"                                                      #> 2 lon     TRUE      \"\"                                                      #> 3 name    FALSE     \"has duplicate values: Municipal Airport (5), All Airp… #> 4 lat     FALSE     \"has duplicate values: 38.88944 (2), 40.63975 (2)\"      #> 5 alt     FALSE     \"has duplicate values: 0 (51), 13 (13), 14 (12), 15 (1… #> 6 tz      FALSE     \"has duplicate values: -5 (521), -6 (342), -9 (240), -… #> 7 dst     FALSE     \"has duplicate values: A (1388), U (47), N (23)\"        #> 8 tzone   FALSE     \"has duplicate values: America/New_York (519), America… dm_enum_pk_candidates(flights_dm_with_key, flights) %>% dplyr::count(candidate) #> # A tibble: 1 × 2 #>   candidate     n #>   <lgl>     <int> #> 1 FALSE        19 try(   dm_add_pk(flights_dm, airports, tzone, check = TRUE) ) #> Error in abort_not_unique_key(x_label, orig_names) :  #>   (`tzone`) not a unique key of `airports`."},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-class.html","id":"foreign-keys","dir":"Articles","previous_headings":"","what":"Foreign keys","title":"Class dm and basic operations","text":"Useful functions managing foreign key relations include: dm_add_fk() dm_get_all_fks() dm_rm_fk() dm_enum_fk_candidates() Now gets (even ) interesting: want define relations different tables. dm_add_fk() function can define column table points another table’s column. done choosing foreign key one table point primary key another table. primary key referred table must set dm_add_pk(). dm_add_fk() find primary key column referenced table make indicated column child table point . throw error: Let’s create dm object foreign key relation work later : tried add another foreign key relation flights airports object? Column dest might work, since also contains airport codes: Checks opt-executed check = TRUE. can still add foreign key default check = FALSE. See also dm_examine_constraints() checking constraints dm. Get overview foreign key relations withdm_get_all_fks(): Remove foreign key relations dm_rm_fk() (parameter columns = NULL means relations removed, message): Since primary keys defined dm object, usually need provide referenced column name ref_table. Another function getting know data better (cf. dm_enum_pk_candidates() “Primary keys dm objects”) dm_enum_fk_candidates(). Use get overview foreign key candidates point one table another:","code":"flights_dm_with_key %>% dm_add_fk(flights, origin, airports) #> ── Table source ─────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [/tmp/RtmpmOF0B9/nycflights13.sqlite] #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `sqlite_stat1`, … (7 total) #> Columns: 62 #> Primary keys: 1 #> Foreign keys: 1 try(   flights_dm %>% dm_add_fk(flights, origin, airports) ) #> Error in abort_ref_tbl_has_no_pk(ref_table_name) :  #>   ref_table `airports` needs a primary key first. Use `dm_enum_pk_candidates()` to find appropriate columns and `dm_add_pk()` to define a primary key. flights_dm_with_fk <- dm_add_fk(flights_dm_with_key, flights, origin, airports) try(   flights_dm_with_fk %>% dm_add_fk(flights, dest, airports, check = TRUE) ) #> Error in abort_not_subset_of(table_name, col_name, ref_table_name, ref_col_name) :  #>   Column (`dest`) of table `flights` contains values (see examples above) that are not present in column (`faa`) of table `airports`. dm_get_all_fks(dm_nycflights13(cycle = TRUE)) #> # A tibble: 5 × 5 #>   child_table child_fk_cols     parent_table parent_key_cols   on_delete #>   <chr>       <keys>            <chr>        <keys>            <chr>     #> 1 flights     carrier           airlines     carrier           no_action #> 2 flights     origin            airports     faa               no_action #> 3 flights     dest              airports     faa               no_action #> 4 flights     tailnum           planes       tailnum           no_action #> 5 flights     origin, time_hour weather      origin, time_hour no_action try(   flights_dm_with_fk %>%     dm_rm_fk(table = flights, column = dest, ref_table = airports) %>%     dm_get_all_fks(c(flights, airports)) ) #> Error in abort_is_not_fkc() : No foreign keys to remove.  flights_dm_with_fk %>%   dm_rm_fk(flights, origin, airports) %>%   dm_get_all_fks(c(flights, airports)) #> # A tibble: 0 × 5 #> # … with 5 variables: child_table <chr>, child_fk_cols <keys>, #> #   parent_table <chr>, parent_key_cols <keys>, on_delete <chr> flights_dm_with_fk %>%   dm_rm_fk(flights, columns = NULL, airports) %>%   dm_get_all_fks(c(flights, airports)) #> Removing foreign keys: %>% #>   dm_rm_fk(flights, origin, airports) #> # A tibble: 0 × 5 #> # … with 5 variables: child_table <chr>, child_fk_cols <keys>, #> #   parent_table <chr>, parent_key_cols <keys>, on_delete <chr> dm_enum_fk_candidates(flights_dm_with_key, weather, airports) #> # A tibble: 15 × 3 #>    columns    candidate why                                                 #>    <keys>     <lgl>     <chr>                                               #>  1 origin     TRUE      \"\"                                                  #>  2 year       FALSE     \"values of `weather$year` not in `airports$faa`: 2… #>  3 month      FALSE     \"values of `weather$month` not in `airports$faa`: … #>  4 day        FALSE     \"values of `weather$day` not in `airports$faa`: 3 … #>  5 hour       FALSE     \"values of `weather$hour` not in `airports$faa`: 1… #>  6 temp       FALSE     \"values of `weather$temp` not in `airports$faa`: 3… #>  7 dewp       FALSE     \"values of `weather$dewp` not in `airports$faa`: 2… #>  8 humid      FALSE     \"values of `weather$humid` not in `airports$faa`: … #>  9 wind_dir   FALSE     \"values of `weather$wind_dir` not in `airports$faa… #> 10 wind_speed FALSE     \"values of `weather$wind_speed` not in `airports$f… #> 11 wind_gust  FALSE     \"values of `weather$wind_gust` not in `airports$fa… #> 12 precip     FALSE     \"values of `weather$precip` not in `airports$faa`:… #> 13 pressure   FALSE     \"values of `weather$pressure` not in `airports$faa… #> 14 visib      FALSE     \"values of `weather$visib` not in `airports$faa`: … #> 15 time_hour  FALSE     \"values of `weather$time_hour` not in `airports$fa…"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-filter.html","id":"data-nycflights13","dir":"Articles","previous_headings":"","what":"Data: nycflights13","title":"Filtering in relational data models","text":"explore filtering {dm}, ’ll use {nycflights13} data flights, planes, airlines, airports weather tables. dataset contains information 336 776 flights departed New York City 2013, 3322 different planes 1458 airports involved. data comes US Bureau Transportation Statistics, documented ?nycflights13::flights. start exploration, create dm object {nycflights13} data. built-dm::dm_nycflights13() function takes care . default uses subset complete data though: flights 10th month considered, reducing number rows flights table 11 227. data model object contains data source tables, metadata tables. like create dm object tables example data, can use new_dm(), dm() as_dm() functions. See vignette(\"howto-dm-df\") details. console output ’dm` object shows data metadata, colored clarity: Now know five tables dm object. connected? relations best displayed visualization entity-relationship model: can look single table tbl. print airports table, call","code":"dm <- dm_nycflights13() dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 dm_draw(dm) tbl(dm, \"airports\") #> Warning: `tbl.dm()` was deprecated in dm 0.2.0. #> ℹ Use `dm[[table_name]]` instead to access a specific table. #> # A tibble: 86 × 8 #>    faa   name                            lat    lon   alt    tz dst   tzone #>    <chr> <chr>                         <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                    42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta I…  33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl          30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                   41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                 36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Loga…  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl           42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                       34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-filter.html","id":"filter","dir":"Articles","previous_headings":"","what":"Filtering a dm object","title":"Filtering in relational data models","text":"dm_filter() allows select subset dm object.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-filter.html","id":"how-it-works","dir":"Articles","previous_headings":"Filtering a dm object","what":"How it works","title":"Filtering in relational data models","text":"Filtering dm object different filtering dataframe tibble dplyr::filter(). corresponding {dm} function dm::dm_filter(). function one filtering conditions can set one tables dm object. conditions immediately evaluated respective tables related tables. resulting table, related tables (directly indirectly) filter condition taken account following way: - filtering semi-joins successively performed along paths filtered tables requested table, join reducing left-hand side tables joins rows key values corresponding values key columns right-hand side tables join. - eventually requested table returned, containing remaining rows filtering joins Currently, works graph induced foreign key relations cycle free. Fortunately, default dm_nycflights13().","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-filter.html","id":"filtering-examples","dir":"Articles","previous_headings":"Filtering a dm object","what":"Filtering Examples","title":"Filtering in relational data models","text":"Let’s see filtering action: want data related John F. Kennedy International Airport. can get numbers rows table dm_nrow(). total number rows dm drops 2 951 987 (unaffected table disconnected weather table). Next example: Get dm object containing data flights New York Dulles International Airport Washington D.C., abbreviated IAD. Applying multiple filters different tables also supported. example: Get January 2013 flights Delta Air Lines didn’t depart John F. Kennedy International Airport. can inspect filtered tables subsetting . airlines table, Delta remaining carrier: planes used service flights? indeed, included flights departed January (month == 1): comparison, let’s review equivalent manual query flights dplyr syntax: {dm} code leaner foreign key information encoded object.","code":"filtered_dm <-   dm %>%   dm_filter(airports = (name == \"John F Kennedy Intl\")) filtered_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 rows_per_table <-   filtered_dm %>%   dm_nrow() rows_per_table #> airlines airports  flights   planes  weather  #>       10        1      602      336       38 sum(rows_per_table) #> [1] 987 sum_nrow <- sum(dm_nrow(dm)) sum_nrow_filtered <- sum(dm_nrow(dm_apply_filters(filtered_dm))) #> Warning: `dm_apply_filters()` was deprecated in dm 1.0.0. #> ℹ Calling `dm_apply_filters()` after `dm_filter()` is no longer necessary. dm %>%   dm_filter(flights = (dest == \"IAD\")) %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>        4        3       32       28       30 dm_delta_may <-   dm %>%   dm_filter(     airlines = (name == \"Delta Air Lines Inc.\"),     airports = (name != \"John F Kennedy Intl\"),     flights = (month == 1)   ) dm_delta_may #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 dm_delta_may %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>        1        2       75       58       25 dm_delta_may$airlines #> # A tibble: 1 × 2 #>   carrier name                 #>   <chr>   <chr>                #> 1 DL      Delta Air Lines Inc. dm_delta_may$planes #> # A tibble: 58 × 9 #>    tailnum  year type              manuf…¹ model engines seats speed engine #>    <chr>   <int> <chr>             <chr>   <chr>   <int> <int> <int> <chr>  #>  1 N302NB   1999 Fixed wing multi… AIRBUS… A319…       2   145    NA Turbo… #>  2 N304DQ   2008 Fixed wing multi… BOEING  737-…       2   149    NA Turbo… #>  3 N306DQ   2009 Fixed wing multi… BOEING  737-…       2   149    NA Turbo… #>  4 N307DQ   2009 Fixed wing multi… BOEING  737-…       2   149    NA Turbo… #>  5 N309US   1990 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #>  6 N316US   1991 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #>  7 N317NB   2000 Fixed wing multi… AIRBUS… A319…       2   145    NA Turbo… #>  8 N318NB   2000 Fixed wing multi… AIRBUS… A319…       2   145    NA Turbo… #>  9 N318US   1991 Fixed wing multi… AIRBUS… A320…       2   182    NA Turbo… #> 10 N322NB   2001 Fixed wing multi… AIRBUS… A319…       2   145    NA Turbo… #> # … with 48 more rows, and abbreviated variable name ¹​manufacturer dm_delta_may$flights %>%   count(month) #> # A tibble: 1 × 2 #>   month     n #>   <int> <int> #> 1     1    75 airlines_filtered <- filter(airlines, name == \"Delta Air Lines Inc.\") airports_filtered <- filter(airports, name != \"John F Kennedy Intl\") flights %>%   semi_join(airlines_filtered, by = \"carrier\") %>%   semi_join(airports_filtered, by = c(\"origin\" = \"faa\")) %>%   filter(month == 5) #> # A tibble: 2,340 × 19 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     5     1      554           600      -6     731     756     -25 #>  2  2013     5     1      555           600      -5     819     827      -8 #>  3  2013     5     1      603           610      -7     754     809     -15 #>  4  2013     5     1      622           630      -8     848     844       4 #>  5  2013     5     1      654           700      -6     931     950     -19 #>  6  2013     5     1      655           700      -5     944    1007     -23 #>  7  2013     5     1      656           705      -9    1005    1011      -6 #>  8  2013     5     1      658           700      -2     925     928      -3 #>  9  2013     5     1      743           745      -2    1014    1004      10 #> 10  2013     5     1      755           800      -5     929    1001     -32 #> # … with 2,330 more rows, 10 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and #> #   abbreviated variable names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, #> #   ⁴​sched_arr_time, ⁵​arr_delay"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-filter.html","id":"sql-statements-behind-filtering-a-dm-object-on-a-database","dir":"Articles","previous_headings":"","what":"SQL statements behind filtering a dm object on a database","title":"Filtering in relational data models","text":"{dm} meant work relational data models, locally well databases. project, data probably stored locally remote relational database can queried SQL statements. can check queries using sql_render() {dbplyr} package. Example: Print SQL statements getting January 2013 flights Delta Air Lines, depart John F. Kennedy International Airport, data stored sqlite database. show SQL query behind dm_filter(), copy flights, airlines airports tables nyflights13 dataset temporary -memory database using built-function copy_dm_to() dbplyr::src_memdb. filter data, print corresponding SQL statement dbplyr::sql_render(). reading: {dm}’s function copying data databases.","code":"dm %>%   dm_select_tbl(flights, airlines, airports) %>%   copy_dm_to(dbplyr::src_memdb(), .) %>%   dm_filter(     airlines = (name == \"Delta Air Lines Inc.\"),     airports = (name != \"John F Kennedy Intl\"),     flights = (month == 1)   ) %>%   dm_get_tables() %>%   map(dbplyr::sql_render) #> $flights #> <SQL> SELECT * #> FROM ( #>   SELECT * #>   FROM ( #>     SELECT * #>     FROM `flights_1_2020_08_28_07_13_03_12345` #>     WHERE ((`month` = 1.0)) #> ) AS `LHS` #>   WHERE EXISTS ( #>     SELECT 1 FROM ( #>     SELECT * #>     FROM `airlines_1_2020_08_28_07_13_03_12345` #>     WHERE ((`name` = 'Delta Air Lines Inc.')) #> ) AS `RHS` #>     WHERE (`LHS`.`carrier` = `RHS`.`carrier`) #>   ) #> ) AS `LHS` #> WHERE EXISTS ( #>   SELECT 1 FROM ( #>   SELECT * #>   FROM `airports_1_2020_08_28_07_13_03_12345` #>   WHERE ((`name` != 'John F Kennedy Intl')) #> ) AS `RHS` #>   WHERE (`LHS`.`origin` = `RHS`.`faa`) #> ) #>  #> $airlines #> <SQL> SELECT * #> FROM ( #>   SELECT * #>   FROM `airlines_1_2020_08_28_07_13_03_12345` #>   WHERE ((`name` = 'Delta Air Lines Inc.')) #> ) AS `LHS` #> WHERE EXISTS ( #>   SELECT 1 FROM ( #>   SELECT * #>   FROM ( #>     SELECT * #>     FROM `flights_1_2020_08_28_07_13_03_12345` #>     WHERE ((`month` = 1.0)) #> ) AS `LHS` #>   WHERE EXISTS ( #>     SELECT 1 FROM ( #>     SELECT * #>     FROM `airports_1_2020_08_28_07_13_03_12345` #>     WHERE ((`name` != 'John F Kennedy Intl')) #> ) AS `RHS` #>     WHERE (`LHS`.`origin` = `RHS`.`faa`) #>   ) #> ) AS `RHS` #>   WHERE (`LHS`.`carrier` = `RHS`.`carrier`) #> ) #>  #> $airports #> <SQL> SELECT * #> FROM ( #>   SELECT * #>   FROM `airports_1_2020_08_28_07_13_03_12345` #>   WHERE ((`name` != 'John F Kennedy Intl')) #> ) AS `LHS` #> WHERE EXISTS ( #>   SELECT 1 FROM ( #>   SELECT * #>   FROM ( #>     SELECT * #>     FROM `flights_1_2020_08_28_07_13_03_12345` #>     WHERE ((`month` = 1.0)) #> ) AS `LHS` #>   WHERE EXISTS ( #>     SELECT 1 FROM ( #>     SELECT * #>     FROM `airlines_1_2020_08_28_07_13_03_12345` #>     WHERE ((`name` = 'Delta Air Lines Inc.')) #> ) AS `RHS` #>     WHERE (`LHS`.`carrier` = `RHS`.`carrier`) #>   ) #> ) AS `RHS` #>   WHERE (`LHS`.`faa` = `RHS`.`origin`) #> )"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-join.html","id":"data-nycflights13","dir":"Articles","previous_headings":"","what":"Data: nycflights13","title":"Joining in relational data models","text":"explore filtering {dm}, ’ll use {nycflights13} data tables flights, planes, airlines airports. dataset contains information 336,776 flights departed New York City 2013, 3,322 different planes 1,458 airports involved. data comes US Bureau Transportation Statistics, documented ?nycflights13. First, create dm object {nycflights13} data. implemented dm_nycflights13(). data model object contains data well metadata. like create dm tables, please look ?dm function new_dm().","code":"dm <- dm_nycflights13()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-join.html","id":"join","dir":"Articles","previous_headings":"","what":"Joining a dm object","title":"Joining in relational data models","text":"{dm} allows join two tables dm object based shared column. can use join functions know {dplyr} package. Currently {dplyr} supports four types mutating joins, two types filtering joins, nesting join. See ?dplyr::join details.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-join.html","id":"how-it-works","dir":"Articles","previous_headings":"Joining a dm object","what":"How it works","title":"Joining in relational data models","text":"join combination two tables based shared information. technical terms, merge tables need directly connected foreign key relation. existing links can inspected two ways: Visually, drawing data model dm_draw() directed arrows show explicitly relation different columns. Printed console calling dm_get_all_fks()","code":"dm %>%   dm_draw() dm %>%   dm_get_all_fks() #> # A tibble: 4 × 5 #>   child_table child_fk_cols     parent_table parent_key_cols   on_delete #>   <chr>       <keys>            <chr>        <keys>            <chr>     #> 1 flights     carrier           airlines     carrier           no_action #> 2 flights     origin            airports     faa               no_action #> 3 flights     tailnum           planes       tailnum           no_action #> 4 flights     origin, time_hour weather      origin, time_hour no_action"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-join.html","id":"joining-examples","dir":"Articles","previous_headings":"Joining a dm object","what":"Joining Examples","title":"Joining in relational data models","text":"Let’s look examples: Add column airline names airlines table flights table. can see , dm_joined data frame one column flights table. difference name column airlines table. result dm object anymore, (tibble) data frame: Another example: Get flights can’t matched airlines names. expect flights data {nycflights13} package clean well organized, flights remain. can check anti_join: example filtering dm merging: Get May 2013 flights Delta Air Lines didn’t depart John F. Kennedy International Airport - join airports data flights table. See vignette(\"tech-dm-filter\") details filtering. last example: Merge tables one big table. Sometimes need everything one place. case, can use dm_flatten_to_tbl() function. joins tables dm object together one wide table. specify starting table. following joins determined foreign key links. precise, dm_flatten_to_tbl() join tables one level hierarchy (.e., direct neighbors table .start). want cover tables levels hierarchy, use argument recursive = TRUE dm_flatten_to_tbl() instead. Also, aware column names need unique. dm_flatten_to_tbl() takes care automatically renaming relevant columns informs user names changed, e.g. dm_rename(airlines, airlines.name = name). want merge tables, get nested table return, use dm_wrap_tbl() pull_tbl() instead:","code":"dm_joined <-   dm %>%   dm_flatten_to_tbl(flights, airlines, .join = left_join) dm_joined #> # A tibble: 1,761 × 20 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1    10        3          2359       4     426     437     -11 #>  2  2013     1    10       16          2359      17     447     444       3 #>  3  2013     1    10      450           500     -10     634     648     -14 #>  4  2013     1    10      520           525      -5     813     820      -7 #>  5  2013     1    10      530           530       0     824     829      -5 #>  6  2013     1    10      531           540      -9     832     850     -18 #>  7  2013     1    10      535           540      -5    1015    1017      -2 #>  8  2013     1    10      546           600     -14     645     709     -24 #>  9  2013     1    10      549           600     -11     652     724     -32 #> 10  2013     1    10      550           600     -10     649     703     -14 #> # … with 1,751 more rows, 11 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, #> #   name <chr>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay dm$flights %>%   names() #>  [1] \"year\"           \"month\"          \"day\"            \"dep_time\"       #>  [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\" #>  [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"        #> [13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"       #> [17] \"hour\"           \"minute\"         \"time_hour\"  dm$airlines %>%   names() #> [1] \"carrier\" \"name\"  dm_joined %>%   names() #>  [1] \"year\"           \"month\"          \"day\"            \"dep_time\"       #>  [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\" #>  [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"        #> [13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"       #> [17] \"hour\"           \"minute\"         \"time_hour\"      \"name\" dm_joined %>%   class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" dm %>%   dm_flatten_to_tbl(flights, airlines, .join = anti_join) #> # A tibble: 0 × 19 #> # … with 19 variables: year <int>, month <int>, day <int>, dep_time <int>, #> #   sched_dep_time <int>, dep_delay <dbl>, arr_time <int>, #> #   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm> dm_nycflights13(subset = FALSE) %>%   dm_filter(     airlines = (name == \"Delta Air Lines Inc.\"),     airports = (name != \"John F Kennedy Intl\"),     flights = (month == 5)   ) %>%    dm_flatten_to_tbl(flights, airports, .join = left_join) #> # A tibble: 2,340 × 26 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     5     1      554           600      -6     731     756     -25 #>  2  2013     5     1      555           600      -5     819     827      -8 #>  3  2013     5     1      603           610      -7     754     809     -15 #>  4  2013     5     1      622           630      -8     848     844       4 #>  5  2013     5     1      654           700      -6     931     950     -19 #>  6  2013     5     1      655           700      -5     944    1007     -23 #>  7  2013     5     1      656           705      -9    1005    1011      -6 #>  8  2013     5     1      658           700      -2     925     928      -3 #>  9  2013     5     1      743           745      -2    1014    1004      10 #> 10  2013     5     1      755           800      -5     929    1001     -32 #> # … with 2,330 more rows, 17 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, #> #   name <chr>, lat <dbl>, lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, #> #   tzone <chr>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay dm_nycflights13() %>%   dm_select_tbl(-weather) %>%   dm_flatten_to_tbl(.start = flights) #> Renaming ambiguous columns: %>% #>   dm_rename(flights, year.flights = year) %>% #>   dm_rename(airlines, name.airlines = name) %>% #>   dm_rename(airports, name.airports = name) %>% #>   dm_rename(planes, year.planes = year) #> # A tibble: 1,761 × 35 #>    year.flights month   day dep_t…¹ sched…² dep_d…³ arr_t…⁴ sched…⁵ arr_d…⁶ #>           <int> <int> <int>   <int>   <int>   <dbl>   <int>   <int>   <dbl> #>  1         2013     1    10       3    2359       4     426     437     -11 #>  2         2013     1    10      16    2359      17     447     444       3 #>  3         2013     1    10     450     500     -10     634     648     -14 #>  4         2013     1    10     520     525      -5     813     820      -7 #>  5         2013     1    10     530     530       0     824     829      -5 #>  6         2013     1    10     531     540      -9     832     850     -18 #>  7         2013     1    10     535     540      -5    1015    1017      -2 #>  8         2013     1    10     546     600     -14     645     709     -24 #>  9         2013     1    10     549     600     -11     652     724     -32 #> 10         2013     1    10     550     600     -10     649     703     -14 #> # … with 1,751 more rows, 26 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, #> #   name.airlines <chr>, name.airports <chr>, lat <dbl>, lon <dbl>, #> #   alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, year.planes <int>, #> #   type <chr>, manufacturer <chr>, model <chr>, engines <int>, #> #   seats <int>, speed <int>, engine <chr>, and abbreviated variable … dm_nycflights13() %>%   dm_wrap_tbl(root = flights) %>%   pull_tbl(flights) #> # A tibble: 1,761 × 23 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1    10        3          2359       4     426     437     -11 #>  2  2013     1    10       16          2359      17     447     444       3 #>  3  2013     1    10      450           500     -10     634     648     -14 #>  4  2013     1    10      520           525      -5     813     820      -7 #>  5  2013     1    10      530           530       0     824     829      -5 #>  6  2013     1    10      531           540      -9     832     850     -18 #>  7  2013     1    10      535           540      -5    1015    1017      -2 #>  8  2013     1    10      546           600     -14     645     709     -24 #>  9  2013     1    10      549           600     -11     652     724     -32 #> 10  2013     1    10      550           600     -10     649     703     -14 #> # … with 1,751 more rows, 14 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, #> #   airlines <packed[,1]>, airports <packed[,7]>, planes <packed[,8]>, #> #   weather <packed[,13]>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"enabling-dplyr-workflow-within-a-dm","dir":"Articles","previous_headings":"","what":"Enabling {dplyr}-workflow within a dm","title":"Manipulating individual tables","text":"dm_get_tables() pull_tbl() functions new experimental argument keyed, defaults FALSE. set TRUE, list objects class dm_keyed_tbl returned instead. dm_keyed_tbl inherits tbl tbl_lazy, many {dplyr} {tidyr} verbs work unchanged. objects also attempt track primary foreign keys, available joins recombining tables later dm object. finished transforming data, can use dm() new_dm() recombine tables dm object. resulting tables dm primary foreign keys available tracked original table. Reconstructing dm object strictly necessary ’re primarily interested deriving one multiple separate tables analysis. workflow proves useful seems, subsetting tables via $, [[ default keyed = TRUE forthcoming major release {dm}.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Manipulating individual tables","text":"much theory, look feel? explore , make use trusted {nycflights13} data.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-1-add-a-new-column-to-an-existing-table","dir":"Articles","previous_headings":"Examples","what":"Use case 1: Add a new column to an existing table","title":"Manipulating individual tables","text":"Imagine want column flights, specifying flight left noon . Just like {dplyr}, can tackle mutate(). Let us step step: update original dm new flights table use dm(). bang-bang-bang (!!!) technical necessity become superfluous forthcoming release.","code":"library(dm) library(dplyr)  flights_dm <- dm_nycflights13(cycle = TRUE) flights_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 5 flights_keyed <-   flights_dm %>%   dm_get_tables(keyed = TRUE)  # The print output for a `dm_keyed_tbl` looks very much like that from a normal # `tibble`, with additional details about keys. flights_keyed$flights #> # A tibble: 1,761 × 19 #> # Keys:     — | 0 | 5 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1    10        3          2359       4     426     437     -11 #>  2  2013     1    10       16          2359      17     447     444       3 #>  3  2013     1    10      450           500     -10     634     648     -14 #>  4  2013     1    10      520           525      -5     813     820      -7 #>  5  2013     1    10      530           530       0     824     829      -5 #>  6  2013     1    10      531           540      -9     832     850     -18 #>  7  2013     1    10      535           540      -5    1015    1017      -2 #>  8  2013     1    10      546           600     -14     645     709     -24 #>  9  2013     1    10      549           600     -11     652     724     -32 #> 10  2013     1    10      550           600     -10     649     703     -14 #> # … with 1,751 more rows, 10 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and #> #   abbreviated variable names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, #> #   ⁴​sched_arr_time, ⁵​arr_delay flights_tbl_mutate <-   flights_keyed$flights %>%   mutate(am_pm_dep = if_else(dep_time < 1200, \"am\", \"pm\"), .after = dep_time)  flights_tbl_mutate #> # A tibble: 1,761 × 20 #> # Keys:     — | 0 | 5 #>     year month   day dep_time am_pm_dep sched_dep…¹ dep_d…² arr_t…³ sched…⁴ #>    <int> <int> <int>    <int> <chr>           <int>   <dbl>   <int>   <int> #>  1  2013     1    10        3 am               2359       4     426     437 #>  2  2013     1    10       16 am               2359      17     447     444 #>  3  2013     1    10      450 am                500     -10     634     648 #>  4  2013     1    10      520 am                525      -5     813     820 #>  5  2013     1    10      530 am                530       0     824     829 #>  6  2013     1    10      531 am                540      -9     832     850 #>  7  2013     1    10      535 am                540      -5    1015    1017 #>  8  2013     1    10      546 am                600     -14     645     709 #>  9  2013     1    10      549 am                600     -11     652     724 #> 10  2013     1    10      550 am                600     -10     649     703 #> # … with 1,751 more rows, 11 more variables: arr_delay <dbl>, #> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>, #> #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, #> #   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time updated_flights_dm <- dm(   flights = flights_tbl_mutate,   !!!flights_keyed[c(\"airlines\", \"airports\", \"planes\", \"weather\")] )  # The only difference in the `dm` print output is the increased number of # columns updated_flights_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `flights`, `airlines`, `airports`, `planes`, `weather` #> Columns: 54 #> Primary keys: 4 #> Foreign keys: 5 # The schematic view of the data model remains unchanged dm_draw(updated_flights_dm)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-2-creation-of-a-surrogate-key","dir":"Articles","previous_headings":"Examples","what":"Use case 2: Creation of a surrogate key","title":"Manipulating individual tables","text":"course action , example, employed create surrogate key table, synthetic simple key replaces compound key. can weather table.","code":"library(tidyr)  flights_keyed$weather #> # A tibble: 144 × 15 #> # Keys:     `origin`, `time_hour` | 1 | 0 #>    origin  year month   day  hour  temp  dewp humid wind_…¹ wind_…² wind_…³ #>    <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl> #>  1 EWR     2013     1    10     0  41    32    70.1     230    8.06    NA   #>  2 EWR     2013     1    10     1  39.0  30.0  69.9     210    9.21    NA   #>  3 EWR     2013     1    10     2  39.0  28.9  66.8     230    6.90    NA   #>  4 EWR     2013     1    10     3  39.9  27.0  59.5     270    5.75    NA   #>  5 EWR     2013     1    10     4  41    26.1  55.0     320    6.90    NA   #>  6 EWR     2013     1    10     5  41    26.1  55.0     300   12.7     20.7 #>  7 EWR     2013     1    10     6  39.9  25.0  54.8     280    6.90    17.3 #>  8 EWR     2013     1    10     7  41    25.0  52.6     330    6.90    NA   #>  9 EWR     2013     1    10     8  43.0  25.0  48.7     330    8.06    NA   #> 10 EWR     2013     1    10     9  45.0  23    41.6     320   17.3     26.5 #> # … with 134 more rows, 4 more variables: precip <dbl>, pressure <dbl>, #> #   visib <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​wind_dir, ²​wind_speed, ³​wind_gust # Maybe there is some hidden candidate for a primary key that we overlooked? enum_pk_candidates(flights_keyed$weather) #> # A tibble: 15 × 3 #>    columns    candidate why                                                 #>    <keys>     <lgl>     <chr>                                               #>  1 origin     FALSE     has duplicate values: EWR (48), JFK (48), LGA (48)  #>  2 year       FALSE     has duplicate values: 2013 (144)                    #>  3 month      FALSE     has duplicate values: 1 (72), 2 (72)                #>  4 day        FALSE     has duplicate values: 10 (144)                      #>  5 hour       FALSE     has duplicate values: 0 (6), 1 (6), 2 (6), 3 (6), … #>  6 temp       FALSE     has duplicate values: 44.06 (12), 41.00 (8), 44.96… #>  7 dewp       FALSE     has duplicate values: 21.92 (16), 24.98 (16), 6.98… #>  8 humid      FALSE     has duplicate values: 53.71 (4), 56.56 (4), 32.53 … #>  9 wind_dir   FALSE     has duplicate values: 320 (25), 330 (17), 310 (15)… #> 10 wind_speed FALSE     has duplicate values: 6.90468 (20), 8.05546 (19), … #> 11 wind_gust  FALSE     has 123 missing values, and duplicate values: 23.0… #> 12 precip     FALSE     has duplicate values: 0 (144)                       #> 13 pressure   FALSE     has duplicate values: 1028.9 (6), 1029.0 (5), 1032… #> 14 visib      FALSE     has duplicate values: 10 (144)                      #> 15 time_hour  FALSE     has duplicate values: 2013-01-10 00:00:00 (3), 201… # Seems we have to construct a column with unique values # This can be done by combining column `origin` with `time_hour`, if the latter # is converted to a single time zone first; all within the `dm`: weather_tbl_mutate <-   flights_keyed$weather %>%   # first convert all times to the same time zone:   mutate(time_hour_fmt = format(time_hour, tz = \"UTC\")) %>%   # paste together as character the airport code and the time   unite(\"origin_slot_id\", origin, time_hour_fmt) %>%   select(origin_slot_id, everything())  # check if we the result is as expected: weather_tbl_mutate %>%   enum_pk_candidates() %>%   filter(candidate) #> # A tibble: 1 × 3 #>   columns        candidate why   #>   <keys>         <lgl>     <chr> #> 1 origin_slot_id TRUE      \"\" # We apply the same transformation to create # the foreign key in the flights table: flights_tbl_mutate <-   flights_keyed$flights %>%   mutate(time_hour_fmt = format(time_hour, tz = \"UTC\")) %>%   unite(\"origin_slot_id\", origin, time_hour_fmt) %>%   select(origin_slot_id, everything())  surrogate_flights_dm <-   dm(     weather = weather_tbl_mutate,     flights = flights_tbl_mutate,     !!!flights_keyed[c(\"airlines\", \"airports\", \"planes\")]   ) %>%   dm_add_pk(weather, origin_slot_id) %>%   dm_add_fk(flights, origin_slot_id, weather)  surrogate_flights_dm %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-3-disentangle-dm","dir":"Articles","previous_headings":"Examples","what":"Use case 3: Disentangle dm","title":"Manipulating individual tables","text":"look dm created dm_nycflights13(cycle = TRUE), see two columns flights relate table, airports. One column stands departure airport arrival airport. generates cycle leads failures many operations work cycle-free data models, dm_flatten_to_tbl(), dm_filter() dm_wrap_tbl(). cases, can beneficial “disentangle” dm duplicating referred table. One way {dm}-framework follows:","code":"disentangled_flights_dm <-   dm(     destination = flights_keyed$airports,     origin = flights_keyed$airports,     !!!flights_keyed[c(\"flights\", \"airlines\", \"planes\", \"weather\")]   ) %>%   # Key relations are also duplicated, so the wrong ones need to be removed   dm_rm_fk(flights, dest, origin) %>%   dm_rm_fk(flights, origin, destination)  disentangled_flights_dm %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-4-add-summary-table-to-dm","dir":"Articles","previous_headings":"Examples","what":"Use case 4: Add summary table to dm","title":"Manipulating individual tables","text":"example adding summary table new table dm. Foreign-key relations taken care automatically. example shows alternative approach deconstruction reconstruction using pull_tbl().","code":"flights_derived <-   flights_dm %>%   pull_tbl(flights, keyed = TRUE) %>%   count(origin, carrier)  derived_flights_dm <- dm(flights_derived, !!!flights_keyed)  derived_flights_dm %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-5-joining-tables","dir":"Articles","previous_headings":"Examples","what":"Use case 5: Joining tables","title":"Manipulating individual tables","text":"like join columns one table another, can make use one ..._join() methods dm_keyed_tbl. many cases, using keyed tables derived dm object allows omitting argument without triggering message, safely inferred foreign keys stored dm_keyed_tbl objects. syntax, please see example .","code":"planes_for_join <-   flights_keyed$planes %>%   select(tailnum, plane_type = type)  joined_flights_tbl <-   flights_keyed$flights %>%   # let's first reduce the number of columns of flights   select(-dep_delay:-arr_delay, -air_time:-minute, -starts_with(\"sched_\")) %>%   # in the {dm}-method for the joins you can specify which columns you want to   # add to the subsetted table   left_join(planes_for_join)  joined_flights_dm <- dm(   flights_plane_type = joined_flights_tbl,   !!!flights_keyed[c(\"airlines\", \"airports\", \"weather\")] )  # this is how the table looks now joined_flights_dm$flights_plane_type #> # A tibble: 1,761 × 11 #>     year month   day dep_time carrier flight tailnum origin dest  #>    <int> <int> <int>    <int> <chr>    <int> <chr>   <chr>  <chr> #>  1  2013     1    10        3 B6         727 N571JB  JFK    BQN   #>  2  2013     1    10       16 B6         739 N564JB  JFK    PSE   #>  3  2013     1    10      450 US        1117 N171US  EWR    CLT   #>  4  2013     1    10      520 UA        1018 N35204  EWR    IAH   #>  5  2013     1    10      530 UA         404 N815UA  LGA    IAH   #>  6  2013     1    10      531 AA        1141 N5EAAA  JFK    MIA   #>  7  2013     1    10      535 B6         725 N784JB  JFK    BQN   #>  8  2013     1    10      546 B6         380 N337JB  EWR    BOS   #>  9  2013     1    10      549 EV        6055 N19554  LGA    IAD   #> 10  2013     1    10      550 US        2114 N740UW  LGA    BOS   #> # … with 1,751 more rows, and 2 more variables: time_hour <dttm>, #> #   plane_type <chr> # also here, the FK-relations are transferred to the new table joined_flights_dm %>%   dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-keyed.html","id":"use-case-6-retrieve-all-tables","dir":"Articles","previous_headings":"Examples","what":"Use case 6: Retrieve all tables","title":"Manipulating individual tables","text":"Retrieving tables dm object requires lot boilerplate code. dm_deconstruct() function helps creating boilerplate. dm object, prints code necessary create local variables tables. code can copy-pasted script function.","code":"dm <- dm_nycflights13() dm_deconstruct(dm) #> airlines <- pull_tbl(dm, \"airlines\", keyed = TRUE) #> airports <- pull_tbl(dm, \"airports\", keyed = TRUE) #> flights <- pull_tbl(dm, \"flights\", keyed = TRUE) #> planes <- pull_tbl(dm, \"planes\", keyed = TRUE) #> weather <- pull_tbl(dm, \"weather\", keyed = TRUE)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-low-level.html","id":"testing-key-constraints","dir":"Articles","previous_headings":"","what":"Testing key constraints","title":"Model verification - keys, constraints and normalization","text":"section contains information examples following functions: check_key(.data, ...) check_subset(t1, c1, t2, c2) check_set_equality(t1, c1, t2, c2) tables (data frames) connected key relations, {dm} can help verify assumed key relations /determine existing key relations tables. example, tables: want know primary key data_1, can use check_key() function: Mind error message test passed. data_2, column key: see column one table contains values also present another column another table, check_subset() function can used: function important determining column foreign key table. inverse relation? kept mind check_subset() test column c2 unique key table t2. order find (child) table t1 contains column c1 foreign key (parent) table t2 corresponding column c2, following method used: check directions , find unique values c_1 t_1 c_2 t_2, {dm} provides function check_set_equality(): Introducing one table enables us show looks test passed: test passed, return value function first table parameter (invisibly). ensures functions can conveniently used pipe configuration.","code":"data_1 <- tibble(a = c(1, 2, 1), b = c(1, 4, 1), c = c(5, 6, 7)) data_2 <- tibble(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9)) check_key(data_1, a) #> Error in `abort_not_unique_key()` at dm/R/key-helpers.R:64:4: #> ! (`a`) not a unique key of `data_1`. check_key(data_2, a) check_subset(data_1, a, data_2, a) check_subset(data_2, a, data_1, a) #> # A tibble: 1 × 1 #>       a #>   <dbl> #> 1     3 #> Error in `abort_not_subset_of()` at dm/R/key-helpers.R:237:2: #> ! Column (`a`) of table `data_2` contains values (see examples above) that are not present in column (`a`) of table `data_1`. check_key(t2, c2) check_subset(t1, c1, t2, c2) check_set_equality(data_1, a, data_2, a) #> # A tibble: 1 × 1 #>       a #>   <dbl> #> 1     3 #> Error in `abort_sets_not_equal()` at dm/R/key-helpers.R:187:4: #> ! Column (`a`) of table `data_2` contains values (see examples above) that are not present in column (`a`) of table `data_1`. data_3 <- tibble(a = c(2, 1, 2), b = c(4, 5, 6), c = c(7, 8, 9))  check_set_equality(data_1, a, data_3, a)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-low-level.html","id":"testing-cardinalities-between-two-tables","dir":"Articles","previous_headings":"","what":"Testing cardinalities between two tables","title":"Model verification - keys, constraints and normalization","text":"section contains information examples functions check_cardinality_0_n(parent_table, primary_key_column, child_table, foreign_key_column) check_cardinality_1_n(parent_table, primary_key_column, child_table, foreign_key_column) check_cardinality_0_1(parent_table, primary_key_column, child_table, foreign_key_column) check_cardinality_1_1(parent_table, primary_key_column, child_table, foreign_key_column) examine_cardinality(parent_table, primary_key_column, child_table, foreign_key_column) four functions testing specific kind cardinality relation require parent table child table inputs. functions first test requirement fulfilled checking : primary_key_column unique key parent_table set values foreign_key_column subset set values primary_key_column cardinality specifications 0_n, 1_n, 0_1, 1_1 refer expected relation child table parent table. numbers ‘0’, ‘1’ ‘n’ refer number values child table’s column (foreign_key_column) correspond value parent table’s column (primary_key_column). ‘n’ means one context, upper limit. 0_n means, value parent_key_column, number corresponding records child table unrestricted. 1_n means, value parent_key_column least one corresponding record child table. means “surjective” relation child table parent table w.r.t. specified columns, .e. parent table column value exists least one equal child table column value. 0_1 means, value parent_key_column, least zero one value correspond column child table. means “injective” relation child table parent table w.r.t. specified columns, .e. parent table column value addressed multiple times. parent table column values referred . 1_1 means, value parent_key_column, exactly one value correspond child table’s column. means “bijective” (“injective” “surjective”) relation child table parent table w.r.t. specified columns, .e. set values two columns equal duplicates either . Also examine_cardinality() first performs mentioned tests figure , parent-child table relationship criteria met. Subsequently, two checks made determine nature relation (surjective, injective, bijective, none ) two columns.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-low-level.html","id":"examples","dir":"Articles","previous_headings":"Testing cardinalities between two tables","what":"Examples","title":"Model verification - keys, constraints and normalization","text":"Given following three data frames: examples cardinality testing functions can used: examine_cardinality() returns type relation, e.g.: Just like underlying cardinality functions, also inform restrictions cardinality violated:","code":"d1 <- tibble(a = 1:5) d2 <- tibble(c = c(1:5, 5)) d3 <- tibble(c = 1:4) d4 <- tibble(a = c(2:5, 5)) # This does not pass, `c` is not unique key of d2: check_cardinality_0_n(d2, c, d1, a) #> Error in `abort_not_unique_key()` at dm/R/key-helpers.R:64:4: #> ! (`c`) not a unique key of `d2`.  # This passes, multiple values in d2$c are allowed: check_cardinality_0_n(d1, a, d2, c)  # This does not pass, injectivity is violated: check_cardinality_1_1(d1, a, d2, c) #> Error in `abort_not_bijective()` at dm/R/check-cardinalities.R:155:2: #> ! 1..1 cardinality (bijectivity) is not given: Column (`c`) in table `d2` contains duplicate values.  # This passes: check_cardinality_0_1(d1, a, d3, c) examine_cardinality(d1, a, d3, c) #> [1] \"injective mapping (child: 0 or 1 -> parent: 1)\" examine_cardinality(d1, a, d2, c) #> [1] \"surjective mapping (child: 1 to n -> parent: 1)\" examine_cardinality(d1, a, d1, a) #> [1] \"bijective mapping (child: 1 -> parent: 1)\" examine_cardinality(d1, a, d4, a) #> [1] \"generic mapping (child: 0 to n -> parent: 1)\" examine_cardinality(d2, c, d1, a) #> Column (`c`) not a unique key of `d2`."},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-low-level.html","id":"table-surgery","dir":"Articles","previous_headings":"","what":"Table surgery","title":"Model verification - keys, constraints and normalization","text":"relevant functions : decompose_table(.data, new_id_column, ...) reunite_parent_child(child_table, parent_table, id_column) reunite_parent_child_from_list(list_of_parent_child_tables, id_column) first function implements table normalization. existing table split parent table (.e. lookup table) child table (containing observations), linked key column (: new_id_column). Basically, foreign key relation created, pointing new_id_column child table parent table’s corresponding column, can seen parent table’s primary key column. function decompose_table() , can seen following example: new column created, two tables can joined , essentially creating original table. functions inverse operation, .e. join parent child table subsequently drop new_id_column, reunite_parent_child() reunite_parent_child_from_list(). former takes arguments two tables unquoted name ID column, latter takes arguments list two tables plus unquoted name ID column: Currently, functions exist low-level operation tables. plan extend operation dm objects future.","code":"mtcars_tibble <- as_tibble(mtcars) mtcars_tibble #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # … with 22 more rows decomposed_table <- decompose_table(mtcars_tibble, am_gear_carb_id, am, gear, carb) decomposed_table #> $child_table #> # A tibble: 32 × 9 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs am_gear_carb_id #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>           <int> #>  1  21       6  160    110  3.9   2.62  16.5     0               7 #>  2  21       6  160    110  3.9   2.88  17.0     0               7 #>  3  22.8     4  108     93  3.85  2.32  18.6     1               8 #>  4  21.4     6  258    110  3.08  3.22  19.4     1               1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0               2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1               1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0               3 #>  8  24.4     4  147.    62  3.69  3.19  20       1               4 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1               4 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1               5 #> # … with 22 more rows #>  #> $parent_table #> # A tibble: 13 × 4 #>    am_gear_carb_id    am  gear  carb #>              <int> <dbl> <dbl> <dbl> #>  1               7     1     4     4 #>  2               8     1     4     1 #>  3               1     0     3     1 #>  4               2     0     3     2 #>  5               3     0     3     4 #>  6               4     0     4     2 #>  7               5     0     4     4 #>  8               6     0     3     3 #>  9               9     1     4     2 #> 10              10     1     5     2 #> 11              11     1     5     4 #> 12              12     1     5     6 #> 13              13     1     5     8 parent_table <- decomposed_table$parent_table child_table <- decomposed_table$child_table reunite_parent_child(child_table, parent_table, id_column = am_gear_carb_id) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # … with 22 more rows # Shortcut: reunite_parent_child_from_list(decomposed_table, id_column = am_gear_carb_id)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-naming.html","id":"prefixes","dir":"Articles","previous_headings":"","what":"Prefixes","title":"Function naming logic","text":"function takes dm object first argument function constructs dm object objects check_: Certain tests arguments performed error thrown case passed. tests passed, first argument returned invisibly. examine_: function executes checks returns object containing overview results checks. important extended prefixes dm_..._: dm_examine_: function examines several aspects dm object dm_add_: Adds either key constraints new tables dm dm_get_: Retrieves specific piece information dm (often part constituents) dm_rm_: Removes either key constraints tables dm","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-naming.html","id":"suffixes","dir":"Articles","previous_headings":"","what":"Suffixes","title":"Function naming logic","text":"_dm: Validators, checkers, coercers _to_tbl: Data dm processed way tibble produced _candidates: key-candidates calculated presented tibble-form _pk(s): Relates primary key(s) _fk(s): Relates foreign key(s) _tbl: Add/remove/select/rename tibble //within dm object _colors: Relates colors visualization dm object _zoomed: Insert, update, discard zoomed table. combination prefix dm_, indicates first argument dm_zoomed rather dm.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"enabling-dplyr-workflow-within-a-dm","dir":"Articles","previous_headings":"","what":"Enabling {dplyr}-workflow within a dm","title":"Zooming and manipulating tables","text":"“Zooming” table dm means: information stored original dm kept, including originally zoomed table object class dm_zoomed produced, presenting view table transformations need specify table calling select(), mutate() table manipulation functions {dm} provides methods many {dplyr}-verbs dm_zoomed behave way used , affecting zoomed table leaving rest dm untouched. finished transforming table, three options proceed: use dm_update_zoomed() want replace originally zoomed table new table use dm_insert_zoomed() creating new table dm use dm_discard_zoomed() need result want discard employing one first two options, resulting table dm primary foreign keys available tracked originally zoomed table.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Zooming and manipulating tables","text":"much theory, look feel? explore , make use trusted {nycflights13} data.","code":""},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"use-case-1-add-a-new-column-to-an-existing-table","dir":"Articles","previous_headings":"Examples","what":"Use case 1: Add a new column to an existing table","title":"Zooming and manipulating tables","text":"Imagine want column flights, specifying flight left noon . Just like {dplyr}, can tackle mutate(). Let us step step:","code":"library(dm) library(dplyr) flights_dm <- dm_nycflights13() flights_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 flights_zoomed <-   flights_dm %>%   dm_zoom_to(flights) # The print output for a `dm_zoomed` looks very much like that from a normal `tibble`. flights_zoomed #> # Zoomed table: flights #> # A tibble:     1,761 × 19 #>     year month   day dep_time sched_dep_t…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>         <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1    10        3          2359       4     426     437     -11 #>  2  2013     1    10       16          2359      17     447     444       3 #>  3  2013     1    10      450           500     -10     634     648     -14 #>  4  2013     1    10      520           525      -5     813     820      -7 #>  5  2013     1    10      530           530       0     824     829      -5 #>  6  2013     1    10      531           540      -9     832     850     -18 #>  7  2013     1    10      535           540      -5    1015    1017      -2 #>  8  2013     1    10      546           600     -14     645     709     -24 #>  9  2013     1    10      549           600     -11     652     724     -32 #> 10  2013     1    10      550           600     -10     649     703     -14 #> # … with 1,751 more rows, 10 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and #> #   abbreviated variable names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, #> #   ⁴​sched_arr_time, ⁵​arr_delay flights_zoomed_mutate <-   flights_zoomed %>%   mutate(am_pm_dep = if_else(dep_time < 1200, \"am\", \"pm\")) %>%   # in order to see our changes in the output we use `select()` for reordering the columns   select(year:dep_time, am_pm_dep, everything())  flights_zoomed_mutate #> # Zoomed table: flights #> # A tibble:     1,761 × 20 #>     year month   day dep_time am_pm_dep sched_dep…¹ dep_d…² arr_t…³ sched…⁴ #>    <int> <int> <int>    <int> <chr>           <int>   <dbl>   <int>   <int> #>  1  2013     1    10        3 am               2359       4     426     437 #>  2  2013     1    10       16 am               2359      17     447     444 #>  3  2013     1    10      450 am                500     -10     634     648 #>  4  2013     1    10      520 am                525      -5     813     820 #>  5  2013     1    10      530 am                530       0     824     829 #>  6  2013     1    10      531 am                540      -9     832     850 #>  7  2013     1    10      535 am                540      -5    1015    1017 #>  8  2013     1    10      546 am                600     -14     645     709 #>  9  2013     1    10      549 am                600     -11     652     724 #> 10  2013     1    10      550 am                600     -10     649     703 #> # … with 1,751 more rows, 11 more variables: arr_delay <dbl>, #> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>, #> #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, #> #   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time # To update the original `dm` with a new `flights` table we use `dm_update_zoomed()`: updated_flights_dm <-   flights_zoomed_mutate %>%   dm_update_zoomed() # The only difference in the `dm` print output is the increased number of columns updated_flights_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 54 #> Primary keys: 4 #> Foreign keys: 4 # The schematic view of the data model remains unchanged dm_draw(updated_flights_dm)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"use-case-2-creation-of-a-surrogate-key","dir":"Articles","previous_headings":"Examples","what":"Use case 2: Creation of a surrogate key","title":"Zooming and manipulating tables","text":"course action , example, employed create surrogate key table, synthetic simple key replaces compound key. can weather table.","code":"library(tidyr)  weather_zoomed <-   flights_dm %>%   dm_zoom_to(weather) weather_zoomed #> # Zoomed table: weather #> # A tibble:     144 × 15 #>    origin  year month   day  hour  temp  dewp humid wind_…¹ wind_…² wind_…³ #>    <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl> #>  1 EWR     2013     1    10     0  41    32    70.1     230    8.06    NA   #>  2 EWR     2013     1    10     1  39.0  30.0  69.9     210    9.21    NA   #>  3 EWR     2013     1    10     2  39.0  28.9  66.8     230    6.90    NA   #>  4 EWR     2013     1    10     3  39.9  27.0  59.5     270    5.75    NA   #>  5 EWR     2013     1    10     4  41    26.1  55.0     320    6.90    NA   #>  6 EWR     2013     1    10     5  41    26.1  55.0     300   12.7     20.7 #>  7 EWR     2013     1    10     6  39.9  25.0  54.8     280    6.90    17.3 #>  8 EWR     2013     1    10     7  41    25.0  52.6     330    6.90    NA   #>  9 EWR     2013     1    10     8  43.0  25.0  48.7     330    8.06    NA   #> 10 EWR     2013     1    10     9  45.0  23    41.6     320   17.3     26.5 #> # … with 134 more rows, 4 more variables: precip <dbl>, pressure <dbl>, #> #   visib <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​wind_dir, ²​wind_speed, ³​wind_gust # Maybe there is some hidden candidate for a primary key that we overlooked enum_pk_candidates(weather_zoomed) #> # A tibble: 15 × 3 #>    columns    candidate why                                                 #>    <keys>     <lgl>     <chr>                                               #>  1 origin     FALSE     has duplicate values: EWR (48), JFK (48), LGA (48)  #>  2 year       FALSE     has duplicate values: 2013 (144)                    #>  3 month      FALSE     has duplicate values: 1 (72), 2 (72)                #>  4 day        FALSE     has duplicate values: 10 (144)                      #>  5 hour       FALSE     has duplicate values: 0 (6), 1 (6), 2 (6), 3 (6), … #>  6 temp       FALSE     has duplicate values: 44.06 (12), 41.00 (8), 44.96… #>  7 dewp       FALSE     has duplicate values: 21.92 (16), 24.98 (16), 6.98… #>  8 humid      FALSE     has duplicate values: 53.71 (4), 56.56 (4), 32.53 … #>  9 wind_dir   FALSE     has duplicate values: 320 (25), 330 (17), 310 (15)… #> 10 wind_speed FALSE     has duplicate values: 6.90468 (20), 8.05546 (19), … #> 11 wind_gust  FALSE     has 123 missing values, and duplicate values: 23.0… #> 12 precip     FALSE     has duplicate values: 0 (144)                       #> 13 pressure   FALSE     has duplicate values: 1028.9 (6), 1029.0 (5), 1032… #> 14 visib      FALSE     has duplicate values: 10 (144)                      #> 15 time_hour  FALSE     has duplicate values: 2013-01-10 00:00:00 (3), 201… # Seems we have to construct a column with unique values # This can be done by combining column `origin` with `time_hour`, if the latter # is converted to a single time zone first; all within the `dm`: weather_zoomed_mutate <-   weather_zoomed %>%   # first convert all times to the same time zone:   mutate(time_hour_fmt = format(time_hour, tz = \"UTC\")) %>%   # paste together as character the airport code and the time   unite(\"origin_slot_id\", origin, time_hour_fmt) %>%   select(origin_slot_id, everything()) # check if we the result is as expected: enum_pk_candidates(weather_zoomed_mutate) %>% filter(candidate) #> # A tibble: 1 × 3 #>   columns        candidate why   #>   <keys>         <lgl>     <chr> #> 1 origin_slot_id TRUE      \"\" flights_upd_weather_dm <-   weather_zoomed_mutate %>%   dm_update_zoomed() %>%   dm_add_pk(weather, origin_slot_id) flights_upd_weather_dm #> ── Metadata ─────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 3 # creating the coveted FK relation between `flights` and `weather` extended_flights_dm <-   flights_upd_weather_dm %>%   dm_zoom_to(flights) %>%   mutate(time_hour_fmt = format(time_hour, tz = \"UTC\")) %>%   # need to keep `origin` as FK to airports, so `remove = FALSE`   unite(\"origin_slot_id\", origin, time_hour_fmt, remove = FALSE) %>%   dm_update_zoomed() %>%   dm_add_fk(flights, origin_slot_id, weather) extended_flights_dm %>% dm_draw()"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"use-case-3-disentangle-dm","dir":"Articles","previous_headings":"Examples","what":"Use case 3: Disentangle dm","title":"Zooming and manipulating tables","text":"look dm created dm_nycflights13(cycle = TRUE), see two columns flights relate one table, airports. One column stands departure airport arrival airport. generates cycle leads failures many operations work cycle-free data models, dm_flatten_to_tbl(), dm_filter() dm_wrap_to_tbl(). cases, can beneficial “disentangle” dm duplicating referred table. One way {dm}-framework follows: future update, provide convenient way “disentangle” dm objects, individual steps done automatically.","code":"dm_draw(dm_nycflights13(cycle = TRUE)) disentangled_flights_dm <-   dm_nycflights13(cycle = TRUE) %>%   # zooming and immediately inserting essentially creates a copy of the original table   dm_zoom_to(airports) %>%   # reinserting the `airports` table under the name `destination`   dm_insert_zoomed(\"destination\") %>%   # renaming the originally zoomed table   dm_rename_tbl(origin = airports) %>%   # Key relations are also duplicated, so the wrong ones need to be removed   dm_rm_fk(flights, dest, origin) %>%   dm_rm_fk(flights, origin, destination) dm_draw(disentangled_flights_dm)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"use-case-4-add-summary-table-to-dm","dir":"Articles","previous_headings":"Examples","what":"Use case 4: Add summary table to dm","title":"Zooming and manipulating tables","text":"example adding summary table new table dm (FK-relations taken care automatically):","code":"dm_with_summary <-   flights_dm %>%   dm_zoom_to(flights) %>%   count(origin, carrier) %>%   dm_insert_zoomed(\"dep_carrier_count\") dm_draw(dm_with_summary)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"use-case-5-joining-tables","dir":"Articles","previous_headings":"Examples","what":"Use case 5: Joining tables","title":"Zooming and manipulating tables","text":"like join columns one table another, can make use one join-methods dm_zoomed. addition usual arguments {dplyr}-joins, supplying select argument can specify columns RHS-table want included join. syntax please see example . LHS-table join always zoomed table.","code":"joined_flights_dm <-   flights_dm %>%   dm_zoom_to(flights) %>%   # let's first reduce the number of columns of flights   select(-dep_delay:-arr_delay, -air_time:-time_hour) %>%   # in the {dm}-method for the joins you can specify which columns you want to add to the zoomed table   left_join(planes, select = c(tailnum, plane_type = type)) %>%   dm_insert_zoomed(\"flights_plane_type\") # this is how the table looks now joined_flights_dm$flights_plane_type #> # A tibble: 1,761 × 11 #>     year month   day dep_time sched_d…¹ carrier flight tailnum origin dest  #>    <int> <int> <int>    <int>     <int> <chr>    <int> <chr>   <chr>  <chr> #>  1  2013     1    10        3      2359 B6         727 N571JB  JFK    BQN   #>  2  2013     1    10       16      2359 B6         739 N564JB  JFK    PSE   #>  3  2013     1    10      450       500 US        1117 N171US  EWR    CLT   #>  4  2013     1    10      520       525 UA        1018 N35204  EWR    IAH   #>  5  2013     1    10      530       530 UA         404 N815UA  LGA    IAH   #>  6  2013     1    10      531       540 AA        1141 N5EAAA  JFK    MIA   #>  7  2013     1    10      535       540 B6         725 N784JB  JFK    BQN   #>  8  2013     1    10      546       600 B6         380 N337JB  EWR    BOS   #>  9  2013     1    10      549       600 EV        6055 N19554  LGA    IAD   #> 10  2013     1    10      550       600 US        2114 N740UW  LGA    BOS   #> # … with 1,751 more rows, 1 more variable: plane_type <chr>, and #> #   abbreviated variable name ¹​sched_dep_time # also here, the FK-relations are transferred to the new table dm_draw(joined_flights_dm)"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"tip-accessing-the-zoomed-table","dir":"Articles","previous_headings":"Examples","what":"Tip: Accessing the zoomed table","title":"Zooming and manipulating tables","text":"point, can retrieve zoomed table calling pull_tbl() dm_zoomed. use last example :","code":"flights_dm %>%   dm_zoom_to(flights) %>%   select(-dep_delay:-arr_delay, -air_time:-time_hour) %>%   left_join(planes, select = c(tailnum, plane_type = type)) %>%   pull_tbl() #> # A tibble: 1,761 × 11 #>     year month   day dep_time sched_d…¹ carrier flight tailnum origin dest  #>    <int> <int> <int>    <int>     <int> <chr>    <int> <chr>   <chr>  <chr> #>  1  2013     1    10        3      2359 B6         727 N571JB  JFK    BQN   #>  2  2013     1    10       16      2359 B6         739 N564JB  JFK    PSE   #>  3  2013     1    10      450       500 US        1117 N171US  EWR    CLT   #>  4  2013     1    10      520       525 UA        1018 N35204  EWR    IAH   #>  5  2013     1    10      530       530 UA         404 N815UA  LGA    IAH   #>  6  2013     1    10      531       540 AA        1141 N5EAAA  JFK    MIA   #>  7  2013     1    10      535       540 B6         725 N784JB  JFK    BQN   #>  8  2013     1    10      546       600 B6         380 N337JB  EWR    BOS   #>  9  2013     1    10      549       600 EV        6055 N19554  LGA    IAD   #> 10  2013     1    10      550       600 US        2114 N740UW  LGA    BOS   #> # … with 1,751 more rows, 1 more variable: plane_type <chr>, and #> #   abbreviated variable name ¹​sched_dep_time"},{"path":"https://dm.cynkra.com/dev/articles/tech-dm-zoom.html","id":"possible-pitfalls-and-caveats","dir":"Articles","previous_headings":"Examples","what":"Possible pitfalls and caveats","title":"Zooming and manipulating tables","text":"Currently, {dplyr}-verbs method dm_zoomed object, aware cases still necessary resort extracting one tables dm reinserting transformed version back dm object. supported functions : group_by(), ungroup(), summarise(), mutate(), transmute(), filter(), select(), relocate(), rename(), distinct(), arrange(), slice(), left_join(), inner_join(), full_join(), right_join(), semi_join(), anti_join(). true {tidyr}-functions. Methods provided : unite() separate(). might situations like key relations remain intact, dropped nevertheless. rigid logic implemented, drop key associated column acted upon e.g. mutate() call. cases, key relations need re-established finishing manipulations. implemented {dplyr}-verb, logic tracking key relations tables. {dm} version 0.2.4 tried track columns detailed manner. become increasingly difficult, especially dplyr::across(). {dm} 0.2.5, give responsibility {dm} user: Now columns tracked whose names remain resulting table. Affected changes methods : mutate(), transmute(), distinct(). using one functions, aware want replace key column column different content name, column automatically become key column.","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"tables","dir":"Articles > Wip","previous_headings":"","what":"Tables","title":"Updating tables and dm objects","text":"dplyr, operations tables dplyr generally transient ephemeral. Resulting table objects must stored new object, otherwise lost. operations default return new table object disconnected original.","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"operations","dir":"Articles > Wip","previous_headings":"Tables","what":"Operations","title":"Updating tables and dm objects","text":"operations modeled existing database statements, exception new “patch”. insert new rows — error keys already exist, similar tibble::add_row(). update values — overrides existing values. (Similar https://github.com/tidyverse/tidyr/issues/183) patch values — like update, replaces missing values (Also similar https://github.com/tidyverse/tidyr/issues/183) upsert — update insert depending presence/absence keys operations either take multiple named inputs single unnamed data frame. Additional restrictions options may apply backends, specified arguments start dot. extensibility, named inputs start dot silently discarded. operations require specification .key argument. Unlike joins, .key argument mandatory, RHS column names must subset LHS column names. Keys must name target input. table container knows keys (e.g., grouped data frames data.table), .key may omitted. target table source columns/table must compatible: Source extra tables columns. Key columns must present source.","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"mutable-backends","dir":"Articles > Wip","previous_headings":"Tables","what":"Mutable backends","title":"Updating tables and dm objects","text":"mutable backends, notably databases, Google sheets data.table, permit -place update source data. Update operations mutable backends optionally allow updating source data. potentially destructive exception dplyr guarantees, -place updates must “opt ”. default result always “lazy” table. allows previewing results update operation materializing. backends, following additional operations useful: delete — remove rows match keys, variant anti_join() truncate — remove rows Databases require data already database ask user supply copy argument. mutable backends, update operations return input, invisibly, update carried -place. Challenges: make compatible sql_render()?","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"dm","dir":"Articles > Wip","previous_headings":"","what":"dm","title":"Updating tables and dm objects","text":"Operations dm object generally transient ephemeral. Resulting dm table objects must stored new object, otherwise lost.","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"design","dir":"Articles > Wip","previous_headings":"dm","what":"Design","title":"Updating tables and dm objects","text":"records tables source dm appended/updated/upserted/removed/replaced/… target dm source source subset target tables check integrity constraints still valid running compare -state transactions scope, caller can use DBI::withTransaction() fixed set operations, op knows “direction”","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"logic-of-operation","dir":"Articles > Wip","previous_headings":"dm","what":"Logic of operation","title":"Updating tables and dm objects","text":"check compatibility persist tables one one, topologically sorted put back dm necessary","code":""},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-insert.html","id":"api-draft","dir":"Articles > Wip","previous_headings":"dm","what":"API draft","title":"Updating tables and dm objects","text":"","code":"dm_insert <- function(target_dm, dm, ..., dry_run = FALSE) {   check_dots_empty()    dm_persist(target_dm, dm, operation = tbl_insert, top_down = TRUE, dry_run = dry_run) }  dm_update <- function(target_dm, dm, ..., dry_run = FALSE) {   check_dots_empty()    dm_persist(target_dm, dm, operation = tbl_update, top_down = TRUE, dry_run = dry_run) }  dm_upsert <- function(target_dm, dm, ..., dry_run = FALSE) {   check_dots_empty()    dm_persist(target_dm, dm, operation = tbl_upsert, top_down = TRUE, dry_run = dry_run) }  dm_delete <- function(target_dm, dm, ..., dry_run = FALSE) {   check_dots_empty()    dm_persist(target_dm, dm, operation = tbl_delete, top_down = FALSE, dry_run = dry_run) }  dm_truncate <- function(target_dm, dm, ..., dry_run = FALSE) {   check_dots_empty()    dm_persist(target_dm, dm, operation = tbl_truncate, top_down = FALSE, dry_run = dry_run) }  dm_persist <- function(target_dm, dm, operation, top_down, dry_run = FALSE) {   dm_check_persist(target_dm, dm)    dm_run_persist(target_dm, dm, operation, top_down, dry_run) }  dm_check_persist <- function(target_dm, dm) {   check_not_zoomed(target_dm)   check_not_zoomed(dm)    check_same_src(target_dm, dm)   walk2(dm_get_tables(target_dm), dm_get_tables(dm), check_columns_superset)   check_keys_compatible(target_dm, dm) }  dm_run_persist <- function(target_dm, dm, operation, top_down, dry_run) {   # topologically sort tables   # run operation(target_tbl, source_tbl, dry_run = dry_run) for each table   # operation() always returns tbl, only need to patch if not the same tbl   # new_tables is list of non-NULL operation() values    target_dm %>%     dm_patch_tbl(!!!new_tables) }  dm_patch_tbl <- function(dm, ...) {   check_not_zoomed(dm)    new_tables <- list2(...)    # FIXME: Better error message for unknown tables    def <- dm_get_def(dm)   idx <- match(names(new_tables), def$table)   def[idx, \"data\"] <- unname(new_tables)   new_dm3(def) }"},{"path":"https://dm.cynkra.com/dev/articles/wip/dm-readme-old.html","id":"background","dir":"Articles > Wip","previous_headings":"","what":"Background","title":"","text":"Relational databases flat tables, like data frames spreadsheets, present data fundamentally different ways. data frames spreadsheets, data presented together one large table many rows columns. means data accessible one location disadvantage values may repeated multiple times, resulting bloated tables redundant data. worst case scenario, data frame may many rows columns single value different row. Relational databases, hand, keep data together split multiple smaller tables. separation sub-tables several advantages: information stored , avoiding repetition conserving memory information updated one place, improving consistency avoiding errors may result updating value multiple locations information organized topic segmented smaller tables easier handle Separation data, thus, helps data quality, explains continuing popularity relational databases production-level data management. downside approach harder merge together information different data sources identify entities refer object, common task modeling plotting data. mapped uniquely, entities need designated keys, separate tables collated together process called joining. R, already exist packages support handling inter-linked tables code complex requires multiple command sequences. goal {dm} package simplify data management processes R keeping advantages relational data models core concept splitting one table multiple tables. way, can best worlds: manage data collection linked tables, flatten multiple tables one analysis {dplyr} packages, -needed basis. Although {dm} built upon relational data models, database . can work transparently relational database systems -memory data, copy data databases.","code":""},{"path":"https://dm.cynkra.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tobias Schieferdecker. Author. Kirill Müller. Author, maintainer. Antoine Fabri. Contributor. Darko Bergant. Author. Katharina Brunner. Contributor. James Wondrasek. Contributor. Indrajeet Patil. Contributor. Maëlle Salmon. Contributor. . Funder. . Funder, copyright holder.","code":""},{"path":"https://dm.cynkra.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schieferdecker T, Müller K, Bergant D (2023). dm: Relational Data Models. https://dm.cynkra.com/, https://github.com/cynkra/dm.","code":"@Manual{,   title = {dm: Relational Data Models},   author = {Tobias Schieferdecker and Kirill Müller and Darko Bergant},   year = {2023},   note = {https://dm.cynkra.com/, https://github.com/cynkra/dm}, }"},{"path":"https://dm.cynkra.com/dev/index.html","id":"dm","dir":"","previous_headings":"","what":"Relational Data Models","title":"Relational Data Models","text":"using multiple data frames database tables R? Organize dm. Use data analysis today. Build data models tomorrow. Deploy data models organization’s Relational Database Management System (RDBMS) day .","code":""},{"path":"https://dm.cynkra.com/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Relational Data Models","text":"dm bridges gap data pipeline individual data frames relational databases. ’s grammar joined tables provides consistent set verbs consuming, creating, deploying relational data models. individual researchers, broadens scope datasets can work work . organizations, enables teams quickly efficiently create share large, complex datasets. dm objects encapsulate relational data models constructed local data frames lazy tables connected RDBMS. dm objects support full suite dplyr data manipulation verbs along additional methods constructing verifying relational data models, including key selection, key creation, rigorous constraint checking. data model complete, dm provides methods deploying RDBMS. allows scale datasets fit memory databases billions rows.","code":""},{"path":"https://dm.cynkra.com/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Relational Data Models","text":"dm makes easy bring existing relational data model R session. dm object behaves like named list tables requires little change incorporate within existing workflows. dm interface behavior modeled dplyr, may already familiar many verbs. dm also offers: visualization help understand relationships entities represented tables simpler joins “know” tables related, including “flatten” operation automatically follows keys performs column name disambiguation consistency constraint checks help understand (fix) limitations data ’s just tip iceberg. See Getting started hit ground running explore features.","code":""},{"path":"https://dm.cynkra.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Relational Data Models","text":"latest stable version {dm} package can obtained CRAN command latest development version {dm} can installed R-universe: GitHub:","code":"install.packages(\"dm\") # Enable repository from cynkra options(   repos = c(     cynkra = \"https://cynkra.r-universe.dev\",     CRAN = \"https://cloud.r-project.org\"   ) ) # Download and install dm in R install.packages('dm') # install.packages(\"devtools\") devtools::install_github(\"cynkra/dm\")"},{"path":"https://dm.cynkra.com/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Relational Data Models","text":"Create dm object (see Getting started details). dm named list tables: Visualize relationships time:  Simple joins: Check consistency: Learn Getting started article.","code":"library(dm) dm <- dm_nycflights13() dm #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 names(dm) #> [1] \"airlines\" \"airports\" \"flights\"  \"planes\"   \"weather\" nrow(dm$airports) #> [1] 86 dm$flights %>%   count(origin) #> # A tibble: 3 × 2 #>   origin     n #>   <chr>  <int> #> 1 EWR      641 #> 2 JFK      602 #> 3 LGA      518 dm %>%   dm_draw() dm %>%   dm_flatten_to_tbl(flights) #> Renaming ambiguous columns: %>% #>   dm_rename(flights, flights.year = year) %>% #>   dm_rename(flights, flights.month = month) %>% #>   dm_rename(flights, flights.day = day) %>% #>   dm_rename(flights, flights.hour = hour) %>% #>   dm_rename(airlines, airlines.name = name) %>% #>   dm_rename(airports, airports.name = name) %>% #>   dm_rename(planes, planes.year = year) %>% #>   dm_rename(weather, weather.year = year) %>% #>   dm_rename(weather, weather.month = month) %>% #>   dm_rename(weather, weather.day = day) %>% #>   dm_rename(weather, weather.hour = hour) #> # A tibble: 1,761 × 48 #>    flight… fligh… fligh… dep_t… sched… dep_d… arr_t… sched… arr_d… carri… flight #>      <int>  <int>  <int>  <int>  <int>  <dbl>  <int>  <int>  <dbl> <chr>   <int> #>  1    2013      1     10      3   2359      4    426    437    -11 B6        727 #>  2    2013      1     10     16   2359     17    447    444      3 B6        739 #>  3    2013      1     10    450    500    -10    634    648    -14 US       1117 #>  4    2013      1     10    520    525     -5    813    820     -7 UA       1018 #>  5    2013      1     10    530    530      0    824    829     -5 UA        404 #>  6    2013      1     10    531    540     -9    832    850    -18 AA       1141 #>  7    2013      1     10    535    540     -5   1015   1017     -2 B6        725 #>  8    2013      1     10    546    600    -14    645    709    -24 B6        380 #>  9    2013      1     10    549    600    -11    652    724    -32 EV       6055 #> 10    2013      1     10    550    600    -10    649    703    -14 US       2114 #> # … with 1,751 more rows, and 37 more variables: tailnum <chr>, origin <chr>, #> #   dest <chr>, air_time <dbl>, distance <dbl>, flights.hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, airlines.name <chr>, airports.name <chr>, #> #   lat <dbl>, lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, #> #   planes.year <int>, type <chr>, manufacturer <chr>, model <chr>, #> #   engines <int>, seats <int>, speed <int>, engine <chr>, weather.year <int>, #> #   weather.month <int>, weather.day <int>, weather.hour <int>, temp <dbl>, … dm %>%   dm_examine_constraints() #> ! Unsatisfied constraints: #> • Table `flights`: foreign key `tailnum` into table `planes`: values of `flights$tailnum` not in `planes$tailnum`: N725MQ (6), N537MQ (5), N722MQ (5), N730MQ (5), N736MQ (5), …"},{"path":"https://dm.cynkra.com/dev/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Relational Data Models","text":"encounter clear bug, please file issue minimal reproducible example GitHub. questions discussion, please use community.rstudio.com. License: MIT © cynkra GmbH. Funded :  Please note ‘dm’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if column(s) can be used as keys — check_key","title":"Check if column(s) can be used as keys — check_key","text":"check_key() accepts data frame , optionally, columns. throws error specified columns unique key data frame. columns given ellipsis key, data frame returned silently, can used piping.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if column(s) can be used as keys — check_key","text":"","code":"check_key(x, ..., .data = deprecated())"},{"path":"https://dm.cynkra.com/dev/reference/check_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if column(s) can be used as keys — check_key","text":"x data frame whose columns tested key properties. ... names columns checked, processed dplyr::select(). omitted, columns checked. .data Deprecated.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if column(s) can be used as keys — check_key","text":"Returns x, invisibly, check passed. Otherwise error thrown reason explained.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if column(s) can be used as keys — check_key","text":"","code":"data <- tibble::tibble(a = c(1, 2, 1), b = c(1, 4, 1), c = c(5, 6, 7)) # this is failing: try(check_key(data, a, b)) #> Error in abort_not_unique_key(x_label, orig_names) :  #>   (`a`, `b`) not a unique key of `data`.  # this is passing: check_key(data, a, c) check_key(data)"},{"path":"https://dm.cynkra.com/dev/reference/check_set_equality.html","id":null,"dir":"Reference","previous_headings":"","what":"Check column values for set equality — check_set_equality","title":"Check column values for set equality — check_set_equality","text":"check_set_equality() wrapper check_subset(). tests one table subset another vice versa, .e., sets . , throws error.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_set_equality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check column values for set equality — check_set_equality","text":"","code":"check_set_equality(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )"},{"path":"https://dm.cynkra.com/dev/reference/check_set_equality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check column values for set equality — check_set_equality","text":"x, y data frame lazy table. ... dots future extensions must empty. x_select, y_select Key columns restrict check, processed dplyr::select(). by_position Set TRUE ignore column names match position instead. default means matching name, use x_select /y_select align names.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_set_equality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check column values for set equality — check_set_equality","text":"Returns x, invisibly, check passed. Otherwise error thrown reason explained.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_set_equality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check column values for set equality — check_set_equality","text":"","code":"data_1 <- tibble::tibble(a = c(1, 2, 1), b = c(1, 4, 1), c = c(5, 6, 7)) data_2 <- tibble::tibble(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9)) # this is failing: try(check_set_equality(data_1, data_2, x_select = a, y_select = a)) #> # A tibble: 1 × 1 #>       a #>   <dbl> #> 1     3 #> Error in abort_sets_not_equal(map_chr(catchers, conditionMessage)) :  #>   Column (`a`) of table `data_2` contains values (see examples above) that are not present in column (`a`) of table `data_1`.  data_3 <- tibble::tibble(a = c(2, 1, 2), b = c(4, 5, 6), c = c(7, 8, 9)) # this is passing: check_set_equality(data_1, data_3, x_select = a, y_select = a) # this is still failing: try(check_set_equality(data_2, data_3)) #> # A tibble: 3 × 3 #>       a     b     c #>   <dbl> <dbl> <dbl> #> 1     1     4     7 #> 2     2     5     8 #> 3     3     6     9 #> # A tibble: 3 × 3 #>       a     b     c #>   <dbl> <dbl> <dbl> #> 1     2     4     7 #> 2     1     5     8 #> 3     2     6     9 #> Error in abort_sets_not_equal(map_chr(catchers, conditionMessage)) :  #>   Columns (`a`, `b`, `c`) of table `data_2` contain values (see examples above) that are not present in columns (`a`, `b`, `c`) of table `data_3`. #>   Columns (`a`, `b`, `c`) of table `data_3` contain values (see examples above) that are not present in columns (`a`, `b`, `c`) of table `data_2`."},{"path":"https://dm.cynkra.com/dev/reference/check_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check column values for subset — check_subset","title":"Check column values for subset — check_subset","text":"check_subset() tests x subset y. convenience, x_select y_select arguments allow restricting check set key columns without affecting return value.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check column values for subset — check_subset","text":"","code":"check_subset(x, y, ..., x_select = NULL, y_select = NULL, by_position = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/check_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check column values for subset — check_subset","text":"x, y data frame lazy table. ... dots future extensions must empty. x_select, y_select Key columns restrict check, processed dplyr::select(). by_position Set TRUE ignore column names match position instead. default means matching name, use x_select /y_select align names.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check column values for subset — check_subset","text":"Returns x, invisibly, check passed. Otherwise error thrown reason explained.","code":""},{"path":"https://dm.cynkra.com/dev/reference/check_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check column values for subset — check_subset","text":"","code":"data_1 <- tibble::tibble(a = c(1, 2, 1), b = c(1, 4, 1), c = c(5, 6, 7)) data_2 <- tibble::tibble(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9)) # this is passing: check_subset(data_1, data_2, x_select = a, y_select = a)  # this is failing: try(check_subset(data_2, data_1)) #> # A tibble: 3 × 3 #>       a     b     c #>   <dbl> <dbl> <dbl> #> 1     1     4     7 #> 2     2     5     8 #> 3     3     6     9 #> Error in abort_not_subset_of(x_label, colnames(x), y_label, colnames(y)) :  #>   Columns (`a`, `b`, `c`) of table `data_2` contain values (see examples above) that are not present in columns (`a`, `b`, `c`) of table `data_1`."},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy data model to data source — copy_dm_to","title":"Copy data model to data source — copy_dm_to","text":"copy_dm_to() takes dplyr::src_dbi object DBI::DBIConnection object first argument dm object second argument. latter copied former. default create temporary tables, set temporary = FALSE create permanent tables. Unless set_key_constraints FALSE, primary key constraints set databases, addition foreign key constraints set MSSQL Postgres databases.","code":""},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy data model to data source — copy_dm_to","text":"","code":"copy_dm_to(   dest,   dm,   ...,   types = NULL,   overwrite = NULL,   indexes = NULL,   unique_indexes = NULL,   set_key_constraints = TRUE,   unique_table_names = NULL,   table_names = NULL,   temporary = TRUE,   schema = NULL,   progress = NA,   copy_to = NULL )"},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy data model to data source — copy_dm_to","text":"dest object class \"src\" \"DBIConnection\". dm dm object. ... Passed dplyr::copy_to() function specified copy_to argument. overwrite, types, indexes, unique_indexes Must remain NULL. set_key_constraints TRUE mirror dm primary foreign key constraints database create unique indexes. Set FALSE data model currently satisfy primary foreign key constraints. unique_table_names Deprecated. table_names Desired names tables dest; names within dm remain unchanged. Can NULL, named character vector, function one-sided formula. left NULL (default), names determined automatically depending temporary argument: temporary = TRUE (default): unique table names based names tables dm created. temporary = FALSE: table names dm used names tables dest. function one-sided formula, table_names converted function using rlang::as_function(). function called unquoted table names dm object argument. output function processed DBI::dbQuoteIdentifier(), result vector identifiers length original table names. Use variant table_names = ~ DBI::SQL(paste0(\"schema_name\", \".\", .x)) specify schema tables. Use table_names = identity temporary = TRUE avoid giving temporary tables unique names. named character vector, names vector need correspond table names dm, values desired names dest. value processed DBI::dbQuoteIdentifier(), result vector identifiers length original table names. Use qualified names corresponding database's syntax specify e.g. database schema tables. temporary TRUE, temporary tables created. tables vanish disconnecting database. schema Name schema copy dm . schema provided, error thrown temporary = FALSE table_names NULL. DBMS supported. progress Whether display progress bar, NA (default) hide non-interactive mode, show interactive mode. Requires 'progress' package. copy_to default, dplyr::copy_to() called upload individual tables target data source. argument allows overriding standard behavior cases default work expected, spatial data frames tables special data types. NULL, argument processed rlang::as_function().","code":""},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy data model to data source — copy_dm_to","text":"dm object given src table names input dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy data model to data source — copy_dm_to","text":"tables overwritten; passing overwrite = TRUE function give error. Types determined separately table, setting types argument also throw error. arguments included signature avoid passing via ... ellipsis.","code":""},{"path":"https://dm.cynkra.com/dev/reference/copy_dm_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy data model to data source — copy_dm_to","text":"","code":"con <- DBI::dbConnect(RSQLite::SQLite())  # Copy to temporary tables, unique table names by default: temp_dm <- copy_dm_to(   con,   dm_nycflights13(),   set_key_constraints = FALSE )  # Persist, explicitly specify table names: persistent_dm <- copy_dm_to(   con,   dm_nycflights13(),   temporary = FALSE,   table_names = ~ paste0(\"flights_\", .x) ) dbplyr::remote_name(persistent_dm$planes) #> <IDENT> `flights_planes`  DBI::dbDisconnect(con)"},{"path":"https://dm.cynkra.com/dev/reference/db_schema_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a schema on a database — db_schema_create","title":"Create a schema on a database — db_schema_create","text":"db_schema_create() creates schema database.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a schema on a database — db_schema_create","text":"","code":"db_schema_create(con, schema, ...)"},{"path":"https://dm.cynkra.com/dev/reference/db_schema_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a schema on a database — db_schema_create","text":"con object class \"src\" \"DBIConnection\". schema Class character SQL (cf. Details), name schema ... Passed individual methods.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a schema on a database — db_schema_create","text":"NULL invisibly.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a schema on a database — db_schema_create","text":"Methods available DBMS. error thrown schema name already exists. argument schema (dbname MSSQL) can provided SQL objects. Keep mind, case assumed already correctly quoted identifiers using DBI::dbQuoteIdentifier(). Additional arguments : dbname: supported MSSQL. Create schema different database connected MSSQL-server; default: database addressed con.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/db_schema_drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a schema from a database — db_schema_drop","title":"Remove a schema from a database — db_schema_drop","text":"db_schema_drop() deletes schema database. certain DBMS possible force removal non-empty schema, see .","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a schema from a database — db_schema_drop","text":"","code":"db_schema_drop(con, schema, force = FALSE, ...)"},{"path":"https://dm.cynkra.com/dev/reference/db_schema_drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a schema from a database — db_schema_drop","text":"con object class \"src\" \"DBIConnection\". schema Class character SQL (cf. Details), name schema force Boolean, default FALSE. Set TRUE drop schema objects contains . Currently supported Postgres. ... Passed individual methods.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a schema from a database — db_schema_drop","text":"NULL invisibly.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_drop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove a schema from a database — db_schema_drop","text":"Methods available DBMS. error thrown schema name exists. argument schema (dbname MSSQL) can provided SQL objects. Keep mind, case assumed already correctly quoted identifiers. Additional arguments : dbname: supported MSSQL. Remove schema different database connected MSSQL-server; default: database addressed con.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/db_schema_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for existence of a schema on a database — db_schema_exists","title":"Check for existence of a schema on a database — db_schema_exists","text":"db_schema_exists() checks, schema exists database.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for existence of a schema on a database — db_schema_exists","text":"","code":"db_schema_exists(con, schema, ...)"},{"path":"https://dm.cynkra.com/dev/reference/db_schema_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for existence of a schema on a database — db_schema_exists","text":"con object class \"src\" \"DBIConnection\". schema Class character SQL, name schema ... Passed individual methods.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for existence of a schema on a database — db_schema_exists","text":"boolean: TRUE schema exists, FALSE otherwise.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for existence of a schema on a database — db_schema_exists","text":"Methods available DBMS. Additional arguments : dbname: supported MSSQL. Check schema exists different database connected MSSQL-server; default: database addressed con.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/db_schema_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List schemas on a database — db_schema_list","title":"List schemas on a database — db_schema_list","text":"db_schema_list() lists available schemas database.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List schemas on a database — db_schema_list","text":"","code":"db_schema_list(con, include_default = TRUE, ...)"},{"path":"https://dm.cynkra.com/dev/reference/db_schema_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List schemas on a database — db_schema_list","text":"con object class \"src\" \"DBIConnection\". include_default Boolean, TRUE (default), also default schema database included result ... Passed individual methods.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List schemas on a database — db_schema_list","text":"tibble following columns: schema_name names schemas, schema_owner schema owner names.","code":""},{"path":"https://dm.cynkra.com/dev/reference/db_schema_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List schemas on a database — db_schema_list","text":"Methods available DBMS. Additional arguments : dbname: supported MSSQL. List schemas different database connected MSSQL-server; default: database addressed con.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose a table into two linked tables — decompose_table","title":"Decompose a table into two linked tables — decompose_table","text":"Perform table surgery extracting 'parent table' table, linking original table new table key, returning tables. decompose_table() accepts data frame, name 'ID column' newly created, names columns extracted new data frame. creates 'parent table', consists columns specified ellipsis, new 'ID column'. removes columns original table, now called 'child table, adds 'ID column'.","code":""},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose a table into two linked tables — decompose_table","text":"","code":"decompose_table(.data, new_id_column, ...)"},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompose a table into two linked tables — decompose_table","text":".data Data frame columns ... extracted. new_id_column Name identifier column (primary key column) parent table. column name also added 'child table'. ... columns extracted .data. One unquoted expressions separated commas. can treat variable names positions, can use expressions like x:y select ranges variables. arguments ... automatically quoted evaluated context column names represent column positions. also support unquoting splicing. See vignette(\"programming\") introduction concepts. See select helpers details, examples tidyselect helpers, starts_with(), everything(), ...","code":""},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompose a table into two linked tables — decompose_table","text":"named list length two: entry \"child_table\": child table column new_id_column referring column parent_table, entry \"parent_table\": \"lookup table\" child_table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Decompose a table into two linked tables — decompose_table","text":"function marked \"experimental\" seems useful applied table dm object. Changing interface later seems harmless functions likely used interactively.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/decompose_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompose a table into two linked tables — decompose_table","text":"","code":"decomposed_table <- decompose_table(mtcars, new_id, am, gear, carb) decomposed_table$child_table #>     mpg cyl  disp  hp drat    wt  qsec vs new_id #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0      7 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0      7 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1      8 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1      1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0      2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1      1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0      3 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1      4 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1      4 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1      5 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1      5 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0      6 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0      6 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0      6 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0      3 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0      3 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0      3 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1      8 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1      9 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1      8 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1      1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0      2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0      2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0      3 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0      2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1      8 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0     10 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1     10 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0     11 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0     12 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0     13 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1      9 decomposed_table$parent_table #>                   new_id am gear carb #> Mazda RX4              7  1    4    4 #> Datsun 710             8  1    4    1 #> Hornet 4 Drive         1  0    3    1 #> Hornet Sportabout      2  0    3    2 #> Duster 360             3  0    3    4 #> Merc 240D              4  0    4    2 #> Merc 280               5  0    4    4 #> Merc 450SE             6  0    3    3 #> Honda Civic            9  1    4    2 #> Porsche 914-2         10  1    5    2 #> Ford Pantera L        11  1    5    4 #> Ferrari Dino          12  1    5    6 #> Maserati Bora         13  1    5    8"},{"path":"https://dm.cynkra.com/dev/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"functions deprecated favor better alternatives. functions cdm_ prefix identical alternative dm_ prefix. sql_schema_*() functions replaced corresponding db_schema_*() functions. dm_join_to_tbl() deprecated favor dm_flatten_to_tbl(). dm_is_referenced() soft-deprecated, use information returned dm_get_all_fks() instead. dm_get_referencing_tables() soft-deprecated, use information returned dm_get_all_fks() instead. validate_dm() replaced dm_validate() consistency. dm_add_tbl deprecated dm 1.0.0, functionality offered dm() .name_repair = \"unique\". dm_bind()  deprecated dm 1.0.0, functionality offered dm(). dm_squash_to_tbl()  deprecated dm 1.0.0, functionality offered dm_flatten_to_tbl() recursive = TRUE. rows_truncate() deprecated dm 1.0.0, DDL operation requires different permissions dplyr::rows_*() functions.","code":""},{"path":"https://dm.cynkra.com/dev/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"sql_schema_create(dest, schema, ...)  sql_schema_drop(dest, schema, force = FALSE, ...)  sql_schema_exists(dest, schema, ...)  sql_schema_list(dest, include_default = TRUE, ...)  dm_apply_filters(dm)  dm_apply_filters_to_tbl(dm, table)  dm_get_filters(dm)  dm_join_to_tbl(dm, table_1, table_2, join = left_join)  dm_is_referenced(dm, table)  dm_get_referencing_tables(dm, table)  validate_dm(x)  check_if_subset(t1, c1, t2, c2)  check_cardinality(parent_table, pk_column, child_table, fk_column)  cdm_get_src(x)  cdm_get_con(x)  cdm_get_tables(x)  cdm_get_filter(x)  cdm_add_tbl(dm, ..., repair = \"unique\", quiet = FALSE)  cdm_rm_tbl(dm, ...)  cdm_copy_to(   dest,   dm,   ...,   types = NULL,   overwrite = NULL,   indexes = NULL,   unique_indexes = NULL,   set_key_constraints = TRUE,   unique_table_names = FALSE,   table_names = NULL,   temporary = TRUE )  cdm_disambiguate_cols(dm, sep = \".\", quiet = FALSE)  cdm_draw(   dm,   rankdir = \"LR\",   col_attr = \"column\",   view_type = \"keys_only\",   columnArrows = TRUE,   graph_attrs = \"\",   node_attrs = \"\",   edge_attrs = \"\",   focus = NULL,   graph_name = \"Data Model\" )  cdm_set_colors(dm, ...)  cdm_get_colors(dm)  cdm_get_available_colors()  cdm_filter(dm, table, ...)  cdm_nrow(dm)  cdm_flatten_to_tbl(dm, start, ..., join = left_join)  cdm_squash_to_tbl(dm, start, ..., join = left_join)  cdm_join_to_tbl(dm, table_1, table_2, join = left_join)  cdm_apply_filters(dm)  cdm_apply_filters_to_tbl(dm, table)  cdm_add_pk(dm, table, column, check = FALSE, force = FALSE)  cdm_add_fk(dm, table, column, ref_table, check = FALSE)  cdm_has_fk(dm, table, ref_table)  cdm_get_fk(dm, table, ref_table)  cdm_get_all_fks(dm)  cdm_rm_fk(dm, table, columns, ref_table)  cdm_enum_fk_candidates(dm, table, ref_table)  cdm_is_referenced(dm, table)  cdm_get_referencing_tables(dm, table)  cdm_learn_from_db(dest)  cdm_check_constraints(dm)  cdm_nycflights13(cycle = FALSE, color = TRUE, subset = TRUE)  cdm_paste(dm, select = FALSE, tab_width = 2)  cdm_has_pk(dm, table)  cdm_get_pk(dm, table)  cdm_get_all_pks(dm)  cdm_rm_pk(dm, table, rm_referencing_fks = FALSE)  cdm_enum_pk_candidates(dm, table)  cdm_select_tbl(dm, ...)  cdm_rename_tbl(dm, ...)  cdm_select(dm, table, ...)  cdm_rename(dm, table, ...)  cdm_zoom_to_tbl(dm, table)  cdm_insert_zoomed_tbl(   dm,   new_tbl_name = NULL,   repair = \"unique\",   quiet = FALSE )  cdm_update_zoomed_tbl(dm)  cdm_zoom_out(dm)  dm_rm_tbl(dm, ...)  dm_add_tbl(dm, ..., repair = \"unique\", quiet = FALSE)  dm_bind(..., repair = \"check_unique\", quiet = FALSE)  dm_squash_to_tbl(dm, start, ..., join = left_join)  rows_truncate(x, ..., in_place = FALSE)  sql_rows_truncate(x, ...)  dm_rows_truncate(x, y, ..., in_place = NULL, progress = NA)"},{"path":"https://dm.cynkra.com/dev/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — deprecated","text":"... dots future extensions must empty. force Boolean, FALSE (default), error thrown already primary key set table. TRUE, potential old pk deleted setting new one. dm dm object. table table dm. table_1 One tables involved join. table_2 second table join. join type join performed, see dplyr::join(). x object. check Boolean, TRUE, check made combination columns unique key table. columns Table columns, unquoted. define compound key, use c(col1, col2).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Data model class — dm","title":"Data model class — dm","text":"dm class holds list tables relationships. inspired datamodelr, extends idea offering operations access data tables. dm() creates dm object tbl objects (tibbles lazy data objects). new_dm() low-level constructor creates new dm object. called without arguments, create empty dm. called arguments, validation checks made ascertain inputs expected class internally consistent; use dm_validate() double-check returned object. is_dm() returns TRUE input class dm. as_dm() coerces objects dm class","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data model class — dm","text":"","code":"dm(   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   .quiet = FALSE )  new_dm(tables = list())  is_dm(x)  as_dm(x, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data model class — dm","text":"... Tables existing dm objects add dm object. Unnamed tables auto-named, dm objects must named. .name_repair, .quiet Options name repair. Forwarded repair quiet vctrs::vec_as_names(). tables named list tables (tibble-objects, names), included dm object. x object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data model class — dm","text":"dm(), new_dm(), as_dm(): dm object. is_dm(): scalar logical, TRUE object dm.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data model class — dm","text":"","code":"dm(trees, mtcars) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `trees`, `mtcars` #> Columns: 14 #> Primary keys: 0 #> Foreign keys: 0  new_dm(list(trees = trees, mtcars = mtcars)) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `trees`, `mtcars` #> Columns: 14 #> Primary keys: 0 #> Foreign keys: 0  as_dm(list(trees = trees, mtcars = mtcars)) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `trees`, `mtcars` #> Columns: 14 #> Primary keys: 0 #> Foreign keys: 0  is_dm(dm_nycflights13()) #> [1] TRUE  dm_nycflights13()$airports #> # A tibble: 86 × 8 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows  dm_nycflights13()[\"airports\"] #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airports` #> Columns: 8 #> Primary keys: 1 #> Foreign keys: 0  dm_nycflights13()[[\"airports\"]] #> # A tibble: 86 × 8 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows  dm_nycflights13() %>% names() #> [1] \"airlines\" \"airports\" \"flights\"  \"planes\"   \"weather\"  library(dm) library(nycflights13)  # using `data.frame` objects new_dm(tibble::lst(weather, airports)) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `weather`, `airports` #> Columns: 23 #> Primary keys: 0 #> Foreign keys: 0  # using `dm_keyed_tbl` objects dm <- dm_nycflights13() y1 <- dm$planes %>%   mutate() %>%   select(everything()) y2 <- dm$flights %>%   left_join(dm$airlines, by = \"carrier\")  new_dm(list(\"tbl1\" = y1, \"tbl2\" = y2)) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `tbl1`, `tbl2` #> Columns: 29 #> Primary keys: 0 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add foreign keys — dm_add_fk","title":"Add foreign keys — dm_add_fk","text":"dm_add_fk() marks specified columns foreign key table table respect key table ref_table. Usually referenced columns primary key ref_table. However, also possible specify columns via ref_columns argument. check == TRUE, first check values columns subset values key table ref_table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add foreign keys — dm_add_fk","text":"","code":"dm_add_fk(   dm,   table,   columns,   ref_table,   ref_columns = NULL,   ...,   check = FALSE,   on_delete = c(\"no_action\", \"cascade\") )"},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add foreign keys — dm_add_fk","text":"dm dm object. table table dm. columns columns table become foreign key columns reference ref_table. define compound key, use c(col1, col2). ref_table table table referencing. ref_columns column(s) table become referenced column(s) ref_table. default, primary key used. define compound key, use c(col1, col2). ... dots future extensions must empty. check Boolean, TRUE, check performed determine values columns subset values key column(s) ref_table. on_delete  Defines behavior row parent table deleted. - \"no_action\", default, means action taken operation aborted child rows exist - \"cascade\" means child row also deleted setting picked copy_dm_to() set_key_constraints = TRUE, might considered dm_rows_delete() future version.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add foreign keys — dm_add_fk","text":"updated dm additional foreign key relation.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add foreign keys — dm_add_fk","text":"possible foreign key (FK) pointing columns neither primary (PK) explicit unique keys (UK). can happen FK added without corresponding PK UK present parent table PK UK removed (dm_rm_pk()/dm_rm_uk()) without first removing associated FKs. columns -called \"implicit unique key\" referenced table can listed via dm_get_all_uks().","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_add_fk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add foreign keys — dm_add_fk","text":"","code":"nycflights_dm <- dm(   planes = nycflights13::planes,   flights = nycflights13::flights,   weather = nycflights13::weather )  nycflights_dm %>%   dm_draw() %0  flightsflightsplanesplanesweatherweather # Create foreign keys: nycflights_dm %>%   dm_add_pk(planes, tailnum) %>%   dm_add_fk(flights, tailnum, planes) %>%   dm_add_pk(weather, c(origin, time_hour)) %>%   dm_add_fk(flights, c(origin, time_hour), weather) %>%   dm_draw() %0  flightsflightstailnumorigin, time_hourplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour # Keys can be checked during creation: try(   nycflights_dm %>%     dm_add_pk(planes, tailnum) %>%     dm_add_fk(flights, tailnum, planes, check = TRUE) ) #> Error in abort_not_subset_of(table_name, col_name, ref_table_name, ref_col_name) :  #>   Column (`tailnum`) of table `flights` contains values (see examples above) that are not present in column (`tailnum`) of table `planes`."},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a primary key — dm_add_pk","title":"Add a primary key — dm_add_pk","text":"dm_add_pk() marks specified columns primary key specified table. check == TRUE, first check given combination columns unique key table. force == TRUE, function replace already set key, without altering foreign keys previously pointing primary key.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a primary key — dm_add_pk","text":"","code":"dm_add_pk(   dm,   table,   columns,   ...,   autoincrement = FALSE,   check = FALSE,   force = FALSE )"},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a primary key — dm_add_pk","text":"dm dm object. table table dm. columns Table columns, unquoted. define compound key, use c(col1, col2). ... dots future extensions must empty. autoincrement TRUE,  column specified columns populated automatically sequence integers. check Boolean, TRUE, check made combination columns unique key table. force Boolean, FALSE (default), error thrown already primary key set table. TRUE, potential old pk deleted setting new one.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a primary key — dm_add_pk","text":"updated dm additional primary key.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a primary key — dm_add_pk","text":"can one primary key per table dm. possible though set unlimited number unique keys using dm_add_uk() adding foreign keys pointing columns primary key columns dm_add_fk().","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_add_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a primary key — dm_add_pk","text":"","code":"nycflights_dm <- dm(   planes = nycflights13::planes,   airports = nycflights13::airports,   weather = nycflights13::weather )  nycflights_dm %>%   dm_draw() %0  airportsairportsplanesplanesweatherweather # Create primary keys: nycflights_dm %>%   dm_add_pk(planes, tailnum) %>%   dm_add_pk(airports, faa, check = TRUE) %>%   dm_add_pk(weather, c(origin, time_hour)) %>%   dm_draw() %0  airportsairportsfaaplanesplanestailnumweatherweatherorigin, time_hour # Keys can be checked during creation: try(   nycflights_dm %>%     dm_add_pk(planes, manufacturer, check = TRUE) ) #> Error in abort_not_unique_key(x_label, orig_names) :  #>   (`manufacturer`) not a unique key of `planes`."},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a unique key — dm_add_uk","title":"Add a unique key — dm_add_uk","text":"dm_add_uk() marks specified columns unique key specified table. check == TRUE, first check given combination columns unique key table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a unique key — dm_add_uk","text":"","code":"dm_add_uk(dm, table, columns, ..., check = FALSE)"},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a unique key — dm_add_uk","text":"dm dm object. table table dm. columns Table columns, unquoted. define compound key, use c(col1, col2). ... dots future extensions must empty. check Boolean, TRUE, check made combination columns unique key table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a unique key — dm_add_uk","text":"updated dm additional unqiue key.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a unique key — dm_add_uk","text":"difference primary key (PK) unique key (UK) consists following: local dm copied database (DB) copy_dm_to(), PK set DB default, whereas UK ignored. PK can set autoincrement key (also implemented certain DBMS dm transferred DB) can one PK table, whereas can unlimited UKs UK used, table autoincrement PK addition, ensure delta load processes DB (cf. dm_rows_append()) foreign keys updated accordingly. UK available, insertion done row-wise, also ensures correct matching, can much slower. UK can generally enhance data model adding additional information can also implicit UKs, columns addressed foreign key neither PK UK. implicit UKs also listed dm_get_all_uks()","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_add_uk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a unique key — dm_add_uk","text":"","code":"nycflights_dm <- dm(   planes = nycflights13::planes,   airports = nycflights13::airports,   weather = nycflights13::weather )  # Create unique keys: nycflights_dm %>%   dm_add_uk(planes, tailnum) %>%   dm_add_uk(airports, faa, check = TRUE) %>%   dm_add_uk(weather, c(origin, time_hour)) %>%   dm_get_all_uks() #> # A tibble: 3 × 3 #>   table    uk_col            kind        #>   <chr>    <keys>            <chr>       #> 1 planes   tailnum           explicit UK #> 2 airports faa               explicit UK #> 3 weather  origin, time_hour explicit UK  # Keys can be checked during creation: try(   nycflights_dm %>%     dm_add_uk(planes, manufacturer, check = TRUE) ) #> Error in abort_not_unique_key(x_label, orig_names) :  #>   (`manufacturer`) not a unique key of `planes`."},{"path":"https://dm.cynkra.com/dev/reference/dm_deconstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create code to deconstruct a dm object — dm_deconstruct","title":"Create code to deconstruct a dm object — dm_deconstruct","text":"Emits code assigns table dm variable, using pull_tbl() keyed = TRUE. tables retain information primary foreign keys, even data transformations, can converted back dm object dm().","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_deconstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create code to deconstruct a dm object — dm_deconstruct","text":"","code":"dm_deconstruct(dm, dm_name = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/dm_deconstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create code to deconstruct a dm object — dm_deconstruct","text":"dm dm object. dm_name code use access dm object, default expression passed function.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_deconstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create code to deconstruct a dm object — dm_deconstruct","text":"function called side effect printing generated code.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_deconstruct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create code to deconstruct a dm object — dm_deconstruct","text":"","code":"dm <- dm_nycflights13() dm_deconstruct(dm) #> airlines <- pull_tbl(dm, \"airlines\", keyed = TRUE) #> airports <- pull_tbl(dm, \"airports\", keyed = TRUE) #> flights <- pull_tbl(dm, \"flights\", keyed = TRUE) #> planes <- pull_tbl(dm, \"planes\", keyed = TRUE) #> weather <- pull_tbl(dm, \"weather\", keyed = TRUE) airlines <- pull_tbl(dm, \"airlines\", keyed = TRUE) airports <- pull_tbl(dm, \"airports\", keyed = TRUE) flights <- pull_tbl(dm, \"flights\", keyed = TRUE) planes <- pull_tbl(dm, \"planes\", keyed = TRUE) weather <- pull_tbl(dm, \"weather\", keyed = TRUE) by_origin <-   flights %>%   group_by(origin) %>%   summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%   ungroup()  by_origin #> # A tibble: 3 × 2 #> # Keys:     `origin` | 0 | 0 #>   origin mean_arr_delay #>   <chr>           <dbl> #> 1 EWR             3.43  #> 2 JFK            -4.36  #> 3 LGA             0.523 dm(airlines, airports, flights, planes, weather, by_origin) %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaby_originby_originoriginby_origin:origin->airports:faaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour"},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve column name ambiguities — dm_disambiguate_cols","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"function ensures columns dm unique names.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"","code":"dm_disambiguate_cols(   dm,   .sep = \".\",   ...,   .quiet = FALSE,   .position = c(\"suffix\", \"prefix\") )"},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"dm dm object. .sep character variable separates names table names ambiguous columns. ... dots future extensions must empty. .quiet Boolean. default, function lists renamed columns message, pass TRUE suppress message. .position default, table names appended column names resolve conflicts. Prepending table names default versions 1.0.0, use \"prefix\" achieve behavior.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"dm whose column names unambiguous.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"function first checks column names unique. , columns assigned new, unique, names prefixing existing name name table separator. Columns act primary foreign keys renamed foreign key column remain two tables joined, making column name \"unique\" well.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_disambiguate_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve column name ambiguities — dm_disambiguate_cols","text":"","code":"dm_nycflights13() %>%   dm_disambiguate_cols() #> Renaming ambiguous columns: %>% #>   dm_rename(airlines, carrier.airlines = carrier) %>% #>   dm_rename(airlines, name.airlines = name) %>% #>   dm_rename(airports, name.airports = name) %>% #>   dm_rename(flights, year.flights = year) %>% #>   dm_rename(flights, month.flights = month) %>% #>   dm_rename(flights, day.flights = day) %>% #>   dm_rename(flights, carrier.flights = carrier) %>% #>   dm_rename(flights, tailnum.flights = tailnum) %>% #>   dm_rename(flights, origin.flights = origin) %>% #>   dm_rename(flights, hour.flights = hour) %>% #>   dm_rename(flights, time_hour.flights = time_hour) %>% #>   dm_rename(planes, tailnum.planes = tailnum) %>% #>   dm_rename(planes, year.planes = year) %>% #>   dm_rename(weather, origin.weather = origin) %>% #>   dm_rename(weather, year.weather = year) %>% #>   dm_rename(weather, month.weather = month) %>% #>   dm_rename(weather, day.weather = day) %>% #>   dm_rename(weather, hour.weather = hour) %>% #>   dm_rename(weather, time_hour.weather = time_hour) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a diagram of the data model — dm_draw","title":"Draw a diagram of the data model — dm_draw","text":"dm_draw() draws diagram, visual representation data model.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a diagram of the data model — dm_draw","text":"","code":"dm_draw(   dm,   rankdir = \"LR\",   ...,   col_attr = NULL,   view_type = c(\"keys_only\", \"all\", \"title_only\"),   columnArrows = TRUE,   graph_attrs = \"\",   node_attrs = \"\",   edge_attrs = \"\",   focus = NULL,   graph_name = \"Data Model\",   column_types = NULL,   backend = \"DiagrammeR\" )"},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a diagram of the data model — dm_draw","text":"dm dm object. rankdir Graph attribute direction (e.g., 'BT' = bottom --> top). ... dots future extensions must empty. col_attr Deprecated, use colummn_types instead. view_type Can \"keys_only\" (default), \"\" \"title_only\". defines level details rendering tables (primary foreign keys, columns, columns). columnArrows Edges columns columns (default: TRUE). graph_attrs Additional graph attributes. node_attrs Additional node attributes. edge_attrs Additional edge attributes. focus list parameters rendering (table filter). graph_name name graph. column_types Set TRUE show column types. backend Currently, default \"DiagrammeR\" accepted. Pass value explicitly code uses function display data model relies type return value.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a diagram of the data model — dm_draw","text":"object print() method, , printed, produces output seen viewer side effect. Currently, object class grViz (see also DiagrammeR::grViz()), subject change.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw a diagram of the data model — dm_draw","text":"Currently, dm uses DiagrammeR draw diagrams. Use DiagrammeRsvg::export_svg() convert diagram SVG file. backend drawing diagrams might change future. rely DiagrammeR, pass explicit value backend argument.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a diagram of the data model — dm_draw","text":"","code":"dm_nycflights13() %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour dm_nycflights13(cycle = TRUE) %>%   dm_draw(view_type = \"title_only\") %0  airlinesairlinesairportsairportsflightsflightsflights:carrier->airlines:carrierflights:origin->airports:faaflights:dest->airports:faaplanesplanesflights:tailnum->planes:tailnumweatherweatherflights:origin, time_hour->weather:origin, time_hour head(dm_get_available_colors()) #> [1] \"default\"       \"white\"         \"aliceblue\"     \"antiquewhite\"  #> [5] \"antiquewhite1\" \"antiquewhite2\" length(dm_get_available_colors()) #> [1] 658  dm_nycflights13() %>%   dm_get_colors() #>  #ED7D31FF  #ED7D31FF  #5B9BD5FF  #ED7D31FF  #70AD47FF  #> \"airlines\" \"airports\"  \"flights\"   \"planes\"  \"weather\""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Foreign key candidates — dm_enum_fk_candidates","title":"Foreign key candidates — dm_enum_fk_candidates","text":"Determine columns good candidates used foreign keys table, reference primary key column another table dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Foreign key candidates — dm_enum_fk_candidates","text":"","code":"dm_enum_fk_candidates(dm, table, ref_table, ...)  enum_fk_candidates(dm_zoomed, ref_table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Foreign key candidates — dm_enum_fk_candidates","text":"dm dm object. table table whose columns tested suitability foreign keys. ref_table table primary key. ... dots future extensions must empty. dm_zoomed dm zoomed table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Foreign key candidates — dm_enum_fk_candidates","text":"tibble following columns: columns columns table, candidate boolean: columns candidate foreign key, candidate foreign key, explanation .","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Foreign key candidates — dm_enum_fk_candidates","text":"dm_enum_fk_candidates() first checks ref_table primary key set, , error thrown. ref_table primary key, join operation tried using key argument join() match column table. Attempting join incompatible columns triggers error. outcome join operation determines value column result: empty value column table suitable foreign key candidate count percentage missing matches column suitable error message triggered unsuitable candidates may include types mismatched columns enum_fk_candidates() works like dm_enum_fk_candidates() zoomed table table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Foreign key candidates — dm_enum_fk_candidates","text":"functions marked \"experimental\" yet sure interface, particular need dm_enum...() enum...() variants. Changing interface later seems harmless functions likely used interactively.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_fk_candidates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Foreign key candidates — dm_enum_fk_candidates","text":"","code":"dm_nycflights13() %>%   dm_enum_fk_candidates(flights, airports) #> # A tibble: 19 × 3 #>    columns        candidate why                                                  #>    <keys>         <lgl>     <chr>                                                #>  1 origin         TRUE      \"\"                                                   #>  2 year           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  3 month          FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  4 day            FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  5 dep_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  6 sched_dep_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  7 dep_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  8 arr_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  9 sched_arr_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 10 arr_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 11 carrier        FALSE     \"values of `flights$carrier` not in `airports$faa`:… #> 12 flight         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 13 tailnum        FALSE     \"values of `flights$tailnum` not in `airports$faa`:… #> 14 dest           FALSE     \"values of `flights$dest` not in `airports$faa`: SJ… #> 15 air_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 16 distance       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 17 hour           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 18 minute         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 19 time_hour      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v…  dm_nycflights13() %>%   dm_zoom_to(flights) %>%   enum_fk_candidates(airports) #> # A tibble: 19 × 3 #>    columns        candidate why                                                  #>    <keys>         <lgl>     <chr>                                                #>  1 origin         TRUE      \"\"                                                   #>  2 year           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  3 month          FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  4 day            FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  5 dep_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  6 sched_dep_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  7 dep_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  8 arr_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #>  9 sched_arr_time FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 10 arr_delay      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 11 carrier        FALSE     \"values of `flights$carrier` not in `airports$faa`:… #> 12 flight         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 13 tailnum        FALSE     \"values of `flights$tailnum` not in `airports$faa`:… #> 14 dest           FALSE     \"values of `flights$dest` not in `airports$faa`: SJ… #> 15 air_time       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 16 distance       FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 17 hour           FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 18 minute         FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v… #> 19 time_hour      FALSE     \"\\u001b[1m\\u001b[22mCan't join `x$value1` with `y$v…"},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary key candidate — enum_pk_candidates","title":"Primary key candidate — enum_pk_candidates","text":"enum_pk_candidates() checks column table column contains unique values, thus suitable candidate primary key table. dm_enum_pk_candidates() performs checks table dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary key candidate — enum_pk_candidates","text":"","code":"enum_pk_candidates(table, ...)  dm_enum_pk_candidates(dm, table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary key candidate — enum_pk_candidates","text":"table table dm. ... dots future extensions must empty. dm dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary key candidate — enum_pk_candidates","text":"tibble following columns: columns columns table, candidate boolean: columns candidate primary key, candidate primary key column, explanation .","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Primary key candidate — enum_pk_candidates","text":"functions marked \"experimental\" yet sure interface, particular need dm_enum...() enum...() variants. Changing interface later seems harmless functions likely used interactively.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_enum_pk_candidates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Primary key candidate — enum_pk_candidates","text":"","code":"nycflights13::flights %>%   enum_pk_candidates() #> # A tibble: 19 × 3 #>    columns        candidate why                                                  #>    <keys>         <lgl>     <chr>                                                #>  1 year           FALSE     has duplicate values: 2013 (336776)                  #>  2 month          FALSE     has duplicate values: 7 (29425), 8 (29327), 10 (288… #>  3 day            FALSE     has duplicate values: 18 (11399), 11 (11359), 22 (1… #>  4 dep_time       FALSE     has 8255 missing values, and duplicate values: 555 … #>  5 sched_dep_time FALSE     has duplicate values: 600 (7016), 700 (4900), 630 (… #>  6 dep_delay      FALSE     has duplicate values: -5 (24821), -4 (24619), -3 (2… #>  7 arr_time       FALSE     has 8713 missing values, and duplicate values: 1008… #>  8 sched_arr_time FALSE     has duplicate values: 1025 (1324), 2015 (1234), 111… #>  9 arr_delay      FALSE     has 9430 missing values, and duplicate values: -13 … #> 10 carrier        FALSE     has duplicate values: UA (58665), B6 (54635), EV (5… #> 11 flight         FALSE     has duplicate values: 15 (968), 27 (898), 181 (882)… #> 12 tailnum        FALSE     has 2512 missing values, and duplicate values: N725… #> 13 origin         FALSE     has duplicate values: EWR (120835), JFK (111279), L… #> 14 dest           FALSE     has duplicate values: ORD (17283), ATL (17215), LAX… #> 15 air_time       FALSE     has 9430 missing values, and duplicate values: 42 (… #> 16 distance       FALSE     has duplicate values: 2475 (11262), 762 (10263), 73… #> 17 hour           FALSE     has duplicate values: 8 (27242), 6 (25951), 17 (244… #> 18 minute         FALSE     has duplicate values: 0 (60696), 30 (33899), 45 (20… #> 19 time_hour      FALSE     has duplicate values: 2013-09-13 08:00:00 (94), 201…  dm_nycflights13() %>%   dm_enum_pk_candidates(airports) #> # A tibble: 8 × 3 #>   columns candidate why                                                          #>   <keys>  <lgl>     <chr>                                                        #> 1 faa     TRUE      \"\"                                                           #> 2 name    TRUE      \"\"                                                           #> 3 lat     TRUE      \"\"                                                           #> 4 lon     TRUE      \"\"                                                           #> 5 alt     FALSE     \"has duplicate values: 30 (4), 13 (3), 9 (2), 19 (2), 26 (2… #> 6 tz      FALSE     \"has duplicate values: -5 (48), -6 (21), -8 (12), -7 (4)\"    #> 7 dst     FALSE     \"has duplicate values: A (84), N (2)\"                        #> 8 tzone   FALSE     \"has duplicate values: America/New_York (48), America/Chica…"},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn about your data model — dm_examine_cardinalities","title":"Learn about your data model — dm_examine_cardinalities","text":"function returns tibble information cardinality FK constraints. printing object special, use as_tibble() print regular tibble.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn about your data model — dm_examine_cardinalities","text":"","code":"dm_examine_cardinalities(   .dm,   ...,   .progress = NA,   dm = deprecated(),   progress = deprecated() )"},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn about your data model — dm_examine_cardinalities","text":".dm dm object. ... dots future extensions must empty. .progress Whether display progress bar, NA (default) hide non-interactive mode, show interactive mode. Requires 'progress' package. dm, progress","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn about your data model — dm_examine_cardinalities","text":"tibble following columns: child_table child table, child_fk_cols foreign key column(s) child table list character vectors, parent_table parent table, parent_key_cols key column(s) parent table list character vectors, cardinality nature cardinality along foreign key.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Learn about your data model — dm_examine_cardinalities","text":"Uses examine_cardinality() foreign key defined dm.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_cardinalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn about your data model — dm_examine_cardinalities","text":"","code":"dm_nycflights13() %>%   dm_examine_cardinalities() #> • FK: flights$(`carrier`) -> airlines$(`carrier`): surjective mapping (child: 1 to n -> parent: 1) #> • FK: flights$(`origin`) -> airports$(`faa`): generic mapping (child: 0 to n -> parent: 1) #> • FK: flights$(`origin`, `time_hour`) -> weather$(`origin`, `time_hour`): generic mapping (child: 0 to n -> parent: 1) #> • FK: flights$(`tailnum`) -> planes$(`tailnum`): Column (`tailnum`) of table `flights` not a subset of column (`tailnum`) of table `planes`. #> ! Not all FK constraints satisfied, call `dm_examine_constraints()` for details."},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate your data model — dm_examine_constraints","title":"Validate your data model — dm_examine_constraints","text":"function returns tibble information key constraints met (is_key = TRUE) violated (FALSE). printing object special, use as_tibble() print regular tibble.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate your data model — dm_examine_constraints","text":"","code":"dm_examine_constraints(   .dm,   ...,   .progress = NA,   dm = deprecated(),   progress = deprecated() )"},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate your data model — dm_examine_constraints","text":".dm dm object. ... dots future extensions must empty. .progress Whether display progress bar, NA (default) hide non-interactive mode, show interactive mode. Requires 'progress' package. dm, progress","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate your data model — dm_examine_constraints","text":"tibble following columns: table table dm, kind \"PK\" \"FK\", columns table columns define key, ref_table foreign keys, referenced table, is_key logical, problem is_key = FALSE, reason .","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate your data model — dm_examine_constraints","text":"primary key constraints, tested values respective columns unique. foreign key constraints, tests check foreign key constraint, values foreign key column form subset values referenced column.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_examine_constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate your data model — dm_examine_constraints","text":"","code":"dm_nycflights13() %>%   dm_examine_constraints() #> ! Unsatisfied constraints: #> • Table `flights`: foreign key `tailnum` into table `planes`: values of `flights$tailnum` not in `planes$tailnum`: N725MQ (6), N537MQ (5), N722MQ (5), N730MQ (5), N736MQ (5), …"},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering — dm_filter","title":"Filtering — dm_filter","text":"Filtering table dm object may affect tables connected directly indirectly via foreign key relations. dm_filter() can used define filter conditions tables using syntax similar dplyr::filter(). filters work across related tables: resulting dm object contains rows related (directly indirectly) rows remain applying filters tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering — dm_filter","text":"","code":"dm_filter(.dm, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering — dm_filter","text":".dm dm object. ... Named logical predicates. names correspond tables dm object. predicates defined terms variables corresponding table, passed dplyr::filter(). Multiple conditions combined &. rows condition evaluates TRUE kept.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filtering — dm_filter","text":"updated dm object filters executed across tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filtering — dm_filter","text":"dm 1.0.0, conditions longer stored dm object, instead applied tables call dm_filter(). Calling dm_apply_filters() dm_apply_filters_to_tbl() longer necessary. Use dm_zoom_to() dplyr::filter() filter rows without affecting related tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering — dm_filter","text":"","code":"dm_nyc <- dm_nycflights13() dm_nyc %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>       15       86     1761      945      144   dm_nyc_filtered <-   dm_nycflights13() %>%   dm_filter(airports = (name == \"John F Kennedy Intl\"))  dm_nyc_filtered %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>       10        1      602      336       38   # If you want to keep only those rows in the parent tables # whose primary key values appear as foreign key values in # `flights`, you can set a `TRUE` filter in `flights`: dm_nyc %>%   dm_filter(flights = (1 == 1)) %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>       15        3     1761      945      105  # note that in this example, the only affected table is # `airports` because the departure airports in `flights` are # only the three New York airports."},{"path":"https://dm.cynkra.com/dev/reference/dm_financial.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a dm object for the Financial data — dm_financial","title":"Creates a dm object for the Financial data — dm_financial","text":"dm_financial() creates example dm object tables https://relational.fit.cvut.cz/dataset/Financial. connection established per session, subsequent calls return connection. dm_financial_sqlite() copies data temporary SQLite database. data downloaded per session, subsequent calls return database. trans table excluded due size.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_financial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a dm object for the Financial data — dm_financial","text":"","code":"dm_financial()  dm_financial_sqlite()"},{"path":"https://dm.cynkra.com/dev/reference/dm_financial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a dm object for the Financial data — dm_financial","text":"dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_financial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a dm object for the Financial data — dm_financial","text":"","code":"dm_financial() %>%   dm_draw() %0  accountsaccountsiddistrict_iddistrictsdistrictsidaccounts:district_id->districts:idcardscardsiddisp_iddispsdispsidclient_idaccount_idcards:disp_id->disps:idclientsclientsiddisps:account_id->accounts:iddisps:client_id->clients:idloansloansidaccount_idloans:account_id->accounts:idordersordersidaccount_idorders:account_id->accounts:idtkeystkeystranstransidaccount_idtrans:account_id->accounts:id"},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"dm_flatten_to_tbl() gathers information interest one place wide table. performs disambiguation column names cascade joins.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"","code":"dm_flatten_to_tbl(dm, .start, ..., .recursive = FALSE, .join = left_join)"},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"dm dm object. .start table outgoing foreign key relations considered establishing processing order joins. interesting choice example fact table star schema. ...  Unquoted names tables included addition .start table. order tables determines order joins. argument empty, tables can reached included. tidyselect supported, see dplyr::select() details semantics. .recursive Logical, defaults FALSE. parent tables joined .start, also ancestors? .join type join performed, see dplyr::join().","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"single table results consecutively joining affected tables .start table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"... left empty, function join together tables dm object can reached .start table, direction foreign key relations (pointing child tables parent tables), using foreign key relations determine argument necessary joins. result one table unique column names. Use ... argument like control tables joined .start table. Mind calling dm_flatten_to_tbl() .join = right_join table order determined ... argument lead well-defined result two foreign tables joined .start. resulting table depend order tables listed dm. Therefore, trying result warning. Since .join = nest_join make sense direction (LHS = child table, RHS = parent table: valid key constraints nested column entry tibble one row), error thrown method chosen. difference .recursive = FALSE .recursive = TRUE following (see examples): .recursive = FALSE allows one level hierarchy (.e., direct neighbors table .start), .recursive = TRUE go levels hierarchy joining. Additionally, functions differ dm_wrap_tbl(), always returns dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_flatten_to_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a part of a dm into a wide table — dm_flatten_to_tbl","text":"","code":"dm_financial() %>%   dm_select_tbl(-loans) %>%   dm_flatten_to_tbl(.start = cards) #> Renaming ambiguous columns: %>% #>   dm_rename(cards, type.cards = type) %>% #>   dm_rename(disps, type.disps = type) #> # Source:   SQL [?? x 7] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>       id disp_id type.cards issued     client_id account_id type.disps #>    <int>   <int> <chr>      <date>         <int>      <int> <chr>      #>  1     1       9 gold       1998-10-16         9          7 OWNER      #>  2     2      19 classic    1998-03-13        19         14 OWNER      #>  3     3      41 gold       1995-09-03        41         33 OWNER      #>  4     4      42 classic    1998-11-26        42         34 OWNER      #>  5     5      51 junior     1995-04-24        51         43 OWNER      #>  6     7      56 classic    1998-06-11        56         48 OWNER      #>  7     8      60 junior     1998-05-20        60         51 OWNER      #>  8     9      76 classic    1997-10-25        76         65 OWNER      #>  9    10      77 classic    1996-12-07        77         66 OWNER      #> 10    11      79 gold       1997-10-25        79         68 OWNER      #> # … with more rows  dm_financial() %>%   dm_select_tbl(-loans) %>%   dm_flatten_to_tbl(.start = cards, .recursive = TRUE) #> Renaming ambiguous columns: %>% #>   dm_rename(cards, type.cards = type) %>% #>   dm_rename(disps, type.disps = type) %>% #>   dm_rename(accounts, district_id.accounts = district_id) %>% #>   dm_rename(clients, district_id.clients = district_id) #> # Source:   SQL [?? x 28] #> # Database: mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #>       id disp_id type.cards issued     client_id accou…¹ type.…² distr…³ frequ…⁴ #>    <int>   <int> <chr>      <date>         <int>   <int> <chr>     <int> <chr>   #>  1     1       9 gold       1998-10-16         9       7 OWNER        60 POPLAT… #>  2     2      19 classic    1998-03-13        19      14 OWNER        47 POPLAT… #>  3     3      41 gold       1995-09-03        41      33 OWNER        22 POPLAT… #>  4     4      42 classic    1998-11-26        42      34 OWNER        67 POPLAT… #>  5     5      51 junior     1995-04-24        51      43 OWNER        36 POPLAT… #>  6     7      56 classic    1998-06-11        56      48 OWNER        21 POPLAT… #>  7     8      60 junior     1998-05-20        60      51 OWNER        67 POPLAT… #>  8     9      76 classic    1997-10-25        76      65 OWNER        36 POPLAT… #>  9    10      77 classic    1996-12-07        77      66 OWNER        48 POPLAT… #> 10    11      79 gold       1997-10-25        79      68 OWNER        37 POPLAT… #> # … with more rows, 19 more variables: date <date>, A2 <chr>, A3 <chr>, #> #   A4 <int>, A5 <int>, A6 <int>, A7 <int>, A8 <int>, A9 <int>, A10 <dbl>, #> #   A11 <int>, A12 <dbl>, A13 <dbl>, A14 <int>, A15 <int>, A16 <int>, #> #   birth_number <chr>, district_id.clients <int>, tkey_id <int>, and #> #   abbreviated variable names ¹​account_id, ²​type.disps, ³​district_id.accounts, #> #   ⁴​frequency"},{"path":"https://dm.cynkra.com/dev/reference/dm_from_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a dm from a remote data source — dm_from_con","title":"Load a dm from a remote data source — dm_from_con","text":"dm_from_con() creates dm tables src (database environment) accessible via DBI-Connection. Postgres SQL Server databases, primary foreign keys imported database.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_from_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a dm from a remote data source — dm_from_con","text":"","code":"dm_from_con(con = NULL, table_names = NULL, learn_keys = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_from_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a dm from a remote data source — dm_from_con","text":"con DBI::DBIConnection Pool object. table_names character vector names tables include. learn_keys  Set TRUE query definition primary foreign keys database. Currently works Postgres SQL Server databases. default attempts query issues informative message. ...  Additional parameters schema learning query. schema: supported MSSQL (default: \"dbo\"), Postgres (default: \"public\"), MariaDB/MySQL (default: current database). Learn tables specific schema (database MariaDB/MySQL). dbname: supported MSSQL. Access different databases connected MSSQL-server; default: active database. table_type: supported Postgres (default: \"BASE TABLE\"). Specify table type. Options : \"BASE TABLE\" persistent table (normal table type) \"VIEW\" view \"FOREIGN TABLE\" foreign table \"LOCAL TEMPORARY\" temporary table","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_from_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a dm from a remote data source — dm_from_con","text":"dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_from_con.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a dm from a remote data source — dm_from_con","text":"","code":"con <- dm_get_con(dm_financial())  dm_from_src(con) #> Warning: `dm_from_src()` was deprecated in dm 0.3.0. #> ℹ Please use `dm_from_con()` instead. #> Keys queried successfully, use `learn_keys = TRUE` to mute this message. #> ── Table source ──────────────────────────────────────────────────────────────── #> src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs] #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (9 total) #> Columns: 57 #> Primary keys: 9 #> Foreign keys: 8  # Avoid DBI::dbDisconnect() here, because we don't own the connection"},{"path":"https://dm.cynkra.com/dev/reference/dm_from_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a dm from a remote data source — dm_from_src","title":"Load a dm from a remote data source — dm_from_src","text":"Deprecated  dm 0.3.0 favor dm_from_con().","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_from_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a dm from a remote data source — dm_from_src","text":"","code":"dm_from_src(src = NULL, table_names = NULL, learn_keys = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_from_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a dm from a remote data source — dm_from_src","text":"src dbplyr source, DBI connection object Pool object. table_names character vector names tables include. learn_keys  Set TRUE query definition primary foreign keys database. Currently works Postgres SQL Server databases. default attempts query issues informative message. ...  Additional parameters schema learning query. schema: supported MSSQL (default: \"dbo\"), Postgres (default: \"public\"), MariaDB/MySQL (default: current database). Learn tables specific schema (database MariaDB/MySQL). dbname: supported MSSQL. Access different databases connected MSSQL-server; default: active database. table_type: supported Postgres (default: \"BASE TABLE\"). Specify table type. Options : \"BASE TABLE\" persistent table (normal table type) \"VIEW\" view \"FOREIGN TABLE\" foreign table \"LOCAL TEMPORARY\" temporary table","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_fks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get foreign key constraints — dm_get_all_fks","title":"Get foreign key constraints — dm_get_all_fks","text":"Get summary foreign key relations dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_fks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get foreign key constraints — dm_get_all_fks","text":"","code":"dm_get_all_fks(dm, parent_table = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_fks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get foreign key constraints — dm_get_all_fks","text":"dm dm object. parent_table One table names, unquoted, return foreign key information . given, foreign keys returned order. default NULL returns information tables. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_fks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get foreign key constraints — dm_get_all_fks","text":"tibble following columns: child_table child table, child_fk_cols foreign key column(s) child table list character vectors, parent_table parent table, parent_key_cols key column(s) parent table list character vectors. on_delete behavior deletion rows parent table.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_fks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get foreign key constraints — dm_get_all_fks","text":"","code":"dm_nycflights13() %>%   dm_get_all_fks() #> # A tibble: 4 × 5 #>   child_table child_fk_cols     parent_table parent_key_cols   on_delete #>   <chr>       <keys>            <chr>        <keys>            <chr>     #> 1 flights     carrier           airlines     carrier           no_action #> 2 flights     origin            airports     faa               no_action #> 3 flights     tailnum           planes       tailnum           no_action #> 4 flights     origin, time_hour weather      origin, time_hour no_action"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_pks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all primary keys of a dm object — dm_get_all_pks","title":"Get all primary keys of a dm object — dm_get_all_pks","text":"dm_get_all_pks() checks dm object primary keys returns tables respective primary key columns.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_pks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all primary keys of a dm object — dm_get_all_pks","text":"","code":"dm_get_all_pks(dm, table = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_pks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all primary keys of a dm object — dm_get_all_pks","text":"dm dm object. table One table names, unquoted, return primary key information . given, primary keys returned order. default NULL returns information tables. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_pks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all primary keys of a dm object — dm_get_all_pks","text":"tibble following columns: table table name, pk_col column name(s) primary key, list character vectors.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_pks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all primary keys of a dm object — dm_get_all_pks","text":"","code":"dm_nycflights13() %>%   dm_get_all_pks() #> # A tibble: 4 × 3 #>   table    pk_col            autoincrement #>   <chr>    <keys>            <lgl>         #> 1 airlines carrier           FALSE         #> 2 airports faa               FALSE         #> 3 planes   tailnum           FALSE         #> 4 weather  origin, time_hour FALSE"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all unique keys of a dm object — dm_get_all_uks","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"dm_get_all_uks() checks dm object unique keys (primary keys, explicit implicit unique keys) returns tables respective unique key columns.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"","code":"dm_get_all_uks(dm, table = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"dm dm object. table One table names, unquoted, return unique key information . default NULL returns information tables. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"tibble following columns: table table name, uk_col column name(s) primary key, list character vectors, kind kind unique key, see details.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"3 kinds unique keys: PK: Primary key, set dm_add_pk() explicit UK: Unique key, set dm_add_uk() implicit UK: Unique key, explicitly set, referenced foreign key.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_get_all_uks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all unique keys of a dm object — dm_get_all_uks","text":"","code":"dm_nycflights13() %>%   dm_get_all_uks() #> # A tibble: 4 × 3 #>   table    uk_col            kind  #>   <chr>    <keys>            <chr> #> 1 airlines carrier           PK    #> 2 airports faa               PK    #> 3 planes   tailnum           PK    #> 4 weather  origin, time_hour PK"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Get connection — dm_get_con","title":"Get connection — dm_get_con","text":"dm_get_con() returns DBI connection dm object. works tables stored database, otherwise error thrown.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get connection — dm_get_con","text":"","code":"dm_get_con(dm)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get connection — dm_get_con","text":"dm dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get connection — dm_get_con","text":"DBI::DBIConnection object dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get connection — dm_get_con","text":"lazy tables dm object must stored database server accessed connection, large part package's functionality relies efficient joins.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_con.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get connection — dm_get_con","text":"","code":"dm_financial() %>%   dm_get_con() #> <MariaDBConnection> #>   Host:    relational.fit.cvut.cz #>   Server:   #>   Client:"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary key column names — dm_get_pk","title":"Primary key column names — dm_get_pk","text":"function deprecated limited use unintuitive return value. Use dm_get_all_pks() instead.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary key column names — dm_get_pk","text":"","code":"dm_get_pk(dm, table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tables — dm_get_tables","title":"Get tables — dm_get_tables","text":"dm_get_tables() returns named list dplyr tbl objects dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tables — dm_get_tables","text":"","code":"dm_get_tables(x, ..., keyed = FALSE)"},{"path":"https://dm.cynkra.com/dev/reference/dm_get_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tables — dm_get_tables","text":"x dm object. ... dots future extensions must empty. keyed Set TRUE return objects internal class \"dm_keyed_tbl\" contain information primary foreign keys individual table objects. allows using dplyr workflows tables later reconstruct dm object. See dm_deconstruct() function generates corresponding code existing dm object, vignette(\"tech-dm-keyed\") details.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_get_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tables — dm_get_tables","text":"named list tables (data frames lazy tables) constituting dm.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_get_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tables — dm_get_tables","text":"","code":"dm_nycflights13() %>%   dm_get_tables() #> $airlines #> # A tibble: 15 × 2 #>    carrier name                        #>    <chr>   <chr>                       #>  1 9E      Endeavor Air Inc.           #>  2 AA      American Airlines Inc.      #>  3 AS      Alaska Airlines Inc.        #>  4 B6      JetBlue Airways             #>  5 DL      Delta Air Lines Inc.        #>  6 EV      ExpressJet Airlines Inc.    #>  7 F9      Frontier Airlines Inc.      #>  8 FL      AirTran Airways Corporation #>  9 HA      Hawaiian Airlines Inc.      #> 10 MQ      Envoy Air                   #> 11 UA      United Air Lines Inc.       #> 12 US      US Airways Inc.             #> 13 VX      Virgin America              #> 14 WN      Southwest Airlines Co.      #> 15 YV      Mesa Airlines Inc.          #>  #> $airports #> # A tibble: 86 × 8 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows #>  #> $flights #> # A tibble: 1,761 × 19 #>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>    <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>   #>  1  2013     1    10        3       2359       4     426     437     -11 B6      #>  2  2013     1    10       16       2359      17     447     444       3 B6      #>  3  2013     1    10      450        500     -10     634     648     -14 US      #>  4  2013     1    10      520        525      -5     813     820      -7 UA      #>  5  2013     1    10      530        530       0     824     829      -5 UA      #>  6  2013     1    10      531        540      -9     832     850     -18 AA      #>  7  2013     1    10      535        540      -5    1015    1017      -2 B6      #>  8  2013     1    10      546        600     -14     645     709     -24 B6      #>  9  2013     1    10      549        600     -11     652     724     -32 EV      #> 10  2013     1    10      550        600     -10     649     703     -14 US      #> # … with 1,751 more rows, 9 more variables: flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay #>  #> $planes #> # A tibble: 945 × 9 #>    tailnum  year type                   manuf…¹ model engines seats speed engine #>    <chr>   <int> <chr>                  <chr>   <chr>   <int> <int> <int> <chr>  #>  1 N10156   2004 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  2 N104UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  3 N10575   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  4 N105UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  5 N110UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  6 N11106   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  7 N11107   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  8 N11109   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  9 N11121   2003 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #> 10 N11137   2003 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #> # … with 935 more rows, and abbreviated variable name ¹​manufacturer #>  #> $weather #> # A tibble: 144 × 15 #>    origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹ #>    <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl> #>  1 EWR     2013     1    10     0  41    32    70.1      230       8.06     NA   #>  2 EWR     2013     1    10     1  39.0  30.0  69.9      210       9.21     NA   #>  3 EWR     2013     1    10     2  39.0  28.9  66.8      230       6.90     NA   #>  4 EWR     2013     1    10     3  39.9  27.0  59.5      270       5.75     NA   #>  5 EWR     2013     1    10     4  41    26.1  55.0      320       6.90     NA   #>  6 EWR     2013     1    10     5  41    26.1  55.0      300      12.7      20.7 #>  7 EWR     2013     1    10     6  39.9  25.0  54.8      280       6.90     17.3 #>  8 EWR     2013     1    10     7  41    25.0  52.6      330       6.90     NA   #>  9 EWR     2013     1    10     8  43.0  25.0  48.7      330       8.06     NA   #> 10 EWR     2013     1    10     9  45.0  23    41.6      320      17.3      26.5 #> # … with 134 more rows, 4 more variables: precip <dbl>, pressure <dbl>, #> #   visib <dbl>, time_hour <dttm>, and abbreviated variable name ¹​wind_gust #>   dm_nycflights13() %>%   dm_get_tables(keyed = TRUE) #> $airlines #> # A tibble: 15 × 2 #> # Keys:     `carrier` | 1 | 0 #>    carrier name                        #>    <chr>   <chr>                       #>  1 9E      Endeavor Air Inc.           #>  2 AA      American Airlines Inc.      #>  3 AS      Alaska Airlines Inc.        #>  4 B6      JetBlue Airways             #>  5 DL      Delta Air Lines Inc.        #>  6 EV      ExpressJet Airlines Inc.    #>  7 F9      Frontier Airlines Inc.      #>  8 FL      AirTran Airways Corporation #>  9 HA      Hawaiian Airlines Inc.      #> 10 MQ      Envoy Air                   #> 11 UA      United Air Lines Inc.       #> 12 US      US Airways Inc.             #> 13 VX      Virgin America              #> 14 WN      Southwest Airlines Co.      #> 15 YV      Mesa Airlines Inc.          #>  #> $airports #> # A tibble: 86 × 8 #> # Keys:     `faa` | 1 | 0 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows #>  #> $flights #> # A tibble: 1,761 × 19 #> # Keys:     — | 0 | 4 #>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>    <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>   #>  1  2013     1    10        3       2359       4     426     437     -11 B6      #>  2  2013     1    10       16       2359      17     447     444       3 B6      #>  3  2013     1    10      450        500     -10     634     648     -14 US      #>  4  2013     1    10      520        525      -5     813     820      -7 UA      #>  5  2013     1    10      530        530       0     824     829      -5 UA      #>  6  2013     1    10      531        540      -9     832     850     -18 AA      #>  7  2013     1    10      535        540      -5    1015    1017      -2 B6      #>  8  2013     1    10      546        600     -14     645     709     -24 B6      #>  9  2013     1    10      549        600     -11     652     724     -32 EV      #> 10  2013     1    10      550        600     -10     649     703     -14 US      #> # … with 1,751 more rows, 9 more variables: flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay #>  #> $planes #> # A tibble: 945 × 9 #> # Keys:     `tailnum` | 1 | 0 #>    tailnum  year type                   manuf…¹ model engines seats speed engine #>    <chr>   <int> <chr>                  <chr>   <chr>   <int> <int> <int> <chr>  #>  1 N10156   2004 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  2 N104UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  3 N10575   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  4 N105UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  5 N110UW   1999 Fixed wing multi engi… AIRBUS… A320…       2   182    NA Turbo… #>  6 N11106   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  7 N11107   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  8 N11109   2002 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #>  9 N11121   2003 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #> 10 N11137   2003 Fixed wing multi engi… EMBRAER EMB-…       2    55    NA Turbo… #> # … with 935 more rows, and abbreviated variable name ¹​manufacturer #>  #> $weather #> # A tibble: 144 × 15 #> # Keys:     `origin`, `time_hour` | 1 | 0 #>    origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹ #>    <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl> #>  1 EWR     2013     1    10     0  41    32    70.1      230       8.06     NA   #>  2 EWR     2013     1    10     1  39.0  30.0  69.9      210       9.21     NA   #>  3 EWR     2013     1    10     2  39.0  28.9  66.8      230       6.90     NA   #>  4 EWR     2013     1    10     3  39.9  27.0  59.5      270       5.75     NA   #>  5 EWR     2013     1    10     4  41    26.1  55.0      320       6.90     NA   #>  6 EWR     2013     1    10     5  41    26.1  55.0      300      12.7      20.7 #>  7 EWR     2013     1    10     6  39.9  25.0  54.8      280       6.90     17.3 #>  8 EWR     2013     1    10     7  41    25.0  52.6      330       6.90     NA   #>  9 EWR     2013     1    10     8  43.0  25.0  48.7      330       8.06     NA   #> 10 EWR     2013     1    10     9  45.0  23    41.6      320      17.3      26.5 #> # … with 134 more rows, 4 more variables: precip <dbl>, pressure <dbl>, #> #   visib <dbl>, time_hour <dttm>, and abbreviated variable name ¹​wind_gust #>   dm_nycflights13() %>%   dm_get_tables(keyed = TRUE) %>%   new_dm() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny app for defining dm objects — dm_gui","title":"Shiny app for defining dm objects — dm_gui","text":"function starts Shiny application allows define dm objects database local data frames. application generates R code can inserted copy-pasted R script function.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny app for defining dm objects — dm_gui","text":"","code":"dm_gui(..., dm = NULL, select_tables = TRUE, debug = FALSE)"},{"path":"https://dm.cynkra.com/dev/reference/dm_gui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny app for defining dm objects — dm_gui","text":"... dots future extensions must empty. dm initial dm object, currently required. select_tables Show selectize input select tables? debug Set TRUE simplify debugging app.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_gui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny app for defining dm objects — dm_gui","text":"future release, app also allow composing dm objects directly database connections data frames. signature function subject change without notice. pose many problems, usually run interactively.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_gui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny app for defining dm objects — dm_gui","text":"","code":"if (FALSE) { dm <- dm_nycflights13(cycle = TRUE) dm_gui(dm = dm) }"},{"path":"https://dm.cynkra.com/dev/reference/dm_has_fk.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if foreign keys exists — dm_has_fk","title":"Check if foreign keys exists — dm_has_fk","text":"functions deprecated limited use since introduction foreign keys arbitrary columns dm 0.2.1. Use dm_get_all_fks() table manipulation functions instead.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_has_fk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if foreign keys exists — dm_has_fk","text":"","code":"dm_has_fk(dm, table, ref_table, ...)  dm_get_fk(dm, table, ref_table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_has_fk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if foreign keys exists — dm_has_fk","text":"dm dm object. table table dm. ref_table table table referencing. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_has_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for primary key — dm_has_pk","title":"Check for primary key — dm_has_pk","text":"dm_has_pk() checks given table columns marked primary key.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_has_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for primary key — dm_has_pk","text":"","code":"dm_has_pk(dm, table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_has_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for primary key — dm_has_pk","text":"dm dm object. table table dm. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_has_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for primary key — dm_has_pk","text":"logical value: TRUE given table primary key, FALSE otherwise.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_has_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for primary key — dm_has_pk","text":"","code":"dm_nycflights13() %>%   dm_has_pk(flights) #> [1] FALSE dm_nycflights13() %>%   dm_has_pk(planes) #> [1] TRUE"},{"path":"https://dm.cynkra.com/dev/reference/dm_mutate_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Update tables in a dm — dm_mutate_tbl","title":"Update tables in a dm — dm_mutate_tbl","text":"Updates one existing tables dm. now, column names must identical. restriction may levied optionally future.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_mutate_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update tables in a dm — dm_mutate_tbl","text":"","code":"dm_mutate_tbl(dm, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_mutate_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update tables in a dm — dm_mutate_tbl","text":"dm dm object. ... One tables update dm. Must named.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_mutate_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update tables in a dm — dm_mutate_tbl","text":"","code":"dm_nycflights13() %>%   dm_mutate_tbl(flights = nycflights13::flights[1:3, ]) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_nest_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest a table inside its dm — dm_nest_tbl","title":"Nest a table inside its dm — dm_nest_tbl","text":"dm_nest_tbl() converts child table nested column parent table. child table children (.e. needs terminal child table).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nest_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest a table inside its dm — dm_nest_tbl","text":"","code":"dm_nest_tbl(dm, child_table, into = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/dm_nest_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest a table inside its dm — dm_nest_tbl","text":"dm dm. child_table terminal table one parent table. table nest child_tables , optional can guessed foreign keys unambiguously useful explicit.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_nest_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest a table inside its dm — dm_nest_tbl","text":"","code":"nested_dm <-   dm_nycflights13() %>%   dm_select_tbl(airlines, flights) %>%   dm_nest_tbl(flights)  nested_dm #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines` #> Columns: 3 #> Primary keys: 1 #> Foreign keys: 0  nested_dm$airlines #> # A tibble: 15 × 3 #>    carrier name                        flights             #>    <chr>   <chr>                       <nested>            #>  1 9E      Endeavor Air Inc.           <tibble [104 × 18]> #>  2 AA      American Airlines Inc.      <tibble [180 × 18]> #>  3 AS      Alaska Airlines Inc.        <tibble [4 × 18]>   #>  4 B6      JetBlue Airways             <tibble [296 × 18]> #>  5 DL      Delta Air Lines Inc.        <tibble [239 × 18]> #>  6 EV      ExpressJet Airlines Inc.    <tibble [278 × 18]> #>  7 F9      Frontier Airlines Inc.      <tibble [4 × 18]>   #>  8 FL      AirTran Airways Corporation <tibble [20 × 18]>  #>  9 HA      Hawaiian Airlines Inc.      <tibble [2 × 18]>   #> 10 MQ      Envoy Air                   <tibble [147 × 18]> #> 11 UA      United Air Lines Inc.       <tibble [294 × 18]> #> 12 US      US Airways Inc.             <tibble [109 × 18]> #> 13 VX      Virgin America              <tibble [19 × 18]>  #> 14 WN      Southwest Airlines Co.      <tibble [62 × 18]>  #> 15 YV      Mesa Airlines Inc.          <tibble [3 × 18]>"},{"path":"https://dm.cynkra.com/dev/reference/dm_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of rows — dm_nrow","title":"Number of rows — dm_nrow","text":"Returns named vector number rows table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of rows — dm_nrow","text":"","code":"dm_nrow(dm)"},{"path":"https://dm.cynkra.com/dev/reference/dm_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of rows — dm_nrow","text":"dm dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of rows — dm_nrow","text":"named vector number rows table.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of rows — dm_nrow","text":"","code":"dm_nycflights13() %>%   dm_filter(airports = (faa %in% c(\"EWR\", \"LGA\"))) %>%   dm_nrow() #> airlines airports  flights   planes  weather  #>       13        2     1159      658       67"},{"path":"https://dm.cynkra.com/dev/reference/dm_nycflights13.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a dm object for the nycflights13 data — dm_nycflights13","title":"Creates a dm object for the nycflights13 data — dm_nycflights13","text":"Creates example dm object tables nycflights13, along references. See nycflights13::flights description data. described nycflights13::planes, relationship flights table planes tables \"weak\", satisfy data integrity constraints.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nycflights13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a dm object for the nycflights13 data — dm_nycflights13","text":"","code":"dm_nycflights13(   ...,   cycle = FALSE,   color = TRUE,   subset = TRUE,   compound = TRUE )"},{"path":"https://dm.cynkra.com/dev/reference/dm_nycflights13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a dm object for the nycflights13 data — dm_nycflights13","text":"... dots future extensions must empty. cycle Boolean. FALSE (default), one foreign key relation (flights$origin airports$faa) flights table airports table established. TRUE, dm object double reference tables produced. color Boolean, TRUE (default), resulting dm object colors assigned different tables visualization dm_draw(). subset Boolean, TRUE (default), flights table reduced flights column day equal 10. compound Boolean, FALSE, link established tables flights weather, requires compound keys.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nycflights13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a dm object for the nycflights13 data — dm_nycflights13","text":"dm object consisting nycflights13 tables, complete primary foreign keys optionally colored.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_nycflights13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a dm object for the nycflights13 data — dm_nycflights13","text":"","code":"dm_nycflights13() %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour"},{"path":"https://dm.cynkra.com/dev/reference/dm_pack_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"dm_pack_tbl() — dm_pack_tbl","title":"dm_pack_tbl() — dm_pack_tbl","text":"dm_pack_tbl() converts parent table packed column child table. parent table parent tables (.e. needs terminal parent table).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_pack_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dm_pack_tbl() — dm_pack_tbl","text":"","code":"dm_pack_tbl(dm, parent_table, into = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/dm_pack_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dm_pack_tbl() — dm_pack_tbl","text":"dm dm. parent_table terminal table one child table. table pack parent_tables , optional can guessed foreign keys unambiguously useful explicit.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_pack_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dm_pack_tbl() — dm_pack_tbl","text":"","code":"dm_packed <-   dm_nycflights13() %>%   dm_pack_tbl(planes)  dm_packed #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `weather` #> Columns: 45 #> Primary keys: 3 #> Foreign keys: 3  dm_packed$flights #> # A tibble: 1,761 × 20 #>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>    <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>   #>  1  2013     1    10        3       2359       4     426     437     -11 B6      #>  2  2013     1    10       16       2359      17     447     444       3 B6      #>  3  2013     1    10      450        500     -10     634     648     -14 US      #>  4  2013     1    10      520        525      -5     813     820      -7 UA      #>  5  2013     1    10      530        530       0     824     829      -5 UA      #>  6  2013     1    10      531        540      -9     832     850     -18 AA      #>  7  2013     1    10      535        540      -5    1015    1017      -2 B6      #>  8  2013     1    10      546        600     -14     645     709     -24 B6      #>  9  2013     1    10      549        600     -11     652     724     -32 EV      #> 10  2013     1    10      550        600     -10     649     703     -14 US      #> # … with 1,751 more rows, 10 more variables: flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, planes <packed[,8]>, and abbreviated #> #   variable names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, #> #   ⁵​arr_delay  dm_packed$flights$planes #> # A tibble: 1,761 × 8 #>     year type                    manufacturer   model engines seats speed engine #>    <int> <chr>                   <chr>          <chr>   <int> <int> <int> <chr>  #>  1  2003 Fixed wing multi engine AIRBUS         A320…       2   200    NA Turbo… #>  2  2003 Fixed wing multi engine AIRBUS         A320…       2   200    NA Turbo… #>  3  2001 Fixed wing multi engine AIRBUS INDUST… A321…       2   199    NA Turbo… #>  4  2000 Fixed wing multi engine BOEING         737-…       2   149    NA Turbo… #>  5  1998 Fixed wing multi engine AIRBUS INDUST… A319…       2   179    NA Turbo… #>  6    NA NA                      NA             NA         NA    NA    NA NA     #>  7  2011 Fixed wing multi engine AIRBUS         A320…       2   200    NA Turbo… #>  8  2011 Fixed wing multi engine EMBRAER        ERJ …       2    20    NA Turbo… #>  9  2002 Fixed wing multi engine EMBRAER        EMB-…       2    55    NA Turbo… #> 10  2000 Fixed wing multi engine AIRBUS INDUST… A319…       2   179    NA Turbo… #> # … with 1,751 more rows"},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Create R code for a dm object — dm_paste","title":"Create R code for a dm object — dm_paste","text":"dm_paste() takes existing dm emits code necessary creation.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create R code for a dm object — dm_paste","text":"","code":"dm_paste(dm, select = NULL, ..., tab_width = 2, options = NULL, path = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create R code for a dm object — dm_paste","text":"dm dm object. select Deprecated, see \"select\" options argument. ... Must empty. tab_width Indentation width code second line onwards options Formatting options. character vector containing : \"tables\": tibble() calls empty table definitions derived dm_ptype(), overrides \"select\". \"select\": dm_select() statements columns part dm. \"keys\": dm_add_pk(), dm_add_fk() dm_add_uk() statements adding keys. \"color\": dm_set_colors() statements set color. \"\": options except \"select\" Default NULL equivalent c(\"keys\", \"color\") path Output file, NULL code printed console.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create R code for a dm object — dm_paste","text":"Code producing prototype given dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create R code for a dm object — dm_paste","text":"code emitted function reproduces structure dm object. options argument controls level detail: keys, colors, table definitions. Data tables never included, see dm_ptype() underlying logic.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create R code for a dm object — dm_paste","text":"","code":"dm() %>%   dm_paste() #> dm::dm( #> )  dm_nycflights13() %>%   dm_paste() #> dm::dm( #>   airlines, #>   airports, #>   flights, #>   planes, #>   weather, #> ) %>% #>   dm::dm_add_pk(airlines, carrier) %>% #>   dm::dm_add_pk(airports, faa) %>% #>   dm::dm_add_pk(planes, tailnum) %>% #>   dm::dm_add_pk(weather, c(origin, time_hour)) %>% #>   dm::dm_add_fk(flights, carrier, airlines) %>% #>   dm::dm_add_fk(flights, origin, airports) %>% #>   dm::dm_add_fk(flights, tailnum, planes) %>% #>   dm::dm_add_fk(flights, c(origin, time_hour), weather) %>% #>   dm::dm_set_colors(`#ED7D31FF` = airlines) %>% #>   dm::dm_set_colors(`#ED7D31FF` = airports) %>% #>   dm::dm_set_colors(`#5B9BD5FF` = flights) %>% #>   dm::dm_set_colors(`#ED7D31FF` = planes) %>% #>   dm::dm_set_colors(`#70AD47FF` = weather)  dm_nycflights13() %>%   dm_paste(options = \"select\") #> dm::dm( #>   airlines, #>   airports, #>   flights, #>   planes, #>   weather, #> ) %>% #>   dm::dm_select(airlines, carrier, name) %>% #>   dm::dm_select(airports, faa, name, lat, lon, alt, tz, dst, tzone) %>% #>   dm::dm_select(flights, year, month, day, dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest, air_time, distance, hour, minute, time_hour) %>% #>   dm::dm_select(planes, tailnum, year, type, manufacturer, model, engines, seats, speed, engine) %>% #>   dm::dm_select(weather, origin, year, month, day, hour, temp, dewp, humid, wind_dir, wind_speed, wind_gust, precip, pressure, visib, time_hour)"},{"path":"https://dm.cynkra.com/dev/reference/dm_pixarfilms.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a dm object for the pixarfilms data — dm_pixarfilms","title":"Creates a dm object for the pixarfilms data — dm_pixarfilms","text":"Creates example dm object tables pixarfilms, along references.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_pixarfilms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a dm object for the pixarfilms data — dm_pixarfilms","text":"","code":"dm_pixarfilms(..., color = TRUE, consistent = FALSE)"},{"path":"https://dm.cynkra.com/dev/reference/dm_pixarfilms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a dm object for the pixarfilms data — dm_pixarfilms","text":"... dots future extensions must empty. color Boolean, TRUE (default), resulting dm object colors assigned different tables visualization dm_draw(). consistent Boolean, original dm   film column pixar_films contains missing values made proper primary key. Set TRUE remove records.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_pixarfilms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a dm object for the pixarfilms data — dm_pixarfilms","text":"dm object consisting pixarfilms tables, complete primary foreign keys optionally colored.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_pixarfilms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a dm object for the pixarfilms data — dm_pixarfilms","text":"","code":"dm_pixarfilms() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `pixar_films`, `pixar_people`, `academy`, `box_office`, `genres`, `public_response` #> Columns: 23 #> Primary keys: 5 #> Foreign keys: 5 dm_pixarfilms() %>%   dm_draw() %0  academyacademyfilmfilm, award_typepixar_filmspixar_filmsfilmacademy:film->pixar_films:filmbox_officebox_officefilmbox_office:film->pixar_films:filmgenresgenresfilmfilm, genregenres:film->pixar_films:filmpixar_peoplepixar_peoplefilmpixar_people:film->pixar_films:filmpublic_responsepublic_responsefilmpublic_response:film->pixar_films:film"},{"path":"https://dm.cynkra.com/dev/reference/dm_ptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Prototype for a dm object — dm_ptype","title":"Prototype for a dm object — dm_ptype","text":"prototype contains tables, primary foreign keys, data. tables truncated converted zero-row tibbles, also remote data models. Column names retain type. useful performing creation population database separate steps.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_ptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prototype for a dm object — dm_ptype","text":"","code":"dm_ptype(dm)"},{"path":"https://dm.cynkra.com/dev/reference/dm_ptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prototype for a dm object — dm_ptype","text":"dm dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_ptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prototype for a dm object — dm_ptype","text":"","code":"dm_financial() %>%   dm_ptype() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (9 total) #> Columns: 57 #> Primary keys: 8 #> Foreign keys: 7  dm_financial() %>%   dm_ptype() %>%   dm_nrow() #>  accounts     cards   clients     disps districts     loans    orders     tkeys  #>         0         0         0         0         0         0         0         0  #>     trans  #>         0"},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — dm_rename","title":"Rename columns — dm_rename","text":"Rename columns dm using syntax similar dplyr::rename().","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — dm_rename","text":"","code":"dm_rename(dm, table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — dm_rename","text":"dm dm object. table table dm. ... One unquoted expressions separated commas. can treat variable names positions, use expressions like x:y select ranges variables. Use named arguments, e.g. new_name = old_name, rename selected variables. arguments ... automatically quoted evaluated context column names represent column positions. also support unquoting splicing. See vignette(\"programming\", package = \"dplyr\") introduction concepts. See select helpers details, examples tidyselect helpers, starts_with(), everything(), ...","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns — dm_rename","text":"updated dm columns table renamed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename columns — dm_rename","text":"key columns renamed, meta-information dm updated accordingly.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — dm_rename","text":"","code":"dm_nycflights13() %>%   dm_rename(airports, code = faa, altitude = alt) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_fk.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove foreign keys — dm_rm_fk","title":"Remove foreign keys — dm_rm_fk","text":"dm_rm_fk() can remove either one reference two tables, multiple references (message). error thrown matching foreign key found.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_fk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove foreign keys — dm_rm_fk","text":"","code":"dm_rm_fk(   dm,   table = NULL,   columns = NULL,   ref_table = NULL,   ref_columns = NULL,   ... )"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_fk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove foreign keys — dm_rm_fk","text":"dm dm object. table table dm. Pass NULL remove matching keys. columns Table columns, unquoted. refer compound key, use c(col1, col2). Pass NULL (default) remove matching keys. ref_table table referenced table argument. Pass NULL remove matching keys. ref_columns columns table longer referencing primary key ref_table. refer compound key, use c(col1, col2). ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_fk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove foreign keys — dm_rm_fk","text":"updated dm without matching foreign key relation(s).","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_fk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove foreign keys — dm_rm_fk","text":"","code":"dm_nycflights13(cycle = TRUE) %>%   dm_rm_fk(flights, dest, airports) %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a primary key — dm_rm_pk","title":"Remove a primary key — dm_rm_pk","text":"table name provided, dm_rm_pk() removes primary key table leaves dm object otherwise unaltered. table given, dm stripped primary keys . error thrown primary key matches selection criteria. selection criteria ambiguous, message unambiguous replacement code shown. Foreign keys never removed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a primary key — dm_rm_pk","text":"","code":"dm_rm_pk(dm, table = NULL, columns = NULL, ..., fail_fk = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a primary key — dm_rm_pk","text":"dm dm object. table table dm. Pass NULL remove matching keys. columns Table columns, unquoted. refer compound key, use c(col1, col2). Pass NULL (default) remove matching keys. ... dots future extensions must empty. fail_fk","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a primary key — dm_rm_pk","text":"updated dm without indicated primary key(s).","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a primary key — dm_rm_pk","text":"","code":"dm_nycflights13() %>%   dm_rm_pk(airports) %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_uk.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a unique key — dm_rm_uk","title":"Remove a unique key — dm_rm_uk","text":"dm_rm_uk() removes one unique keys table leaves dm object otherwise unaltered. error thrown unique key matches selection criteria. selection criteria ambiguous, message unambiguous replacement code shown. Foreign keys never removed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_uk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a unique key — dm_rm_uk","text":"","code":"dm_rm_uk(dm, table = NULL, columns = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_uk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a unique key — dm_rm_uk","text":"dm dm object. table table dm. Pass NULL remove matching keys. columns Table columns, unquoted. refer compound key, use c(col1, col2). Pass NULL (default) remove matching keys. ... dots future extensions must empty.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_rm_uk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a unique key — dm_rm_uk","text":"updated dm without indicated unique key(s).","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns — dm_select","title":"Select columns — dm_select","text":"Select columns dm using syntax similar dplyr::select().","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns — dm_select","text":"","code":"dm_select(dm, table, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns — dm_select","text":"dm dm object. table table dm. ... One unquoted expressions separated commas. can treat variable names positions, use expressions like x:y select ranges variables. Use named arguments, e.g. new_name = old_name, rename selected variables. arguments ... automatically quoted evaluated context column names represent column positions. also support unquoting splicing. See vignette(\"programming\", package = \"dplyr\") introduction concepts. See select helpers details, examples tidyselect helpers, starts_with(), everything(), ...","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select columns — dm_select","text":"updated dm columns table reduced /renamed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select columns — dm_select","text":"key columns renamed, meta-information dm updated accordingly. key columns removed, related relations dropped well.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns — dm_select","text":"","code":"dm_nycflights13() %>%   dm_select(airports, code = faa, altitude = alt) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 47 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_select_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Select and rename tables — dm_select_tbl","title":"Select and rename tables — dm_select_tbl","text":"dm_select_tbl() keeps selected tables relationships, optionally renaming . dm_rename_tbl() renames tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select and rename tables — dm_select_tbl","text":"","code":"dm_select_tbl(dm, ...)  dm_rename_tbl(dm, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dm_select_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select and rename tables — dm_select_tbl","text":"dm dm object. ... One table names tables dm object. tidyselect supported, see dplyr::select() details semantics.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select and rename tables — dm_select_tbl","text":"input dm tables renamed removed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_select_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select and rename tables — dm_select_tbl","text":"","code":"dm_nycflights13() %>%   dm_select_tbl(airports, fl = flights) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airports`, `fl` #> Columns: 27 #> Primary keys: 1 #> Foreign keys: 1 dm_nycflights13() %>%   dm_rename_tbl(ap = airports, fl = flights) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `ap`, `fl`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dm_set_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Color in database diagrams — dm_set_colors","title":"Color in database diagrams — dm_set_colors","text":"dm_set_colors() allows define colors used display tables data model dm_draw(). colors can either either specified hex color codes using names built-R colors. overview colors corresponding standard color names can found bottom http://rpubs.com/krlmlr/colors. dm_get_colors() returns colors defined data model. dm_get_available_colors() returns overview names available colors standard colors also returned grDevices::colors() plus default table color name \"default\".","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_set_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color in database diagrams — dm_set_colors","text":"","code":"dm_set_colors(dm, ...)  dm_get_colors(dm)  dm_get_available_colors()"},{"path":"https://dm.cynkra.com/dev/reference/dm_set_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color in database diagrams — dm_set_colors","text":"dm dm object. ... Colors set form color = table. Allowed colors hex coded colors (quoted) color names dm_get_available_colors(). tidyselect supported, see dplyr::select() details semantics.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_set_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color in database diagrams — dm_set_colors","text":"dm_set_colors(): updated data model. dm_get_colors(), named character vector table names colors names. allows calling dm_set_colors(!!!dm_get_colors(...)). Use tibble::enframe() convert tibble. dm_get_available_colors(), vector available colors.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_set_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color in database diagrams — dm_set_colors","text":"","code":"dm_nycflights13(color = FALSE) %>%   dm_set_colors(     darkblue = starts_with(\"air\"),     \"#5986C4\" = flights   ) %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour # Splicing is supported: nyc_cols <-   dm_nycflights13() %>%   dm_get_colors() nyc_cols #>  #ED7D31FF  #ED7D31FF  #5B9BD5FF  #ED7D31FF  #70AD47FF  #> \"airlines\" \"airports\"  \"flights\"   \"planes\"  \"weather\"   dm_nycflights13(color = FALSE) %>%   dm_set_colors(!!!nyc_cols) %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaplanesplanestailnumflights:tailnum->planes:tailnumweatherweatherorigin, time_hourflights:origin, time_hour->weather:origin, time_hour"},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest columns from a wrapped table — dm_unnest_tbl","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"dm_unnest_tbl() target specific column unnest given table given dm. ptype set keys given, .","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"","code":"dm_unnest_tbl(dm, parent_table, col, ptype)"},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"dm dm. parent_table table dm nested columns. col column unnest (unquoted). ptype dm, used query names primary foreign keys.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"dm_nest_tbl() inverse operation dm_unnest_tbl() differences row column order ignored. opposite true referential constraints tables satisfied.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_unnest_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest columns from a wrapped table — dm_unnest_tbl","text":"","code":"airlines_wrapped <-   dm_nycflights13() %>%   dm_wrap_tbl(airlines)  # The ptype is required for reconstruction. # It can be an empty dm, only primary and foreign keys are considered. ptype <- dm_ptype(dm_nycflights13())  airlines_wrapped %>%   dm_unnest_tbl(airlines, flights, ptype) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `flights` #> Columns: 24 #> Primary keys: 1 #> Foreign keys: 1"},{"path":"https://dm.cynkra.com/dev/reference/dm_unpack_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack columns from a wrapped table — dm_unpack_tbl","title":"Unpack columns from a wrapped table — dm_unpack_tbl","text":"#' @description","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unpack_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack columns from a wrapped table — dm_unpack_tbl","text":"","code":"dm_unpack_tbl(dm, child_table, col, ptype)"},{"path":"https://dm.cynkra.com/dev/reference/dm_unpack_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack columns from a wrapped table — dm_unpack_tbl","text":"dm dm. child_table table dm packed columns. col column unpack (unquoted). ptype dm, used query names primary foreign keys.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unpack_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack columns from a wrapped table — dm_unpack_tbl","text":"dm_unpack_tbl() targets specific column unpack given table given dm. ptype set keys given, . dm_pack_tbl() inverse operation dm_unpack_tbl() differences row column order ignored. opposite true referential constraints tables satisfied rows parent table least one child row, .e. relationship cardinality 1:n 1:1.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_unpack_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack columns from a wrapped table — dm_unpack_tbl","text":"","code":"flights_wrapped <-   dm_nycflights13() %>%   dm_wrap_tbl(flights)  # The ptype is required for reconstruction. # It can be an empty dm, only primary and foreign keys are considered. ptype <- dm_ptype(dm_nycflights13())  flights_wrapped %>%   dm_unpack_tbl(flights, airlines, ptype) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `flights`, `airlines` #> Columns: 24 #> Primary keys: 1 #> Foreign keys: 1"},{"path":"https://dm.cynkra.com/dev/reference/dm_unwrap_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Unwrap a single table dm — dm_unwrap_tbl","title":"Unwrap a single table dm — dm_unwrap_tbl","text":"dm_unwrap_tbl() unwraps tables dm object resulting dm matches given ptype dm. runs sequence dm_unnest_tbl() dm_unpack_tbl() operations dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unwrap_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unwrap a single table dm — dm_unwrap_tbl","text":"","code":"dm_unwrap_tbl(dm, ptype)"},{"path":"https://dm.cynkra.com/dev/reference/dm_unwrap_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unwrap a single table dm — dm_unwrap_tbl","text":"dm dm. ptype dm, used query names primary foreign keys.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_unwrap_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unwrap a single table dm — dm_unwrap_tbl","text":"dm.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_unwrap_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unwrap a single table dm — dm_unwrap_tbl","text":"","code":"roundtrip <-   dm_nycflights13() %>%   dm_wrap_tbl(root = flights) %>%   dm_unwrap_tbl(ptype = dm_ptype(dm_nycflights13())) roundtrip #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `flights`, `airlines`, `airports`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4  # The roundtrip has the same structure but fewer rows: dm_nrow(dm_nycflights13()) #> airlines airports  flights   planes  weather  #>       15       86     1761      945      144  dm_nrow(roundtrip) #>  flights airlines airports   planes  weather  #>     1761       15        3     1112      105"},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator — dm_validate","title":"Validator — dm_validate","text":"dm_validate() checks internal consistency dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator — dm_validate","text":"","code":"dm_validate(x)"},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator — dm_validate","text":"x object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator — dm_validate","text":"Returns dm, invisibly, finishing checks.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validator — dm_validate","text":"theory, exception new_dm(), dm objects created modified functions package valid, function needed. Please file issue dm operation creates invalid object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validator — dm_validate","text":"","code":"dm_validate(dm())  bad_dm <- structure(list(bad = \"dm\"), class = \"dm\") try(dm_validate(bad_dm)) #> Error in abort_dm_invalid(\"A `dm` needs to be a list of one item named `def`.\") :  #>   This `dm` is invalid, reason: A `dm` needs to be a list of one item named `def`."},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap dm into a single tibble dm — dm_wrap_tbl","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"dm_wrap_tbl() creates single tibble dm containing root table enhanced data related relationships stored dm. runs sequence dm_nest_tbl() dm_pack_tbl() operations dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"","code":"dm_wrap_tbl(dm, root, strict = TRUE)"},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"dm cycle free dm object. root Table wrap dm (unquoted). strict Whether fail cyclic dms wrapped single table, FALSE partially wrapped dm returned.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"dm_wrap_tbl() inverse dm_unwrap_tbl(), .e., wrapping unwrapping returns information (disregarding row column order). opposite generally true: since dm_wrap_tbl() keeps rows related directly indirectly rows root table. Even referential constraints satisfied, unwrapping wrapping loses rows parent tables corresponding row child table. function differs dm_flatten_to_tbl() dm_squash_to_tbl() , always return single table, dm object.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/dm_wrap_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap dm into a single tibble dm — dm_wrap_tbl","text":"","code":"dm_nycflights13() %>%   dm_wrap_tbl(root = airlines) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines` #> Columns: 3 #> Primary keys: 1 #> Foreign keys: 0"},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark table for manipulation — dm_zoom_to","title":"Mark table for manipulation — dm_zoom_to","text":"Zooming table dm allows use many dplyr-verbs directly table, retaining context dm object. dm_zoom_to() zooms given table. dm_update_zoomed() overwrites originally zoomed table manipulated table. filter conditions zoomed table added original filter conditions. dm_insert_zoomed() adds new table dm. dm_discard_zoomed() discards zoomed table returns dm zooming. Please refer vignette(\"tech-db-zoom\", package = \"dm\") detailed introduction.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark table for manipulation — dm_zoom_to","text":"","code":"dm_zoom_to(dm, table)  dm_insert_zoomed(dm, new_tbl_name = NULL, repair = \"unique\", quiet = FALSE)  dm_update_zoomed(dm)  dm_discard_zoomed(dm)"},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark table for manipulation — dm_zoom_to","text":"dm dm object. table table dm. new_tbl_name Name new table. repair Either string function. string, must one \"check_unique\", \"minimal\", \"unique\", \"universal\", \"unique_quiet\", \"universal_quiet\". function, invoked vector minimal names must return minimal names, otherwise error thrown. Minimal names never NULL NA. element name, minimal name empty string. Unique names unique. suffix appended duplicate names make unique. Universal names unique syntactic, meaning can safely use names variables without causing syntax error. \"check_unique\" option perform name repair. Instead, error raised names suit \"unique\" criteria. options \"unique_quiet\" \"universal_quiet\" help user calls function indirectly, via another function exposes repair quiet. Specifying repair = \"unique_quiet\" like specifying repair = \"unique\", quiet = TRUE. \"*_quiet\" options used, setting quiet silently overridden. quiet default, user informed renaming caused repairing names. concerns unique universal repairing. Set quiet TRUE silence messages. Users can silence name repair messages setting \"rlib_name_repair_verbosity\" global option \"quiet\".","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark table for manipulation — dm_zoom_to","text":"dm_zoom_to(): dm_zoomed object. dm_insert_zoomed(), dm_update_zoomed() dm_discard_zoomed(): dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark table for manipulation — dm_zoom_to","text":"Whenever possible, key relations original table transferred resulting table using dm_insert_zoomed() dm_update_zoomed(). Functions dplyr supported dm_zoomed: group_by(), summarise(), mutate(), transmute(), filter(), select(), rename() ungroup(). can use functions just like normal table. Calling filter() zoomed dm different calling dm_filter(): latter, filter expression added list table filters stored dm. Furthermore, different join()-variants dplyr also supported, e.g. left_join() semi_join(). (Support nest_join() planned.) join-methods dm_zoomed infer columns join primary foreign keys, extra argument select allows choosing columns RHS table. -- last least -- also tidyr-functions unite() separate() supported dm_zoomed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dm_zoom_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark table for manipulation — dm_zoom_to","text":"","code":"flights_zoomed <- dm_zoom_to(dm_nycflights13(), flights)  flights_zoomed #> # Zoomed table: flights #> # A tibble:     1,761 × 19 #>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>    <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>   #>  1  2013     1    10        3       2359       4     426     437     -11 B6      #>  2  2013     1    10       16       2359      17     447     444       3 B6      #>  3  2013     1    10      450        500     -10     634     648     -14 US      #>  4  2013     1    10      520        525      -5     813     820      -7 UA      #>  5  2013     1    10      530        530       0     824     829      -5 UA      #>  6  2013     1    10      531        540      -9     832     850     -18 AA      #>  7  2013     1    10      535        540      -5    1015    1017      -2 B6      #>  8  2013     1    10      546        600     -14     645     709     -24 B6      #>  9  2013     1    10      549        600     -11     652     724     -32 EV      #> 10  2013     1    10      550        600     -10     649     703     -14 US      #> # … with 1,751 more rows, 9 more variables: flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, and abbreviated variable names #> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay  flights_zoomed_transformed <-   flights_zoomed %>%   mutate(am_pm_dep = ifelse(dep_time < 1200, \"am\", \"pm\")) %>%   # `by`-argument of `left_join()` can be explicitly given   # otherwise the key-relation is used   left_join(airports) %>%   select(year:dep_time, am_pm_dep, everything())  flights_zoomed_transformed #> # Zoomed table: flights #> # A tibble:     1,761 × 27 #>     year month   day dep_time am_pm_dep sched_…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int> <chr>        <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1    10        3 am            2359       4     426     437     -11 #>  2  2013     1    10       16 am            2359      17     447     444       3 #>  3  2013     1    10      450 am             500     -10     634     648     -14 #>  4  2013     1    10      520 am             525      -5     813     820      -7 #>  5  2013     1    10      530 am             530       0     824     829      -5 #>  6  2013     1    10      531 am             540      -9     832     850     -18 #>  7  2013     1    10      535 am             540      -5    1015    1017      -2 #>  8  2013     1    10      546 am             600     -14     645     709     -24 #>  9  2013     1    10      549 am             600     -11     652     724     -32 #> 10  2013     1    10      550 am             600     -10     649     703     -14 #> # … with 1,751 more rows, 17 more variables: carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, #> #   hour <dbl>, minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>, #> #   lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, and abbreviated #> #   variable names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, #> #   ⁵​arr_delay  # replace table `flights` with the zoomed table flights_zoomed_transformed %>%   dm_update_zoomed() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 61 #> Primary keys: 4 #> Foreign keys: 4  # insert the zoomed table as a new table flights_zoomed_transformed %>%   dm_insert_zoomed(\"extended_flights\") %>%   dm_draw() %0  airlinesairlinescarrierairportsairportsfaaextended_flightsextended_flightscarriertailnumoriginorigin, time_hourextended_flights:carrier->airlines:carrierextended_flights:origin->airports:faaplanesplanestailnumextended_flights:tailnum->planes:tailnumweatherweatherorigin, time_hourextended_flights:origin, time_hour->weather:origin, time_hourflightsflightscarriertailnumoriginorigin, time_hourflights:carrier->airlines:carrierflights:origin->airports:faaflights:tailnum->planes:tailnumflights:origin, time_hour->weather:origin, time_hour # discard the zoomed table flights_zoomed_transformed %>%   dm_discard_zoomed() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/dplyr_join.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr join methods for zoomed dm objects — dplyr_join","title":"dplyr join methods for zoomed dm objects — dplyr_join","text":"Use methods without '.dm_zoomed' suffix (see examples).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr join methods for zoomed dm objects — dplyr_join","text":"","code":"# S3 method for dm_zoomed left_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl left_join(x, y, by = NULL, copy = NULL, suffix = NULL, ..., keep = FALSE)  # S3 method for dm_zoomed inner_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl inner_join(x, y, by = NULL, copy = NULL, suffix = NULL, ..., keep = FALSE)  # S3 method for dm_zoomed full_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl full_join(x, y, by = NULL, copy = NULL, suffix = NULL, ..., keep = FALSE)  # S3 method for dm_zoomed right_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl right_join(x, y, by = NULL, copy = NULL, suffix = NULL, ..., keep = FALSE)  # S3 method for dm_zoomed semi_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl semi_join(x, y, by = NULL, copy = NULL, ...)  # S3 method for dm_zoomed anti_join(x, y, by = NULL, copy = NULL, suffix = NULL, select = NULL, ...)  # S3 method for dm_keyed_tbl anti_join(x, y, by = NULL, copy = NULL, ...)  # S3 method for dm_zoomed nest_join(x, y, by = NULL, copy = FALSE, keep = FALSE, name = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dplyr_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr join methods for zoomed dm objects — dplyr_join","text":"x, y tbls join. x dm_zoomed y another table dm. left NULL (default), join performed via foreign key relation exists originally zoomed table (now x) table (y). provide value (syntax see dplyr::join), can also join tables connected dm. copy Disabled, since tables dm definition src. suffix Disabled, since columns disambiguated automatically necessary, changing column names table_name.column_name. select Select subset RHS-table's columns, syntax select = c(col_1, col_2, col_3) (unquoted quoted). argument specific join-methods dm_zoomed. table's column(s) automatically added missing selection. ... see dplyr::join keep new list-column contain join keys? default preserve join keys inequality joins. name name list-column created join. NULL, default, name y used.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dplyr join methods for zoomed dm objects — dplyr_join","text":"","code":"flights_dm <- dm_nycflights13() dm_zoom_to(flights_dm, flights) %>%   left_join(airports, select = c(faa, name)) #> # Zoomed table: flights #> # A tibble:     1,761 × 20 #>     year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>    <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>   #>  1  2013     1    10        3       2359       4     426     437     -11 B6      #>  2  2013     1    10       16       2359      17     447     444       3 B6      #>  3  2013     1    10      450        500     -10     634     648     -14 US      #>  4  2013     1    10      520        525      -5     813     820      -7 UA      #>  5  2013     1    10      530        530       0     824     829      -5 UA      #>  6  2013     1    10      531        540      -9     832     850     -18 AA      #>  7  2013     1    10      535        540      -5    1015    1017      -2 B6      #>  8  2013     1    10      546        600     -14     645     709     -24 B6      #>  9  2013     1    10      549        600     -11     652     724     -32 EV      #> 10  2013     1    10      550        600     -10     649     703     -14 US      #> # … with 1,751 more rows, 10 more variables: flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>, name <chr>, and abbreviated variable names #> #   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay  # this should illustrate that tables don't necessarily need to be connected dm_zoom_to(flights_dm, airports) %>%   semi_join(airlines, by = \"name\") #> # Zoomed table: airports #> # A tibble:     0 × 8 #> # … with 8 variables: faa <chr>, name <chr>, lat <dbl>, lon <dbl>, alt <dbl>, #> #   tz <dbl>, dst <chr>, tzone <chr>"},{"path":"https://dm.cynkra.com/dev/reference/dplyr_src.html","id":null,"dir":"Reference","previous_headings":"","what":"dm as data source — dplyr_src","title":"dm as data source — dplyr_src","text":"methods deprecated limited use, notion \"source\" seems getting phased dplyr. Use ways access tables dm.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dm as data source — dplyr_src","text":"","code":"dm_get_src(x)  # S3 method for dm tbl(src, from, ...)  # S3 method for dm src_tbls(x, ...)  # S3 method for dm copy_to(   dest,   df,   name = deparse(substitute(df)),   overwrite = FALSE,   temporary = TRUE,   repair = \"unique\",   quiet = FALSE,   ... )"},{"path":"https://dm.cynkra.com/dev/reference/dplyr_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dm as data source — dplyr_src","text":"src dm object. length one character variable containing name requested table ... See original function documentation dest copy_to.dm(): dm object table copied. df copy_to.dm(): table (can different src) name copy_to.dm(): See dplyr::copy_to() overwrite copy_to.dm(): See dplyr::copy_to(); TRUE leads error temporary copy_to.dm(): dm DB, copied version df written temporarily DB. connection reset longer available. repair, quiet Name repair options; cf. vctrs::vec_as_names()","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_src.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dm as data source — dplyr_src","text":"Use dm_get_con() instead dm_get_src() get DBI connetion dm object Use [[ instead tbl() access individual tables dm object. Get names dm_get_tables() instead calling dm_get_src() list table names dm object. Use copy_to() table dm() instead copy_to() dm object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_table_manipulation.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr table manipulation methods for zoomed dm objects — dplyr_table_manipulation","title":"dplyr table manipulation methods for zoomed dm objects — dplyr_table_manipulation","text":"Use methods without '.dm_zoomed' suffix (see examples).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_table_manipulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr table manipulation methods for zoomed dm objects — dplyr_table_manipulation","text":"","code":"# S3 method for dm_zoomed filter(.data, ...)  # S3 method for dm_zoomed mutate(.data, ...)  # S3 method for dm_zoomed transmute(.data, ...)  # S3 method for dm_zoomed select(.data, ...)  # S3 method for dm_zoomed relocate(.data, ..., .before = NULL, .after = NULL)  # S3 method for dm_zoomed rename(.data, ...)  # S3 method for dm_zoomed distinct(.data, ..., .keep_all = FALSE)  # S3 method for dm_zoomed arrange(.data, ...)  # S3 method for dm_zoomed slice(.data, ..., .keep_pk = NULL)  # S3 method for dm_zoomed group_by(.data, ...)  # S3 method for dm_keyed_tbl group_by(.data, ...)  # S3 method for dm_zoomed ungroup(x, ...)  # S3 method for dm_zoomed summarise(.data, ...)  # S3 method for dm_keyed_tbl summarise(.data, ...)  # S3 method for dm_zoomed count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = group_by_drop_default(x) )  # S3 method for dm_zoomed tally(x, ...)  # S3 method for dm_zoomed pull(.data, var = -1, ...)  # S3 method for dm_zoomed compute(x, ...)"},{"path":"https://dm.cynkra.com/dev/reference/dplyr_table_manipulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr table manipulation methods for zoomed dm objects — dplyr_table_manipulation","text":".data object class dm_zoomed ... see corresponding function package dplyr tidyr ., .<tidy-select> Destination columns selected .... Supplying neither move columns left-hand side; specifying error. .keep_all distinct.dm_zoomed(): see dplyr::distinct() .keep_pk slice.dm_zoomed: Logical, TRUE, primary key retained transformation. FALSE, dropped. default, value NULL, causes function issue message case primary key available zoomed table. argument specific slice.dm_zoomed() method. x ungroup.dm_zoomed: object class dm_zoomed wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, use nn. column called n nn, 'll use nnn, , adding ns gets new name. .drop count(): FALSE include counts empty groups (.e. levels factors exist data). Deprecated add_count() since actually affect output. var variable specified : literal variable name positive integer, giving position counting left negative integer, giving position counting right. default returns last column (assumption column created recently). argument taken expression supports quasiquotation (can unquote column names column locations).","code":""},{"path":"https://dm.cynkra.com/dev/reference/dplyr_table_manipulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dplyr table manipulation methods for zoomed dm objects — dplyr_table_manipulation","text":"","code":"zoomed <- dm_nycflights13() %>%   dm_zoom_to(flights) %>%   group_by(month) %>%   arrange(desc(day)) %>%   summarize(avg_air_time = mean(air_time, na.rm = TRUE)) zoomed #> # Zoomed table: flights #> # A tibble:     2 × 2 #>   month avg_air_time #>   <int>        <dbl> #> 1     1         147. #> 2     2         149. dm_insert_zoomed(zoomed, new_tbl_name = \"avg_air_time_per_month\") #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather`, `avg_air_time_per_month` #> Columns: 55 #> Primary keys: 4 #> Foreign keys: 4"},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Check table relations — examine_cardinality","title":"Check table relations — examine_cardinality","text":"check_cardinality_...() functions test following conditions: rows x unique? rows y subset rows x? relation x y meet cardinality requirements? One row x must correspond requested number rows y, e.g. _0_1 means must zero one rows y row x. examine_cardinality() also checks first two points subsequently determines type cardinality. convenience, x_select y_select arguments allow restricting check set key columns without affecting return value.","code":""},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check table relations — examine_cardinality","text":"","code":"check_cardinality_0_n(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )  check_cardinality_1_n(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )  check_cardinality_1_1(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )  check_cardinality_0_1(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )  examine_cardinality(   x,   y,   ...,   x_select = NULL,   y_select = NULL,   by_position = NULL )"},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check table relations — examine_cardinality","text":"x Parent table, data frame lazy table. y Child table, data frame lazy table. ... dots future extensions must empty. x_select, y_select Key columns restrict check, processed dplyr::select(). by_position Set TRUE ignore column names match position instead. default means matching name, use x_select /y_select align names.","code":""},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check table relations — examine_cardinality","text":"check_cardinality_...() return x, invisibly, check passed, support pipes. Otherwise error thrown reason explained. examine_cardinality() returns character variable specifying type relationship two columns.","code":""},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check table relations — examine_cardinality","text":"cardinality functions accept parent child table (x y). rows x must unique, rows y must subset rows x. x_select y_select arguments allow restricting check set key columns without affecting return value. given, arguments must refer number key columns. cardinality specifications \"0_n\", \"1_n\", \"0_1\", \"1_1\" refer expected relation child table parent table. \"0\", \"1\" \"n\" refer occurrences value combinations y correspond combination columns parent table. \"n\" means \"one\" context, upper limit. \"0_n\": restrictions, row x least 0 n corresponding occurrences y. \"1_n\": row x least 1 n corresponding occurrences y. means \"surjective\" mapping child table parent table, .e. parent table row exists least child table. \"0_1\": row x least 0 1 corresponding occurrence y. means \"injective\" mapping child table parent table, .e. combination values parent table columns addressed multiple times. parent table rows referred . \"1_1\": row x occurs exactly y. means \"bijective\" (\"injective\" \"surjective\") mapping child table parent table, .e. sets rows identical. Finally, examine_cardinality() tests returns nature relationship (injective, surjective, bijective, none ) two given sets columns. either x unique rows y missing x, requirements cardinality test fulfilled. error thrown, result contain information prerequisite violated.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/examine_cardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check table relations — examine_cardinality","text":"","code":"d1 <- tibble::tibble(a = 1:5) d2 <- tibble::tibble(a = c(1:4, 4L)) d3 <- tibble::tibble(c = c(1:5, 5L), d = 0) # This does not pass, `a` is not unique key of d2: try(check_cardinality_0_n(d2, d1)) #> Error in abort_not_unique_key(x_label, orig_names) :  #>   (`a`) not a unique key of `d2`.  # Columns are matched by name by default: try(check_cardinality_0_n(d1, d3)) #> Error in check_card_api_impl({ :  #>   `by_position = FALSE` or `by_position = NULL` require column names in `x` to match those in `y`.  # This passes, multiple values in d3$c are allowed: check_cardinality_0_n(d1, d2)  # This does not pass, injectivity is violated: try(check_cardinality_1_1(d1, d3, y_select = c(a = c))) #> Error in abort_not_bijective(y_label, colnames(y)) :  #>   1..1 cardinality (bijectivity) is not given: Column (`a`) in table `d3` contains duplicate values. try(check_cardinality_0_1(d1, d3, x_select = c(c = a))) #> Error in abort_not_injective(y_label, colnames(y)) :  #>   0..1 cardinality (injectivity from child table to parent table) is not given: Column (`c`) in table `d3` contains duplicate values.  # What kind of cardinality is it? examine_cardinality(d1, d3, x_select = c(c = a)) #> [1] \"surjective mapping (child: 1 to n -> parent: 1)\" examine_cardinality(d1, d2) #> [1] \"generic mapping (child: 0 to n -> parent: 1)\""},{"path":"https://dm.cynkra.com/dev/reference/glimpse.dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a glimpse of your dm object — glimpse.dm","title":"Get a glimpse of your dm object — glimpse.dm","text":"glimpse() provides overview (dimensions, column data types, primary keys, etc.) tables included dm object. additionally print details outgoing foreign keys child table. glimpse() provided pillar package, re-exported dm. See pillar::glimpse() details.","code":""},{"path":"https://dm.cynkra.com/dev/reference/glimpse.dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a glimpse of your dm object — glimpse.dm","text":"","code":"# S3 method for dm glimpse(x, width = NULL, ...)  # S3 method for dm_zoomed glimpse(x, width = NULL, ...)"},{"path":"https://dm.cynkra.com/dev/reference/glimpse.dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a glimpse of your dm object — glimpse.dm","text":"x dm object. width Controls maximum number columns line used printing. NULL, getOption(\"width\") consulted. ... Passed pillar::glimpse().","code":""},{"path":"https://dm.cynkra.com/dev/reference/glimpse.dm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a glimpse of your dm object — glimpse.dm","text":"","code":"dm_nycflights13() %>% glimpse() #> dm of 5 tables: `airlines`, `airports`, `flights`, `planes`, `weather` #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Table: `airlines` #> Primary key: `carrier` #>  #> Rows: 15 #> Columns: 2 #> $ carrier <chr> \"9E\", \"AA\", \"AS\", \"B6\", \"DL\", \"EV\", \"F9\", \"FL\", \"HA\", \"MQ\", \"U… #> $ name    <chr> \"Endeavor Air Inc.\", \"American Airlines Inc.\", \"Alaska Airline… #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Table: `airports` #> Primary key: `faa` #>  #> Rows: 86 #> Columns: 8 #> $ faa   <chr> \"ALB\", \"ATL\", \"AUS\", \"BDL\", \"BHM\", \"BNA\", \"BOS\", \"BTV\", \"BUF\", \"… #> $ name  <chr> \"Albany Intl\", \"Hartsfield Jackson Atlanta Intl\", \"Austin Bergst… #> $ lat   <dbl> 42.74827, 33.63672, 30.19453, 41.93889, 33.56294, 36.12447, 42.3… #> $ lon   <dbl> -73.80169, -84.42807, -97.66989, -72.68322, -86.75355, -86.67819… #> $ alt   <dbl> 285, 1026, 542, 173, 644, 599, 19, 335, 724, 778, 146, 236, 1228… #> $ tz    <dbl> -5, -5, -6, -5, -6, -6, -5, -5, -5, -8, -5, -5, -5, -5, -5, -5, … #> $ dst   <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\",… #> $ tzone <chr> \"America/New_York\", \"America/New_York\", \"America/Chicago\", \"Amer… #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Table: `flights` #> 4 outgoing foreign key(s): #>   `carrier` -> `airlines$carrier` no_action #>   `origin` -> `airports$faa` no_action #>   `tailnum` -> `planes$tailnum` no_action #>   (`origin`, `time_hour`) -> (`weather$origin`, `weather$time_hour`) no_action #>  #> Rows: 1,761 #> Columns: 19 #> $ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2… #> $ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ day            <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,… #> $ dep_time       <int> 3, 16, 450, 520, 530, 531, 535, 546, 549, 550, 553, 553… #> $ sched_dep_time <int> 2359, 2359, 500, 525, 530, 540, 540, 600, 600, 600, 600… #> $ dep_delay      <dbl> 4, 17, -10, -5, 0, -9, -5, -14, -11, -10, -7, -7, -7, -… #> $ arr_time       <int> 426, 447, 634, 813, 824, 832, 1015, 645, 652, 649, 711,… #> $ sched_arr_time <int> 437, 444, 648, 820, 829, 850, 1017, 709, 724, 703, 715,… #> $ arr_delay      <dbl> -11, 3, -14, -7, -5, -18, -2, -24, -32, -14, -4, -33, -… #> $ carrier        <chr> \"B6\", \"B6\", \"US\", \"UA\", \"UA\", \"AA\", \"B6\", \"B6\", \"EV\", \"… #> $ flight         <int> 727, 739, 1117, 1018, 404, 1141, 725, 380, 6055, 2114, … #> $ tailnum        <chr> \"N571JB\", \"N564JB\", \"N171US\", \"N35204\", \"N815UA\", \"N5EA… #> $ origin         <chr> \"JFK\", \"JFK\", \"EWR\", \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"EWR\",… #> $ dest           <chr> \"BQN\", \"PSE\", \"CLT\", \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"BOS\",… #> $ air_time       <dbl> 183, 191, 78, 215, 210, 149, 191, 39, 48, 36, 51, 201, … #> $ distance       <dbl> 1576, 1617, 529, 1400, 1416, 1089, 1576, 200, 229, 184,… #> $ hour           <dbl> 23, 23, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,… #> $ minute         <dbl> 59, 59, 0, 25, 30, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0… #> $ time_hour      <dttm> 2013-01-10 23:00:00, 2013-01-10 23:00:00, 2013-01-10 0… #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Table: `planes` #> Primary key: `tailnum` #>  #> Rows: 945 #> Columns: 9 #> $ tailnum      <chr> \"N10156\", \"N104UW\", \"N10575\", \"N105UW\", \"N110UW\", \"N11106… #> $ year         <int> 2004, 1999, 2002, 1999, 1999, 2002, 2002, 2002, 2003, 200… #> $ type         <chr> \"Fixed wing multi engine\", \"Fixed wing multi engine\", \"Fi… #> $ manufacturer <chr> \"EMBRAER\", \"AIRBUS INDUSTRIE\", \"EMBRAER\", \"AIRBUS INDUSTR… #> $ model        <chr> \"EMB-145XR\", \"A320-214\", \"EMB-145LR\", \"A320-214\", \"A320-2… #> $ engines      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ seats        <int> 55, 182, 55, 182, 182, 55, 55, 55, 55, 55, 55, 55, 55, 55… #> $ speed        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ engine       <chr> \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turb… #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Table: `weather` #> Primary key: (`origin`, `time_hour`) #>  #> Rows: 144 #> Columns: 15 #> $ origin     <chr> \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EW… #> $ year       <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,… #> $ month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ day        <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,… #> $ hour       <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1… #> $ temp       <dbl> 41.00, 39.02, 39.02, 39.92, 41.00, 41.00, 39.92, 41.00, 42.… #> $ dewp       <dbl> 32.00, 30.02, 28.94, 26.96, 26.06, 26.06, 24.98, 24.98, 24.… #> $ humid      <dbl> 70.08, 69.86, 66.85, 59.50, 54.97, 54.97, 54.81, 52.56, 48.… #> $ wind_dir   <dbl> 230, 210, 230, 270, 320, 300, 280, 330, 330, 320, 320, 330,… #> $ wind_speed <dbl> 8.05546, 9.20624, 6.90468, 5.75390, 6.90468, 12.65858, 6.90… #> $ wind_gust  <dbl> NA, NA, NA, NA, NA, 20.71404, 17.26170, NA, NA, 26.46794, N… #> $ precip     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ pressure   <dbl> 1024.6, 1025.9, 1026.9, 1027.5, 1028.2, 1029.0, 1030.0, 103… #> $ visib      <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,… #> $ time_hour  <dttm> 2013-01-10 00:00:00, 2013-01-10 01:00:00, 2013-01-10 02:00… #>  #> ────────────────────────────────────────────────────────────────────────────────  dm_nycflights13() %>%   dm_zoom_to(flights) %>%   glimpse() #> dm of 5 tables: `airlines`, `airports`, `flights`, `planes`, `weather` #>  #> Zoomed table: `flights` #> 4 outgoing foreign key(s): #>   `carrier` -> `airlines$carrier` no_action #>   `origin` -> `airports$faa` no_action #>   `tailnum` -> `planes$tailnum` no_action #>   (`origin`, `time_hour`) -> (`weather$origin`, `weather$time_hour`) no_action #>  #> Rows: 1,761 #> Columns: 19 #> $ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2… #> $ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ day            <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,… #> $ dep_time       <int> 3, 16, 450, 520, 530, 531, 535, 546, 549, 550, 553, 553… #> $ sched_dep_time <int> 2359, 2359, 500, 525, 530, 540, 540, 600, 600, 600, 600… #> $ dep_delay      <dbl> 4, 17, -10, -5, 0, -9, -5, -14, -11, -10, -7, -7, -7, -… #> $ arr_time       <int> 426, 447, 634, 813, 824, 832, 1015, 645, 652, 649, 711,… #> $ sched_arr_time <int> 437, 444, 648, 820, 829, 850, 1017, 709, 724, 703, 715,… #> $ arr_delay      <dbl> -11, 3, -14, -7, -5, -18, -2, -24, -32, -14, -4, -33, -… #> $ carrier        <chr> \"B6\", \"B6\", \"US\", \"UA\", \"UA\", \"AA\", \"B6\", \"B6\", \"EV\", \"… #> $ flight         <int> 727, 739, 1117, 1018, 404, 1141, 725, 380, 6055, 2114, … #> $ tailnum        <chr> \"N571JB\", \"N564JB\", \"N171US\", \"N35204\", \"N815UA\", \"N5EA… #> $ origin         <chr> \"JFK\", \"JFK\", \"EWR\", \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"EWR\",… #> $ dest           <chr> \"BQN\", \"PSE\", \"CLT\", \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"BOS\",… #> $ air_time       <dbl> 183, 191, 78, 215, 210, 149, 191, 39, 48, 36, 51, 201, … #> $ distance       <dbl> 1576, 1617, 529, 1400, 1416, 1089, 1576, 200, 229, 184,… #> $ hour           <dbl> 23, 23, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,… #> $ minute         <dbl> 59, 59, 0, 25, 30, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0… #> $ time_hour      <dttm> 2013-01-10 23:00:00, 2013-01-10 23:00:00, 2013-01-10 0…"},{"path":"https://dm.cynkra.com/dev/reference/json_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON nest — json_nest","title":"JSON nest — json_nest","text":"wrapper around tidyr::nest() stores nested data JSON columns.","code":""},{"path":"https://dm.cynkra.com/dev/reference/json_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON nest — json_nest","text":"","code":"json_nest(.data, ..., .names_sep = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/json_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON nest — json_nest","text":".data data frame, data frame extension (e.g. tibble),  lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> Columns pack, specified using name-variable pairs form new_col = c(col1, col2, col3). right hand side can valid tidy select expression. .names_sep NULL, default, names left .","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/json_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON nest — json_nest","text":"","code":"df <- tibble::tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1) nested <- json_nest(df, data = c(y, z)) nested #> # A tibble: 3 × 2 #>       x data                                                      #>   <dbl> <chr>                                                     #> 1     1 \"[{\\\"y\\\":1,\\\"z\\\":6},{\\\"y\\\":2,\\\"z\\\":5},{\\\"y\\\":3,\\\"z\\\":4}]\" #> 2     2 \"[{\\\"y\\\":4,\\\"z\\\":3},{\\\"y\\\":5,\\\"z\\\":2}]\"                   #> 3     3 \"[{\\\"y\\\":6,\\\"z\\\":1}]\""},{"path":"https://dm.cynkra.com/dev/reference/json_nest_join.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON nest join — json_nest_join","title":"JSON nest join — json_nest_join","text":"wrapper around dplyr::nest_join() stores joined data JSON column. json_nest_join() returns rows columns x new JSON columns contains nested matches y.","code":""},{"path":"https://dm.cynkra.com/dev/reference/json_nest_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON nest join — json_nest_join","text":"","code":"json_nest_join(x, y, by = NULL, ..., copy = FALSE, keep = FALSE, name = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/json_nest_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON nest join — json_nest_join","text":"x, y pair data frames data frame extensions (e.g. tibble). join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). ... parameters passed onto methods. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . keep new list-column contain join keys? default preserve join keys inequality joins. name name list-column created join. NULL, default, name y used.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/json_nest_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON nest join — json_nest_join","text":"","code":"df1 <- tibble::tibble(x = 1:3) df2 <- tibble::tibble(x = c(1, 1, 2), y = c(\"first\", \"second\", \"third\")) df3 <- json_nest_join(df1, df2) #> Joining with `by = join_by(x)` df3 #> # A tibble: 3 × 2 #>       x df2        #>   <dbl> <list>     #> 1     1 <json [1]> #> 2     2 <json [1]> #> 3     3 <json [1]> df3$df2 #> [[1]] #> [{\"y\":\"first\"},{\"y\":\"second\"}]  #>  #> [[2]] #> [{\"y\":\"third\"}]  #>  #> [[3]] #> []  #>"},{"path":"https://dm.cynkra.com/dev/reference/json_pack.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON pack — json_pack","title":"JSON pack — json_pack","text":"wrapper around tidyr::pack() stores packed data JSON columns.","code":""},{"path":"https://dm.cynkra.com/dev/reference/json_pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON pack — json_pack","text":"","code":"json_pack(.data, ..., .names_sep = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/json_pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON pack — json_pack","text":".data data frame, data frame extension (e.g. tibble),  lazy data frame (e.g. dbplyr dtplyr). ... <tidy-select> Columns pack, specified using name-variable pairs form new_col = c(col1, col2, col3). right hand side can valid tidy select expression. .names_sep NULL, default, names left .","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/json_pack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON pack — json_pack","text":"","code":"df <- tibble::tibble(x1 = 1:3, x2 = 4:6, x3 = 7:9, y = 1:3) packed <- json_pack(df, x = c(x1, x2, x3), y = y) packed #> # A tibble: 3 × 2 #>   x                              y           #>   <chr>                          <chr>       #> 1 \"{\\\"x1\\\":1,\\\"x2\\\":4,\\\"x3\\\":7}\" \"{\\\"y\\\":1}\" #> 2 \"{\\\"x1\\\":2,\\\"x2\\\":5,\\\"x3\\\":8}\" \"{\\\"y\\\":2}\" #> 3 \"{\\\"x1\\\":3,\\\"x2\\\":6,\\\"x3\\\":9}\" \"{\\\"y\\\":3}\""},{"path":"https://dm.cynkra.com/dev/reference/json_pack_join.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON pack join — json_pack_join","title":"JSON pack join — json_pack_join","text":"wrapper around pack_join() stores joined data JSON column. json_pack_join() returns rows columns x new JSON columns contains packed matches y.","code":""},{"path":"https://dm.cynkra.com/dev/reference/json_pack_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON pack join — json_pack_join","text":"","code":"json_pack_join(x, y, by = NULL, ..., copy = FALSE, keep = FALSE, name = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/json_pack_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON pack join — json_pack_join","text":"x, y pair data frames data frame extensions (e.g. tibble). join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). ... parameters passed onto methods. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . keep new list-column contain join keys? default preserve join keys inequality joins. name name list-column created join. NULL, default, name y used.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/json_pack_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON pack join — json_pack_join","text":"","code":"df1 <- tibble::tibble(x = 1:3) df2 <- tibble::tibble(x = c(1, 1, 2), y = c(\"first\", \"second\", \"third\")) df3 <- json_pack_join(df1, df2) #> Joining with `by = join_by(x)` df3 #> # A tibble: 4 × 2 #>       x df2        #>   <dbl> <list>     #> 1     1 <json [1]> #> 2     1 <json [1]> #> 3     2 <json [1]> #> 4     3 <json [1]> df3$df2 #> [[1]] #> [{\"y\":\"first\"}]  #>  #> [[2]] #> [{\"y\":\"second\"}]  #>  #> [[3]] #> [{\"y\":\"third\"}]  #>  #> [[4]] #> [{}]  #>"},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Materialize — materialize","title":"Materialize — materialize","text":"compute() materializes tables dm new (temporary permanent) tables database. collect() downloads tables dm object local tibbles.","code":""},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Materialize — materialize","text":"","code":"# S3 method for dm compute(x, ...)  # S3 method for dm collect(x, ..., progress = NA)"},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Materialize — materialize","text":"x dm object. ... Passed compute(). progress Whether display progress bar, NA (default) hide non-interactive mode, show interactive mode. Requires 'progress' package.","code":""},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Materialize — materialize","text":"dm object structure input.","code":""},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Materialize — materialize","text":"Called dm object, methods create copy tables dm. Depending size data may take long time.","code":""},{"path":"https://dm.cynkra.com/dev/reference/materialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Materialize — materialize","text":"","code":"financial <- dm_financial_sqlite()  financial %>%   pull_tbl(districts) %>%   dbplyr::remote_name() #> <IDENT> `districts`  # compute() copies the data to new tables: financial %>%   compute() %>%   pull_tbl(districts) %>%   dbplyr::remote_name() #> <IDENT> dbplyr_005  # collect() returns a local dm: financial %>%   collect() %>%   pull_tbl(districts) %>%   class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"https://dm.cynkra.com/dev/reference/pack_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack Join — pack_join","title":"Pack Join — pack_join","text":"pack_join() returns rows columns x new packed column contains matches y.","code":""},{"path":"https://dm.cynkra.com/dev/reference/pack_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack Join — pack_join","text":"","code":"pack_join(x, y, by = NULL, ..., copy = FALSE, keep = FALSE, name = NULL)  # S3 method for dm_zoomed pack_join(x, y, by = NULL, ..., copy = FALSE, keep = FALSE, name = NULL)"},{"path":"https://dm.cynkra.com/dev/reference/pack_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack Join — pack_join","text":"x, y pair data frames data frame extensions (e.g. tibble). join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). ... parameters passed onto methods. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . keep new list-column contain join keys? default preserve join keys inequality joins. name name list-column created join. NULL, default, name y used.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/pack_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pack Join — pack_join","text":"","code":"df1 <- tibble::tibble(x = 1:3) df2 <- tibble::tibble(x = c(1, 1, 2), y = c(\"first\", \"second\", \"third\")) pack_join(df1, df2) #> Joining with `by = join_by(x)` #> # A tibble: 4 × 2 #>       x df2$y  #>   <dbl> <chr>  #> 1     1 first  #> 2     1 second #> 3     2 third  #> 4     3 NA"},{"path":"https://dm.cynkra.com/dev/reference/pull_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a table — pull_tbl","title":"Retrieve a table — pull_tbl","text":"generic methods dm classes: pull_tbl.dm() can chose table dm want retrieve. pull_tbl.dm_zoomed() retrieve zoomed table current state.","code":""},{"path":"https://dm.cynkra.com/dev/reference/pull_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a table — pull_tbl","text":"","code":"pull_tbl(dm, table, ..., keyed = FALSE)"},{"path":"https://dm.cynkra.com/dev/reference/pull_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a table — pull_tbl","text":"dm dm object. table One unquoted table name pull_tbl.dm(), ignored pull_tbl.dm_zoomed(). ... dots future extensions must empty. keyed Set TRUE return objects internal class \"dm_keyed_tbl\" contain information primary foreign keys individual table objects. allows using dplyr workflows tables later reconstruct dm object. See dm_deconstruct() function generates corresponding code existing dm object, vignette(\"tech-dm-keyed\") details.","code":""},{"path":"https://dm.cynkra.com/dev/reference/pull_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a table — pull_tbl","text":"requested table.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/pull_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a table — pull_tbl","text":"","code":"# For an unzoomed dm you need to specify the table to pull: dm_nycflights13() %>%   pull_tbl(airports) #> # A tibble: 86 × 8 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows  # If zoomed, pulling detaches the zoomed table from the dm: dm_nycflights13() %>%   dm_zoom_to(airports) %>%   pull_tbl() #> # A tibble: 86 × 8 #>    faa   name                                 lat    lon   alt    tz dst   tzone #>    <chr> <chr>                              <dbl>  <dbl> <dbl> <dbl> <chr> <chr> #>  1 ALB   Albany Intl                         42.7  -73.8   285    -5 A     Amer… #>  2 ATL   Hartsfield Jackson Atlanta Intl     33.6  -84.4  1026    -5 A     Amer… #>  3 AUS   Austin Bergstrom Intl               30.2  -97.7   542    -6 A     Amer… #>  4 BDL   Bradley Intl                        41.9  -72.7   173    -5 A     Amer… #>  5 BHM   Birmingham Intl                     33.6  -86.8   644    -6 A     Amer… #>  6 BNA   Nashville Intl                      36.1  -86.7   599    -6 A     Amer… #>  7 BOS   General Edward Lawrence Logan Intl  42.4  -71.0    19    -5 A     Amer… #>  8 BTV   Burlington Intl                     44.5  -73.2   335    -5 A     Amer… #>  9 BUF   Buffalo Niagara Intl                42.9  -78.7   724    -5 A     Amer… #> 10 BUR   Bob Hope                            34.2 -118.    778    -8 A     Amer… #> # … with 76 more rows"},{"path":"https://dm.cynkra.com/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%, anti_join, arrange, collect, compute, copy_to, filter, full_join, group_by, inner_join, left_join, mutate, rename, right_join, rows_append, rows_delete, rows_insert, rows_patch, rows_update, rows_upsert, select, semi_join, src_tbls, summarise, summarize, tbl, transmute, ungroup pillar glimpse tibble tibble tidyr separate, unite","code":""},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"Perform table fusion combining two tables common (key) column, removing column. reunite_parent_child(): joining two tables column id_column, column removed. transformation roughly inverse decompose_table() . reunite_parent_child_from_list(): joining two tables column id_column, id_column removed. function almost exactly inverse decompose_table() (order columns retained, original row names lost).","code":""},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"","code":"reunite_parent_child(child_table, parent_table, id_column)  reunite_parent_child_from_list(list_of_parent_child_tables, id_column)"},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"child_table Table (possibly created decompose_table()) references parent_table parent_table Table (possibly created decompose_table()). id_column Identical name referencing / referenced column child_table/parent_table. list_of_parent_child_tables Cf arguments child_table parent_table reunite_parent_child(), named list (created decompose_table()).","code":""},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"wide table produced joining two given tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"functions marked \"experimental\" seem useful applied table dm object. Changing interface later seems harmless functions likely used interactively.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/reference/reunite_parent_child.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two tables that are linked by a foreign key relation — reunite_parent_child","text":"","code":"decomposed_table <- decompose_table(mtcars, new_id, am, gear, carb) ct <- decomposed_table$child_table pt <- decomposed_table$parent_table  reunite_parent_child(ct, pt, new_id) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 reunite_parent_child_from_list(decomposed_table, new_id) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://dm.cynkra.com/dev/reference/rows-dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Modifying rows for multiple tables — rows-dm","title":"Modifying rows for multiple tables — rows-dm","text":"functions provide framework updating data existing tables. Unlike compute(), copy_to() copy_dm_to(), new tables created database. operations expect existing new data presented two compatible dm objects data source. functions make sure tables target dm processed topological order parent (dimension) tables receive insertions child (fact) tables. operations, contrast operations, may lead irreversible changes underlying database. Therefore, -place operation must requested explicitly in_place = TRUE. default, informative message given. dm_rows_insert() adds new records via rows_insert() conflict = \"ignore\". Duplicate records silently discarded. operation requires primary keys tables, use dm_rows_append() insert unconditionally. dm_rows_append() adds new records via rows_append(). primary keys must differ existing records. must ensured caller might checked underlying database. Use in_place = FALSE apply dm_examine_constraints() check beforehand. dm_rows_update() updates existing records via rows_update(). Primary keys must match records updated. dm_rows_patch() updates missing values existing records via rows_patch(). Primary keys must match records patched. dm_rows_upsert() updates existing records adds new records, based primary key, via rows_upsert(). dm_rows_delete() removes matching records via rows_delete(), based primary key. order tables processed reversed.","code":""},{"path":"https://dm.cynkra.com/dev/reference/rows-dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modifying rows for multiple tables — rows-dm","text":"","code":"dm_rows_insert(x, y, ..., in_place = NULL, progress = NA)  dm_rows_append(x, y, ..., in_place = NULL, progress = NA)  dm_rows_update(x, y, ..., in_place = NULL, progress = NA)  dm_rows_patch(x, y, ..., in_place = NULL, progress = NA)  dm_rows_upsert(x, y, ..., in_place = NULL, progress = NA)  dm_rows_delete(x, y, ..., in_place = NULL, progress = NA)"},{"path":"https://dm.cynkra.com/dev/reference/rows-dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modifying rows for multiple tables — rows-dm","text":"x Target dm object. y dm object new data. ... dots future extensions must empty. in_place x modified place? argument relevant mutable backends (e.g. databases, data.tables). TRUE, modified version x returned invisibly; FALSE, new object representing resulting changes returned. progress Whether display progress bar, NA (default) hide non-interactive mode, show interactive mode. Requires 'progress' package.","code":""},{"path":"https://dm.cynkra.com/dev/reference/rows-dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modifying rows for multiple tables — rows-dm","text":"dm object dm_ptype() x. in_place = TRUE, underlying data updated side effect, x returned, invisibly.","code":""},{"path":"https://dm.cynkra.com/dev/reference/rows-dm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modifying rows for multiple tables — rows-dm","text":"","code":"# Establish database connection: sqlite <- DBI::dbConnect(RSQLite::SQLite())  # Entire dataset with all dimension tables populated # with flights and weather data truncated: flights_init <-   dm_nycflights13() %>%   dm_zoom_to(flights) %>%   filter(FALSE) %>%   dm_update_zoomed() %>%   dm_zoom_to(weather) %>%   filter(FALSE) %>%   dm_update_zoomed()  # Target database: flights_sqlite <- copy_dm_to(sqlite, flights_init, temporary = FALSE) print(dm_nrow(flights_sqlite)) #> airlines airports  flights   planes  weather  #>       15       86        0      945        0   # First update: flights_jan <-   dm_nycflights13() %>%   dm_select_tbl(flights, weather) %>%   dm_zoom_to(flights) %>%   filter(month == 1) %>%   dm_update_zoomed() %>%   dm_zoom_to(weather) %>%   filter(month == 1) %>%   dm_update_zoomed() print(dm_nrow(flights_jan)) #> flights weather  #>     932      72   # Copy to temporary tables on the target database: flights_jan_sqlite <- copy_dm_to(sqlite, flights_jan)  # Dry run by default: dm_rows_append(flights_sqlite, flights_jan_sqlite) #> Result is returned as a dm object with lazy tables. Use `in_place = FALSE` to mute this message, or `in_place = TRUE` to write to the underlying tables. #> ── Table source ──────────────────────────────────────────────────────────────── #> src:  sqlite 3.40.0 [] #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather` #> Columns: 53 #> Primary keys: 4 #> Foreign keys: 4 print(dm_nrow(flights_sqlite)) #> airlines airports  flights   planes  weather  #>       15       86        0      945        0   # Explicitly request persistence: dm_rows_append(flights_sqlite, flights_jan_sqlite, in_place = TRUE) print(dm_nrow(flights_sqlite)) #> airlines airports  flights   planes  weather  #>       15       86      932      945       72   # Second update: flights_feb <-   dm_nycflights13() %>%   dm_select_tbl(flights, weather) %>%   dm_zoom_to(flights) %>%   filter(month == 2) %>%   dm_update_zoomed() %>%   dm_zoom_to(weather) %>%   filter(month == 2) %>%   dm_update_zoomed()  # Copy to temporary tables on the target database: flights_feb_sqlite <- copy_dm_to(sqlite, flights_feb)  # Explicit dry run: flights_new <- dm_rows_append(   flights_sqlite,   flights_feb_sqlite,   in_place = FALSE ) print(dm_nrow(flights_new)) #> airlines airports  flights   planes  weather  #>       15       86     1761      945      144  print(dm_nrow(flights_sqlite)) #> airlines airports  flights   planes  weather  #>       15       86      932      945       72   # Check for consistency before applying: flights_new %>%   dm_examine_constraints() #> ! Unsatisfied constraints: #> • Table `flights`: foreign key `tailnum` into table `planes`: values of `flights$tailnum` not in `planes$tailnum`: N725MQ (6), N537MQ (5), N722MQ (5), N730MQ (5), N736MQ (5), …  # Apply: dm_rows_append(flights_sqlite, flights_feb_sqlite, in_place = TRUE) print(dm_nrow(flights_sqlite)) #> airlines airports  flights   planes  weather  #>       15       86     1761      945      144   DBI::dbDisconnect(sqlite)"},{"path":"https://dm.cynkra.com/dev/reference/tidyr_table_manipulation.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyr table manipulation methods for zoomed dm objects — tidyr_table_manipulation","title":"tidyr table manipulation methods for zoomed dm objects — tidyr_table_manipulation","text":"Use methods without '.dm_zoomed' suffix (see examples).","code":""},{"path":"https://dm.cynkra.com/dev/reference/tidyr_table_manipulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyr table manipulation methods for zoomed dm objects — tidyr_table_manipulation","text":"","code":"# S3 method for dm_zoomed unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)  # S3 method for dm_keyed_tbl unite(data, ...)  # S3 method for dm_zoomed separate(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE, ...)  # S3 method for dm_keyed_tbl separate(data, ...)"},{"path":"https://dm.cynkra.com/dev/reference/tidyr_table_manipulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidyr table manipulation methods for zoomed dm objects — tidyr_table_manipulation","text":"data object class dm_zoomed col unite.dm_zoomed: see tidyr::unite() separate.dm_zoomed: see tidyr::separate() ... unite.dm_zoomed: see tidyr::unite() separate.dm_zoomed: see tidyr::separate() sep unite.dm_zoomed: see tidyr::unite() separate.dm_zoomed: see tidyr::separate() remove unite.dm_zoomed: see tidyr::unite() separate.dm_zoomed: see tidyr::separate() na.rm see tidyr::unite() see tidyr::separate()","code":""},{"path":"https://dm.cynkra.com/dev/reference/tidyr_table_manipulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidyr table manipulation methods for zoomed dm objects — tidyr_table_manipulation","text":"","code":"zoom_united <- dm_nycflights13() %>%   dm_zoom_to(flights) %>%   select(year, month, day) %>%   unite(\"month_day\", month, day) zoom_united #> # Zoomed table: flights #> # A tibble:     1,761 × 2 #>     year month_day #>    <int> <chr>     #>  1  2013 1_10      #>  2  2013 1_10      #>  3  2013 1_10      #>  4  2013 1_10      #>  5  2013 1_10      #>  6  2013 1_10      #>  7  2013 1_10      #>  8  2013 1_10      #>  9  2013 1_10      #> 10  2013 1_10      #> # … with 1,751 more rows zoom_united %>%   separate(month_day, c(\"month\", \"day\")) #> # Zoomed table: flights #> # A tibble:     1,761 × 3 #>     year month day   #>    <int> <chr> <chr> #>  1  2013 1     10    #>  2  2013 1     10    #>  3  2013 1     10    #>  4  2013 1     10    #>  5  2013 1     10    #>  6  2013 1     10    #>  7  2013 1     10    #>  8  2013 1     10    #>  9  2013 1     10    #> 10  2013 1     10    #> # … with 1,751 more rows"},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":null,"dir":"Reference","previous_headings":"","what":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"Extract first last rows table. Use methods without '.dm_zoomed' suffix (see examples). methods regular dm objects extract first last tables.","code":""},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"","code":"# S3 method for dm_zoomed head(x, n = 6L, ...)  # S3 method for dm_zoomed tail(x, n = 6L, ...)"},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"x object class dm_zoomed n integer vector length dim(x) (1,     non-dimensioned objects). Values specify indices     selected corresponding dimension (along length)     object. positive value n[] includes first/last     n[] indices dimension, negative value     excludes last/first abs(n[]), including remaining     indices. NA non-specified values (length(n) <       length(dim(x))) select indices dimension. Must     contain least one non-missing value. ... arguments passed methods.","code":""},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"dm_zoomed object.","code":""},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"see manual corresponding functions utils.","code":""},{"path":"https://dm.cynkra.com/dev/reference/utils_table_manipulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utils table manipulation methods for dm_zoomed objects — head.dm_zoomed","text":"","code":"zoomed <- dm_nycflights13() %>%   dm_zoom_to(flights) %>%   head(4) zoomed #> # Zoomed table: flights #> # A tibble:     4 × 19 #>    year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier #>   <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>   #> 1  2013     1    10        3        2359       4     426     437     -11 B6      #> 2  2013     1    10       16        2359      17     447     444       3 B6      #> 3  2013     1    10      450         500     -10     634     648     -14 US      #> 4  2013     1    10      520         525      -5     813     820      -7 UA      #> # … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>, #> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, #> #   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time, #> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay dm_insert_zoomed(zoomed, new_tbl_name = \"head_flights\") #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `airlines`, `airports`, `flights`, `planes`, `weather`, `head_flights` #> Columns: 72 #> Primary keys: 4 #> Foreign keys: 8"},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-1049001","dir":"Changelog","previous_headings":"","what":"dm 1.0.4.9001","title":"dm 1.0.4.9001","text":"Merged cran-1.0.4 main.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"chore-1-0-4-9000","dir":"Changelog","previous_headings":"","what":"Chore","title":"dm 1.0.4.9000","text":"Make sure dm passes “noSuggests” workflow (#1659).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-104","dir":"Changelog","previous_headings":"","what":"dm 1.0.4","title":"dm 1.0.4","text":"CRAN release: 2023-02-11","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-1-0-4","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 1.0.4","text":"dm_add_pk() gains autoincrement argument (#1689), autoincrement primary keys configured database copy_dm_to() (#1696). New dm_add_uk(), dm_rm_uk() dm_get_all_uks() functions explicit support unique keys (#622, #1716). dm_get_all_pks() dm_get_all_fks() return output order table parent_table argument (#1707). Improve error message dm_add_pk() columns argument missing (#1644, #1646).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-1-0-4","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 1.0.4","text":"dm_get_all_pks(), dm_get_all_fks(), dm_get_all_uks() require unquoted table names input, consistency parts API (#1741).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-1-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 1.0.4","text":"dm_examine_constraints() works dm objects database compound keys (#1713).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-1-0-4","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 1.0.4","text":"Update pkgdown URL https://dm.cynkra.com/ (#1652). Fix link rot (#1671).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-1-0-4","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 1.0.4","text":"Require dplyr >= 1.1.0 lifecycle >= 1.0.3 (#1771, #1637). Checks pass suggested packages missing (#1659). Fix r-devel builds (#1776). dm_unpack_tbl() sets PK FK (#1715). Clean dm_rows_append() implementation (#1714). dm() accepts tables class \"tbl_sql\" \"tbl_dbi\" (#1695, #1710). Use correctly typed missing value lists (@DavisVaughan, #1686).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-103","dir":"Changelog","previous_headings":"","what":"dm 1.0.3","title":"dm 1.0.3","text":"CRAN release: 2022-10-12","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"chore-1-0-3","dir":"Changelog","previous_headings":"","what":"Chore","title":"dm 1.0.3","text":"Avoid running example without database connection.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-102","dir":"Changelog","previous_headings":"","what":"dm 1.0.2","title":"dm 1.0.2","text":"CRAN release: 2022-09-20","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-1-0-2","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 1.0.2","text":"dm_from_con() can use multiple schemata (@mgirlich, #1441, #1449). pack_join(keep = TRUE) preserves order packed columns (#1513, #1514). pack_join(keep = TRUE) keeps keys y resulting packed column (#1451, #1452). New json_pack.tbl_lazy() json_nest.tbl_lazy() (#969, #975).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 1.0.2","text":"dm_paste() gives correct output factor columns many levels (#1510, #1511).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"chore-1-0-2","dir":"Changelog","previous_headings":"","what":"Chore","title":"dm 1.0.2","text":"Fix compatibility duckdb 0.5.0 (#1509, #1518). Refactor dm_unwrap_tbl() builds “unwrap plan” first (#1446, #1447). Reenable dm_rows_update() test (#1437).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-101","dir":"Changelog","previous_headings":"","what":"dm 1.0.1","title":"dm 1.0.1","text":"CRAN release: 2022-08-06","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-1-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 1.0.1","text":"New dm_deconstruct() creates code deconstruct dm object individual keyed tables via pull_tbl(keyed = TRUE) (#1354).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 1.0.1","text":"Use dm_ptype() dm_gui(), generate better code (#1353).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-100","dir":"Changelog","previous_headings":"","what":"dm 1.0.0","title":"dm 1.0.0","text":"CRAN release: 2022-07-21","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-1-0-0","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 1.0.0","text":"New dm_gui() interactive editing dm objects (#1076, #1319). dm_get_tables() pull_tbl() gain new keyed = FALSE argument. set TRUE, table objects class \"dm_keyed_tbl\" returned. objects inherit underlying data structure (tibble lazy table), keep track primary foreign keys, can used later call dm() recreate dm object keys (#1187). New by_position argument check_subset(), check_set_equality(), check_cardinality_...() examine_cardinality() (#1253). dm() accepts dm objects (#1226). dm_examine_constraints() honors implicit unique keys defined foreign keys (#1131, #1209).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 1.0.0","text":"dm_filter() now stable, new API avoids exposing intermediate state filters yet applied, compatibility wrapper (#424, #426, #1236). check_cardinality_...(), examine_cardinality(), check_subset() check_set_equality() now stable consistently use common interface arguments named x, y, x_select y_select, compatibility wrappers (#1194, #1229). dm_examine_cardinalities() dm_examine_constraints() now stable new signature compatibility wrapper (#1193, #1195). dm_apply_filters(), dm_apply_filters_to_tbl() dm_get_filters() deprecated (#424, #426, #1236). dm_disambiguate_cols() adds table names suffix default, gains .position argument restore original behavior. Arguments sep quiet renamed .sep .quiet (#1293, #1327). dm_squash_to_tbl() deprecated favor new .recursive argument dm_flatten_to_tbl(). Arguments start join renamed .start .join (#1272, #1324). dm_rm_tbl() deprecated favor dm_select_tbl() (#1275). dm_bind() dm_add_tbl() deprecated favor dm() (#1226). rows_truncate() dm_rows_truncate() deprecated, use DDL opposed verbs use DML (#1031, #1321). internal S3 classes now use \"dm_\" prefix (#1285, #1339). Add ellipses generics (#1298).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"api-1-0-0","dir":"Changelog","previous_headings":"","what":"API","title":"dm 1.0.0","text":"Reexport tibble() (#1279). dm_ptype(), dm_financial() dm_pixarfilms() stable now (#1254). Turn “questioning” functions “experimental” (#1030, #1237).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"performance-1-0-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"dm 1.0.0","text":"is_unique_key()uses vctrs::vec_count() local data frames speed (@eutwt, #1247). check_key() uses vctrs::vec_duplicate_any() local data frames speed (@eutwt, #1234).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 1.0.0","text":"dm_draw() works table name space (#1219). Don’t print rule glimpse.dm() empty dm() (#1208).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-1-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 1.0.0","text":"Work around ANSI escape issues CRAN rendering vignette (#1156, #1330). Fix column names ?dm_get_all_pks (#1245). Improve contrast display dm_financial() (#1073, #1250). Add contributing guide (#1222).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-1-0-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 1.0.0","text":"Use sensible node edge IDs, corresponding data model, SVG graph (#1214). Tests datamodelr code (#1215).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-030","dir":"Changelog","previous_headings":"","what":"dm 0.3.0","title":"dm 0.3.0","text":"CRAN release: 2022-07-06","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.3.0","text":"Implement glimpse() zoomed_df (@IndrajeetPatil, #1003, #1161). Remove message automated key selection select argument joins zoomed_df (@IndrajeetPatil, #1113, #1176). dm_from_con(learn_keys = TRUE) works MariaDB (#1106, #1123, #1169, @maelle), compound keys Postgres (#342, #1006, #1016) SQL Server (#342). New json_pack_join(), json_nest_join(), json_pack() json_nest(), similar pack_join(), dplyr::nest_join(), tidyr::pack() tidyr::nest(), create character columns (#917, #918, #973, #974). nest_join() pack_join() support zoomed_df objects (#1119, @IndrajeetPatil).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"api-0-3-0","dir":"Changelog","previous_headings":"","what":"API","title":"dm 0.3.0","text":"Marked stable functions stable, particular dm() related functions (#1032, #1040). Remove rows_*() implementation lazy tables, now available dbplyr >= 2.2.0 (#912, #1024, #1028). Deprecate dm_join_to_tbl(), dm_is_referenced() dm_get_referencing_tables() (#1038). New dm_validate() replaces now deprecated validate_dm() (#1033). dm_get_con() dm_get_filters() use dm argument name (#1034, #1036). Mark ... dm_flatten_to_tbl() experimental (#1037). Add ellipses dm_disambiguate_cols(), dm_draw(), dm_examine_constraints(), dm_nycflights13() dm_pixarfilms() (#1035). New dm_from_con(), soft-deprecated dm_from_src() (#1014, #1018, #1044). Moved pack_join() arguments past ellipsis consistency (#920, #921).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.3.0","text":"Compatibility fix writing SQL Server tables dbplyr >= 2.2.0.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.3.0","text":"pkgdown site now uses BS5 greater readability (#1067, @maelle). Better message dm_rows_...() functions in_place argument missing (@IndrajeetPatil, #414, #1160). Better message learning error (#1081). Greatly improved consistency, content, language across articles (@IndrajeetPatil, #1056, #1132, #1157, #1166, #1079, #1082, #1098, #1100, #1101, #1103, #1112, #1120, #1158, #1175). Tweaks intro vignette README (#1066, #1075, @maelle). Document glimpse() S3 method dm (@IndrajeetPatil, #1121). Update credentials fallback databases dm_financial() hosted pacha.dev (#916, @pachadotdev), also used now vignettes (#1118) dm_from_con() example (#993). Update license year (#1029).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-3-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.3.0","text":"Switch duckdb default database backend (#1179). Test duckdb MariaDB GHA (#1091, #1136).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-028","dir":"Changelog","previous_headings":"","what":"dm 0.2.8","title":"dm 0.2.8","text":"CRAN release: 2022-04-08","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-8","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.8","text":"pack_join() works correctly name existing column either table. cases column overwritten, consistent nest_join() behavior (#864, #865). Messages suggest installation optional packages shown per session (#852). dm_insert_zoomed() uses color zoomed table new table (#750, #863). copy_dm_to() consumes less memory faster writing SQL Server (#855).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-8","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.8","text":"Remove extra spaces output examining constraints compound keys (#868). Fix column tracking foreign keys (#856, #857). copy_dm_to() shows progress bars (#850, #855). Progress bars use console width (#853). Avoid calling dbAppendTable() zero-row tables (#847).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-8","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.8","text":"Require rlang 1.0.1 (#840).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-027","dir":"Changelog","previous_headings":"","what":"dm 0.2.7","title":"dm 0.2.7","text":"CRAN release: 2022-02-03","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-7","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.7","text":"New dm_wrap_tbl(), dm_unwrap_tbl(), dm_nest_tbl(), dm_unnest_tbl(), dm_pack_tbl() dm_unpack_tbl() (#595, #733, #737). New dm_examine_cardinality() (#264, #735). New pack_join() generic method data frames, tidyr::pack() dplyr::nest_join() tidyr::nest() (#721, #722). dm_pixarfilms() exported gains consistent = FALSE argument; TRUE data modified referential constraints satisfied (#703, #707, #708, @erictleung).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-7","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.7","text":"db_schema_...() functions longer pro-actively check schema existence (#672, #815, #771). db_schema_list.Microsoft SQL Server longer ignoring schemas owner found (#815, #771). copy_dm_to() works DuckDB , SQL statements define tables indexes now created us (#701, #709).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-7","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.7","text":"Establish compatibility rlang 1.0.0 (#756). Simplify database checks GitHub Actions (#712).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-026","dir":"Changelog","previous_headings":"","what":"dm 0.2.6","title":"dm 0.2.6","text":"CRAN release: 2021-11-21","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-6","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.6","text":"New dm_pixarfilms() creates dm object data {pixarfilms} package (#600, @erictleung). check_cardinality_0_1(), check_cardinality_0_n(), check_cardinality_1_1(), check_cardinality_1_n(), examine_cardinality() now support compound keys (#524). check_subset() check_set_equality() support compound keys (#523). dm_paste() adds on_delete argument dm_add_fk() (#673). dm_disambiguate_cols() also disambiguates columns used keys, support correct disambiguation compound keys (#662). dm_disambiguate_cols() now emits source code equivalent renaming operation (#684). dm_examine_constraints() uses backticks surround table names (#687).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.6","text":"decompose_table() now avoids creating NA values key column (#580). dm_draw() works empty tables (#585).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-6","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.6","text":"Fix compatibility dplyr 1.0.8 (#698).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-025","dir":"Changelog","previous_headings":"","what":"dm 0.2.5","title":"dm 0.2.5","text":"CRAN release: 2021-10-15","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-5","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.5","text":"mutate(), transmute(), distinct() summarize() now support dplyr::across() extra arguments (#640). Key tracking first three verbs less strict based name equality (#663). relocate() now works zoomed dm objects (#666). dm_add_fk() gains on_delete argument copy_dm_to() picks translates DELETE CASCADE DELETE ACTION specification foreign key (#649). dm_copy_to() defines foreign keys table creation, databases except DuckDB. Tables created topological order (#658). cyclic relationship graphs, table creation attempted original order may fail (#664). waldo::compare() shows better output dm objects (#642). dm_paste() output uses trailing commas dm::dm() tibble::tibble() calls, sorts column attributes name, better modularity (#641).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-0-2-5","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 0.2.5","text":"New db_schema_create(), db_schema_drop(), db_schema_exists() db_schema_list() replace corresponding sql_schema_*() functions, latter soft-deprecated (#670). connection argument db_schema_*() called con, dest (#668).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.5","text":"copy_dm_to() sql_create_schema() longer actively check schema existence (#644, #660). Add newline OUTPUT clause SQL Server (#647). Fix sql_rows_delete() returning argument SQL Server (#645).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-5","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.5","text":"Remove method needed RSQLite < 2.2.8, add warning loaded RSQLite version <= 2.2.8 (#632). Adapt MSSQL tests testthat update (#648).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-024","dir":"Changelog","previous_headings":"","what":"dm 0.2.4","title":"dm 0.2.4","text":"CRAN release: 2021-09-30","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-4","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.4","text":"rows_insert(), rows_update() rows_delete() gain returning argument. combination in_place = TRUE argument makes newly inserted rows accessible via get_returning_rows() operation completes (#593, @mgirlich). Implement rows_patch() DBI connections (#610, @mgirlich). Use ACTION instead CASCADE foreign key constraints permit self-references. dm_from_src() supports pool::Pool objects (#599, @moodymudskipper). Better error message dm_rows_update() related functions dm objects tables without primary key (#592). glimpse() implemented dm objects (#605). Support DuckDB rows_insert(), rows_update() rows_delete() (#617, @mgirlich).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.4","text":"Fix dm_zoom_to() dm objects empty table (#626, @moodymudskipper). Avoid generating invalid dm objects corner cases (#596).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-4","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.4","text":"sql_schema_list() supports pool::Pool objects (#633, @brancengregory). Establish compatibility pillar 1.6.2, vctrs > 0.3.8 rlang > 0.4.11 (#613). Use check_suggested() everywhere (#572, @moodymudskipper). Add CI run validating new dm objects (#597).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-023","dir":"Changelog","previous_headings":"","what":"dm 0.2.3","title":"dm 0.2.3","text":"CRAN release: 2021-06-20","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.2.3","text":"Fix rows_truncate() interactive mode (#588).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-3","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.3","text":"Implement rows_delete() databases (#589).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-3","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.3","text":"Skip examples might require internet access non-CI platforms.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-022","dir":"Changelog","previous_headings":"","what":"dm 0.2.2","title":"dm 0.2.2","text":"CRAN release: 2021-06-13","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-2","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.2","text":"dm_examine_constraints(), dm_rows_insert() related, copy_dm_to() collect.dm() show progress bars interactive mode via progress package. new progress = NA argument controls behavior (#262, @moodymudskipper). copy_dm_to() gains copy_to argument support ways copying data database (#582).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.2","text":"Always run database tests sqlite df source. Establish compatibility testthat > 3.0.2 (#566, @moodymudskipper).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-021","dir":"Changelog","previous_headings":"","what":"dm 0.2.1","title":"dm 0.2.1","text":"CRAN release: 2021-05-11","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 0.2.1","text":"dm_get_all_fks() returns data frame parent_key_cols instead parent_pk_cols column (introduced dm 0.2.0), reflect fact foreign key longer necessarily points primary key (#562). *_pk() *_fk() functions now verify dots actually empty (#536). dm_get_pk() deprecated favor dm_get_all_pks() (#561). dm_has_fk() dm_get_fk() deprecated favor dm_get_all_fks() (#561).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-1","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.1","text":"dm_add_fk() gains ref_columns argument supports creating foreign keys non-primary keys (#402). dm_get_all_pks() gains table argument filtering returned primary keys (#560). dm_get_all_fks() gains parent_table argument filtering returned foreign keys (#560). dm_rm_fk() gains optional ref_columns argument. function now supports removal multiple foreign keys filtered parent child table columns, message (#559). dm_rm_pk() gains columns argument allows filtering columns tables removing primary keys. rm_referencing_fks argument deprecated favor new fail_fk argument (#558). dm_get_all_fks() optimized speed longer sorts keys (#560). dm operations now slightly faster overall.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-2-1","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.2.1","text":"internal data structure dm object changed accommodate foreign keys columns primary key. upgrade message shown working dm object earlier version, e.g. loaded cache .rds file (#402). Drop \"dm_v1\" class dm objects , made every S3 dispatch costly. Relying internal \"version\" attribute instead (#547).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-020","dir":"Changelog","previous_headings":"","what":"dm 0.2.0","title":"dm 0.2.0","text":"CRAN release: 2021-05-03","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 0.2.0","text":"Deprecate dm_get_src() tbl.dm(), src_tbls.dm(), copy_to.dm(). functions better alternatives use notion “data source” phased dplyr (#527). *_pk() *_fk() functions gain ellipsis argument comes check, force rm_referencing_fks arguments (#520).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.2.0","text":"dm_add_pk() dm_add_fk() support compound keys via c() notation, e.g. dm_add_pk(dm, table, c(col1, col2)). dm_nycflights13() returns data model compound keys default. Use compound = FALSE return data model dm v0.1.13 earlier (#3). dm_get_all_fks() includes parent_pk_cols column describes primary key columns parent table (#335). dm_from_src() supports schema argument also MariaDB MySQL databases (#516). dm objects now inherit \"dm_v1\" addition \"dm\", allow backward-compatible changes internal format (#521). Use hack create compound primary keys database (#522). dm_examine_constraints() check functions count number rows violate constraints primary foreign keys (#335). copy_dm_to(set_key_constraints = FALSE) downgrades unique indexes regular indexes (#335). rows_truncate() implemented data frames (#335). dm_enum_fk_candidates() enumerates column order apper table (#335).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0113","dir":"Changelog","previous_headings":"","what":"dm 0.1.13","title":"dm 0.1.13","text":"CRAN release: 2021-04-25","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-1-13","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.1.13","text":"dm_draw() gains column_types argument, TRUE column type shown displayed column (#444, @samssann). copy_dm_to() gains schema argument (#432). dm_from_src() gains dbname argument MSSQL (#472).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-1-13","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.1.13","text":"Fix rows_update() multiple columns updated (#488, @samssann).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"performance-0-1-13","dir":"Changelog","previous_headings":"","what":"Performance","title":"dm 0.1.13","text":"enum_fk_candidates() now checks distinct values, improves performance large tables. consequence, number distinct values reported mismatches, number mismatching rows/entries (#494).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-1-13","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.1.13","text":"Fix description filtering behavior ?dm_zoom_to (#403).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-1-13","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.1.13","text":"Move repository https://github.com/cynkra/dm (#500). Enable Postgres tests (#497). Test DuckDB GitHub Actions (#498).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0112","dir":"Changelog","previous_headings":"","what":"dm 0.1.12","title":"dm 0.1.12","text":"CRAN release: 2021-02-15 dm_from_src() gains dbname argument MSSQL (#472). Implement count() tally() dplyr 1.0.3 compatibility (#475). Use databases.pacha.dev instead db-edu.pacha.dev (#478, @pachamaltese).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0110","dir":"Changelog","previous_headings":"","what":"dm 0.1.10","title":"dm 0.1.10","text":"CRAN release: 2021-01-07 Columns missing values longer primary keys (#469). Fix dm_from_src() MSSQL learn_keys = FALSE (#427). Tests use expect_snapshot() everywhere (#456). Fix compatibility testthat 3.0.1 (#457).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-019","dir":"Changelog","previous_headings":"","what":"dm 0.1.9","title":"dm 0.1.9","text":"CRAN release: 2020-11-18 New vignette(\"howto-dm-copy\", package = \"dm\") vignette(\"howto-dm-rows\", package = \"dm\") discuss updating data database. part derived vignette(\"howto-dm-db\", package = \"dm\") (#411, @jawond). New dm_mutate_tbl() (#448). dm_financial() falls back db-edu.pacha.dev relational.fit.cvut.cz unavailable (#446, @pachamaltese). Use testthat 3e (#455).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-017","dir":"Changelog","previous_headings":"","what":"dm 0.1.7","title":"dm 0.1.7","text":"CRAN release: 2020-09-02 Bump RMariaDB required version 1.0.10 work around timeout R CMD check. dm_from_src() accepts schema argument MSSQL databases (#367).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-016","dir":"Changelog","previous_headings":"","what":"dm 0.1.6","title":"dm 0.1.6","text":"CRAN release: 2020-07-29","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 0.1.6","text":"dm_get_src() returns NULL local data sources (#394). Local target copy_dm_to() gives deprecation message (#395).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-1-6","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.1.6","text":"copy_dm_to() gives better error message bad table_names (#397). dm objects local data sources longer show “Table source” part output. Error messages now refer “tables”, “elements” (#413). New dm_bind() binding two ‘dm’ objects together (#417).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.1.6","text":"databases, underlying SQL table names quoted early avoid later SQL syntax errors (#419). dm_financial() longer prints message learn_keys = FALSE. dm_rows_update() related functions now use primary keys defined x establishing matching rows.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-1-6","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.1.6","text":"Use withCallingHandlers() appropriate (#422). Consistent definition .dm .dm_zoomed methods (#300). Examples involving dm_financial() run connection can’t established (#418). Fix database tests CI (#416).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-015","dir":"Changelog","previous_headings":"","what":"dm 0.1.5","title":"dm 0.1.5","text":"CRAN release: 2020-07-03","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-1-5","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.1.5","text":"dm_paste() generates self-contained code (#401). Errors regarding cycles relationship graph now show shortest cycle (#405). Implement rows_truncate() databases. collect() works zoomed dm, message. data model drawn compact way comprises multiple connected components. dm_add_pk(check = TRUE) gives better error message.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.1.5","text":"rows_insert() works column names consist SQL keywords (#409). Cycles connected components don’t affect filtering cycle-free component. Avoid src_sqlite() examples (#372).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-1-5","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.1.5","text":"Testing SQLite, Postgres SQL Server GitHub Actions (#408, @pat-s). Testing packages “Suggests” uninstalled.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-014","dir":"Changelog","previous_headings":"","what":"dm 0.1.4","title":"dm 0.1.4","text":"CRAN release: 2020-06-07","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-1-4","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.1.4","text":"New dm_rows_insert(), dm_rows_update(), dm_rows_patch(), dm_rows_upsert(), dm_rows_delete() dm_rows_truncate(), calling corresponding rows_*() method every table (#319). New rows_truncate() (#319). Added rows_insert() rows_update() methods SQLite, Postgres, MariaDB MSSQL (#319). Missing arguments now give better error message (#388). Empty dm object prints dm() (#386). copy_dm_to() also accepts function table_names argument. unique_table_names() argument deprecated (#80).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-1-4","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.1.4","text":"Add TL;DR README (#377, @jawond). Add content old README howto-dm-theory.Rmd (#378, @jawond).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-1-4","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.1.4","text":"Require dplyr >= 1.0.0. Use GitHub Actions (#369, @pat-s).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-013","dir":"Changelog","previous_headings":"","what":"dm 0.1.3","title":"dm 0.1.3","text":"CRAN release: 2020-05-25 Avoid src_sqlite() vignettes (#372). Rename vignettes (#349). Rename error class \"dm_error_tables_not_neighbours\" \"dm_error_tables_not_neighbors\". Shortened README intro article (#192, @jawond). Better testing MSSQL (#339). Fix compatibility dplyr 1.0.0.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-012","dir":"Changelog","previous_headings":"","what":"dm 0.1.2","title":"dm 0.1.2","text":"CRAN release: 2020-05-04","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-1-2","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.1.2","text":"dm_from_src() now works databases Postgres MSSQL (#288), gives warning tables accessed table_name = NULL (#348), gains learn_keys argument control querying primary foreign keys database (#340). dm_examine_constraints() now prints different message dm constraints defined. Disambiguation message now lists column names easier copy-pasting. New methods \"dm_zoomed\": head(), tail(), pull(), group_data(), group_indices(), group_vars(), group_keys() groups() (#236, #203). dm_paste() supports writing colors table definition via new options argument. definition can written file via new path argument. select argument soft-deprecated (#218, #302). dm_add_tbl() uses rlang::list2() internally, now accepts := specify table names. New dm_ptype() (#301). New dm_financial() dm_financial_sqlite(). Printing dm objects database sources many tables now faster (#308, @gadenbuie). check_key() now also works zoomed dm. Key columns always selected join operation, message (#153). Support alpha colors table colors (#279).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.1.2","text":"Fix visualization column acts foreign key (#37). dm_add_pk(), dm_rm_pk(), dm_add_fk() dm_rm_fk() now stricter keys exists attempting remove keys don’t exist. relaxed mode operation may added later (#214). examine_cardinality(), dm_examine_constraints() enum_pk_candidates() now work columns named n. dm_set_key_constraints() (extension dm_copy_to(set_key_constraints = TRUE)) now quote identifiers SQL creates foreign keys database. collect() gives better error message called \"dm_zoomed\" (#294). check_subset() gives clean error message tables complex expressions. dm_from_src(schema = \"...\") works Postgres search_path set connection. compute.dm_zoomed() longer throws error. Remove unused DT import (#295).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"compatibility-0-1-2","dir":"Changelog","previous_headings":"","what":"Compatibility","title":"dm 0.1.2","text":"Remove use deprecated src_df() (#336). Fix compatibility dplyr 1.0.0 (#203).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-1-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.1.2","text":"dm_draw() output shown examples (#251). New article “{dm} databases” (#309, @jawond).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-1-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.1.2","text":"Testing local data frames (default), optionally also SQLite, Postgres, RMariaDB, SQL Server. Currently requires development versions various pull requests (#334, #327, #312, #76). dm_nycflights13(subset = TRUE) memoizes subset also reduces size weather table. Expand definitions deprecated functions (#204).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-011","dir":"Changelog","previous_headings":"","what":"dm 0.1.1","title":"dm 0.1.1","text":"CRAN release: 2020-03-12 Implement format.dm(). Adapt tidyselect 1.0.0 (#257). Zooming unzooming now faster columns removed. Table names must unique. dm_examine_constraints() formats problems nicely. New class prettier printing keys (#244). Add experimental schema support dm_from_src() Postgres new schema table_type arguments (#256).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-010","dir":"Changelog","previous_headings":"","what":"dm 0.1.0","title":"dm 0.1.0","text":"Package now “maturing” lifecycle (#154). filter.dm_zoomed() longer sets filter. examine_() functions never throw error (#238). API overhaul: dm_zoom_to(), dm_insert_zoomed(), dm_update_zoomed() dm_discard_zoomed(); check_() -> examine_(); dm_get_filter() -> dm_get_filters(); dm_from_src() + dm_learn_from_db() -> dm_from_src() (#233). New $.dm_zoomed(), [.dm_zoomed(), [[.dm_zoomed(), length.dm_zoomed(), names.dm_zoomed(), tbl_vars.dm_zoomed() (#199, #216). New .list() methods (#213). Help pages dplyr methods (#209). New migration guide dm <= 0.0.5 (#234). New {tidyselect} interface setting colors (#162) support hex color codes well R standard colors. Prepare dm_examine_constraints() key-related functions compound keys (#239). Avoid warnings R CMD check dev versions dependencies. Improve error messages missing tables (#220).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-006","dir":"Changelog","previous_headings":"","what":"dm 0.0.6","title":"dm 0.0.6","text":"Change cdm_ prefix dm_. old names still available (#117). New pull_tbl() extracts single table dm (#206). New dm_apply_filters_to_tbl() applies filters related tables table, similar dm_apply_filters(); tbl(), $ [[ longer apply filter conditions defined related tables (#161). New dm_paste() (#160). New check_cardinality() returns nature relationship parent_table$pk_col child_table$fk_col (#15). New zoom vignette (#171). check_key() longer maps empty selection list columns. check_key() supports tidyselect (#188). dm_rm_tbl() supports tidyselect (#127). decompose_table() uses tidyselect (#194). Implement copy_to() dm objects (#129). Relax test cycles relationship graph (#198). Return ref_table column dm_check_constraints() (#178). str() shows simplified views (#123). Edits README (#172, @bbecane). Extend validate_dm() (#173). Fix zooming table uses FK column primary key (#193). Fix corner case dm_rm_fk() (#175). efficient check_key() databases (#208). Testing R >= 3.3 debug versions. Remove {stringr} dependency (#183).","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"features-0-0-5","dir":"Changelog","previous_headings":"","what":"Features","title":"dm 0.0.5","text":"cdm_filter() filter.dm_zoomed() apply filter instantly, expression recorded display purposes terminating search filtered tables cdm_apply_filters(). now allows using variety operations filtered dm objects (#124). dimnames(), colnames(), dim(), distinct(), arrange(), slice(), separate() unite() implemented zoomed dm-s (#130). Joins zoomed dm objects now supported (#121). Joins use column name disambiguation algorithm cdm_flatten_to_tbl() (#147). slice.dm_zoomed(): user decides arg .keep_pk PK column tracked (#152). Supported {dplyr} {tidyr} verbs reexported. enum_pk_candidates() works zoomed dm-s (#156). New enum_fk_candidates() (#156). Add name repair argument cdm_insert_zoomed_tbl() cdm_add_tbl(), defaulting renaming old new tables adding tables duplicate names (#132). Redesign constructors validators: dm() akin tibble(), dm_from_src() works like dm() previously, new_dm() accepts list tables longer validates, validate_dm() checks internal consistency (#69). compute.dm() applies filters calls compute() tables (#135).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-0-5","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.0.5","text":"New demo. Add explanation empty dm (#100).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"bug-fixes-0-0-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"dm 0.0.5","text":"Avoid asterisk printing local dm_zoomed (#131). cdm_select_tbl() works multiple foreign keys defined two tables (#122).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-004","dir":"Changelog","previous_headings":"","what":"dm 0.0.4","title":"dm 0.0.4","text":"Many {dplyr} verbs now work tables dm. Zooming table vie cdm_zoom_to_tbl() creates zoomed dm {dplyr} verbs can applied. resulting table can put back dm cdm_update_zoomed_tbl() (overwriting original table) cdm_insert_zoomed_tbl() (creating new table), respectively (#89). cdm_select_to_tbl() removes foreign key constraints corresponding columns removed. Integrate code {datamodelr} package (@bergant, #111). Reorder tables \"dm\" using cdm_select_tbl() (#108). accurate documentation filtering operation (#98). Support empty dm objects via dm() new_dm() (#96). cdm_flatten_to_tbl() now flattens immediate neighbors default (#95). New cdm_add_tbl() cdm_rm_tbl() (#90). New cdm_get_con() (#84). dm object defined using nested tibble, one row per table (#57).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-003","dir":"Changelog","previous_headings":"","what":"dm 0.0.3","title":"dm 0.0.3","text":"cdm_enum_pk_candidates() cdm_enum_fk_candidates() show candidates first (#85). cdm_flatten_to_tbl() works immediate neighborhood (#75). New cdm_squash_to_tbl() implements recursive flattening left, inner full join (#75). Updated readme introduction vignette (#72, @cutterkom). New cdm_check_constraints() check referential integrity dm (#56). cdm_copy_to() gains table_names argument (#79). check_key() now deals correctly named column lists (#83). Improve error message calling cdm_add_pk() missing column.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0029003","dir":"Changelog","previous_headings":"","what":"dm 0.0.2.9003","title":"dm 0.0.2.9003","text":"Fix R CMD check.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0029002","dir":"Changelog","previous_headings":"","what":"dm 0.0.2.9002","title":"dm 0.0.2.9002","text":"Use caching improve loading times. Run tests one source (#76). cdm_enum_fk_candidates() checks class compatibility implicitly via left_join(). cdm_enum_fk_candidates() contains detailed entry column error & candidate (percentage mismatched vals etc.). Improve error messages cdm_join_to_tbl() cdm_flatten_to_tbl() presence cycles disconnected tables (#74).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0029001","dir":"Changelog","previous_headings":"","what":"dm 0.0.2.9001","title":"dm 0.0.2.9001","text":"Remove src component dm (#38). Internal: Add function checking tables src. Internal: Add 2 classed errors. cdm_get_src() local dm always returns src based .GlobalEnv. cdm_flatten() gains ... argument specify tables include. Currently, tables must form connected subtree rooted start. Disambiguation column names now happens selecting relevant tables. resulting SQL query efficient inner outer joins filtering applied. Flattening right_join two tables well-defined gives error (#62). Add vignette joining functions (#60, @cutterkom). Shorten message cdm_disambiguate_cols().","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-0029000","dir":"Changelog","previous_headings":"","what":"dm 0.0.2.9000","title":"dm 0.0.2.9000","text":"cdm_flatten_to_tbl() disambiguates necessary columns. flattening, column name LHS (child) table used (#52). Fix formatting enum_pk_candidates() character data. cdm_add_pk() cdm_add_fk() longer check data integrity default. Explicitly checking join argument function, avoid surprises caller passes data. cdm_copy_to() works correctly filtered dm objects. cdm_apply_filters() actually resets filter conditions. detailed README file vignette filtering (#29, @cutterkom). cdm_draw() longer supports table_names argument, use cdm_select_tbl(). Copying dm database now creates indexes primary foreign keys.","code":""},{"path":[]},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"dm 0.0.2","text":"Requires tidyr >= 1.0.0. cdm_nrow() returns named list (#49). Remove cdm_semi_join(). Remove cdm_find_conn_tbls() all_connected argument cdm_select() (#35). Unexport cdm_set_key_constraints(). Rename cdm_select() cdm_select_tbl(), now uses {tidyselect}. cdm_nycflights13() now cycle = FALSE default. Rename cdm_check_for_*() cdm_enum_*().","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"performance-0-0-2","dir":"Changelog","previous_headings":"","what":"Performance","title":"dm 0.0.2","text":"cdm_filter() records filtering operation, filter applied querying table via tbl() calling compute() new cdm_apply_filters() (#32).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"new-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"dm 0.0.2","text":"New cdm_flatten_to_tbl() flattens dm wide table starting specified table (#13). Rename cdm_join_tbl() cdm_join_to_tbl(). New cdm_disambiguate_cols() (#40). New cdm_rename() (#41) cdm_select() (#50) renaming selecting columns dm tables. New length.dm() length<-.dm() (#53). $, [[, [, names(), str() length() now implemented dm objects (read-). New enum_pk_candidates().","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"minor-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"dm 0.0.2","text":"browse_docs() opens pkgdown website (#36). as_dm() now also accepts list remote tables (#30). Use {tidyselect} syntax cdm_rename_tbl() cdm_select_tbl() (#14). tibbles returned cdm_enum_fk_candidates() cdm_enum_pk_candidates() contain column explains reasons rejection human-readable form (#12). Improve compatibility RPostgres. create_graph_from_dm() longer fails presence cycles (#10). suggest {RSQLite}. cdm_filter() longer requires primary key. decompose_table() adds new column table end. tbl() now fails table part data model.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"documentation-0-0-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dm 0.0.2","text":"Add setup article (#7).","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"internal-0-0-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"dm 0.0.2","text":"Using simpler internal data structure store primary foreign key relations (#26). New nse_function() replaces h() marking functions NSE avoid R CMD check warnings. Simplified internal data structure creation new operations update dm becomes easier. copying dm database, NULL constraints set creation table. removes necessity store column types. Using {RPostgres} instead {RPostgreSQL} testing.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"dm-001","dir":"Changelog","previous_headings":"","what":"dm 0.0.1","title":"dm 0.0.1","text":"Initial GitHub release.","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"creating-dm-objects-and-basic-functions-0-0-1","dir":"Changelog","previous_headings":"","what":"Creating dm objects and basic functions:","title":"dm 0.0.1","text":"dm() new_dm() validate_dm() cdm_get_src() cdm_get_tables() cdm_get_data_model() is_dm() as_dm()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"primary-keys-0-0-1","dir":"Changelog","previous_headings":"","what":"Primary keys","title":"dm 0.0.1","text":"cdm_add_pk() cdm_has_pk() cdm_get_pk() cdm_get_all_pks() cdm_rm_pk() cdm_check_for_pk_candidates()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"foreign-keys-0-0-1","dir":"Changelog","previous_headings":"","what":"Foreign keys","title":"dm 0.0.1","text":"cdm_add_fk() cdm_has_fk() cdm_get_fk() cdm_get_all_fks() cdm_rm_fk() cdm_check_for_fk_candidates()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"visualization-0-0-1","dir":"Changelog","previous_headings":"","what":"Visualization","title":"dm 0.0.1","text":"cdm_draw() cdm_set_colors() cdm_get_colors() cdm_get_available_colors()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"flattening-0-0-1","dir":"Changelog","previous_headings":"","what":"Flattening","title":"dm 0.0.1","text":"cdm_join_tbl()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"filtering-0-0-1","dir":"Changelog","previous_headings":"","what":"Filtering","title":"dm 0.0.1","text":"cdm_filter() cdm_semi_join() cdm_nrow()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"interaction-with-dbs-0-0-1","dir":"Changelog","previous_headings":"","what":"Interaction with DBs","title":"dm 0.0.1","text":"cdm_copy_to() cdm_set_key_constraints() cdm_learn_from_db()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"utilizing-foreign-key-relations-0-0-1","dir":"Changelog","previous_headings":"","what":"Utilizing foreign key relations","title":"dm 0.0.1","text":"cdm_is_referenced() cdm_get_referencing_tables() cdm_select() cdm_find_conn_tbls()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"table-surgery-0-0-1","dir":"Changelog","previous_headings":"","what":"Table surgery","title":"dm 0.0.1","text":"decompose_table() reunite_parent_child() reunite_parent_child_from_list()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"check-keys-and-cardinalities-0-0-1","dir":"Changelog","previous_headings":"","what":"Check keys and cardinalities","title":"dm 0.0.1","text":"check_key() check_if_subset() check_set_equality() check_cardinality_0_n() check_cardinality_1_n() check_cardinality_1_1() check_cardinality_0_1()","code":""},{"path":"https://dm.cynkra.com/dev/news/index.html","id":"miscellaneous-0-0-1","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"dm 0.0.1","text":"cdm_nycflights13() cdm_rename_table() cdm_rename_tables()","code":""}]
